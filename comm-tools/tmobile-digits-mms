#!/usr/bin/perl
use strict;
use warnings;
use Encode qw(encode decode);
use File::Basename qw(basename);
use Time::HiRes qw(time);
use JSON qw(decode_json encode_json);
use Try::Tiny;

my $HAR_EXTRACTOR        = "$ENV{HOME}/.local/bin/har-extractor";
my $SMS_DB_IMPORTER      = "$ENV{HOME}/Code/sx/comm-tools/sms_db_importer.py";
my $RESTORE_COMM         = "$ENV{HOME}/Code/sx/restore-comm";

my $MY_NUMBER_FILE       = "$ENV{HOME}/Code/sx/backup/my_number";
my $MMS_REPO             = "$ENV{HOME}/Code/sx/backup/backup-mms/repo";
my $MMS_PARTS_REPO       = "$ENV{HOME}/Code/sx/backup/backup-mms/parts-repo";

my $BACKUP_DIR_INDEXEDDB = "$ENV{HOME}/Code/sx/backup/backup-mms/tmobile-digits/indexeddb";
my $BACKUP_DIR_HAR       = "$ENV{HOME}/Code/sx/backup/backup-mms/tmobile-digits/har";
my $BACKUP_DIR_ANDROID   = "$ENV{HOME}/Code/sx/backup/backup-mms/tmobile-digits/android";

my $ADD_COMM_TO_REPO_CMD = "$ENV{HOME}/Code/sx/comm-tools/add-comm-to-repo.pl";

my $DOWNLOADS_DIR        = "$ENV{HOME}/Downloads";

my $PICNAME_CMD = "picname";

my $MODE_HAR = "har";
my $MODE_INDEXEDDB = "indexedDB";
my $MODE_ANDROID = "android";
my $MODE_REORGANIZE = "reorganize";

my $MSG_TYPE_MMS = "mms";
my $MSG_TYPE_SMS = "sms";

my $INSTRUCTIONS = ""
  . "  BACKUP_FILE messages get written to mms repo + parts-repo\n"
  . "    $MMS_REPO\n"
  . "    $MMS_PARTS_REPO\n"
  . "  some are VERY LIKELY DUPES\n"
  . "  commit the ones you want and remove the rest (maybe git clean -f -d)\n"
  . "  ensure mms dir AND mms parts dir are both correct\n"
  . "  to test consistency, run: $RESTORE_COMM --dry-run\n"
;

my $REORGANIZE_CMD_HAR =
  "$PICNAME_CMD -a --quiet $BACKUP_DIR_HAR/*.har 2>/dev/null";
my $REORGANIZE_CMD_INDEXEDDB =
  "mv --no-clobber $DOWNLOADS_DIR/indexeddb*.json $BACKUP_DIR_INDEXEDDB 2>/dev/null";

my $USAGE = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS] -b | --reorganze-backups
    -run: $REORGANIZE_CMD_HAR
    -run: $REORGANIZE_CMD_INDEXEDDB
    -(no reorganize is needed for android backups)
    -print the latest BACKUP_FILE for har and indexeddb

  $0 [OPTS] -l | --latest
    same as: $0 [OPTS] 0

  $0 [OPTS] BACKUP_INDEX
    -select <INDEXED_BACKUP_FILE> for <BACKUP_INDEX> (0-indexed, newest-first, by mtime)
      -list <INDEXED_BACKUP_FILE>s from:
        $BACKUP_DIR_HAR
      -if --indexeddb list <INDEXED_BACKUP_FILE>s from:
        $BACKUP_DIR_INDEXEDDB
      -order <INDEXED_BACKUP_FILE>s by mtime, newest-first
      -assign an <INDEX> to each, starting with 0
      -if <BACKUP_INDEX> is non-negative:
        -select <INDEXED_BACKUP_FILE> with: <BACKUP_INDEX> = <INDEX>
        -e.g.: 0 is the newest, 1 is the second-newest
      -if <BACKUP_INDEX> is negative:
        -count the number of <INDEXED_BACKUP_FILE>s as <BACKUP_COUNT>
        -select <INDEXED_BACKUP_FILE> with: <BACKUP_INDEX> = <INDEX> - <BACKUP_COUNT>
        -e.g.: -1 is the oldest, -2 is the second-oldest
    -same as: $0 <INDEXED_BACKUP_FILE>

  $0 [OPTS] BACKUP_FILE
    -if BACKUP_FILE ends in '.har', implies --har
    -if BACKUP_FILE contains 'indexeddb', implies --indexeddb
    $INSTRUCTIONS

  --har
    -use backup dir: $BACKUP_DIR_HAR
    -before selecting BACKUP_FILE by index, run:
      $REORGANIZE_CMD_HAR
    -treat selected BACKUP_FILE as a .har file
    -extract MMS json files from expanded har file
    (this is the default)

  -i | --indexeddb | --indexed-db
    -use backup dir: $BACKUP_DIR_INDEXEDDB
    -before selecting BACKUP_FILE by index, run:
      $REORGANIZE_CMD_INDEXEDDB
    -treat selected BACKUP_FILE as a IndexedDBEdit JSON file
    -extract MMS messages directly from the IndexedDB

  -a | --android
    -use backup dir: $BACKUP_DIR_ANDROID/db
    -use files in: $BACKUP_DIR_ANDROID/att-files
    -(no reorganize is needed for android backups)
    -treat selected BACKUP_FILE as a DIGITS android app messages_repository.sqlite DB
    -extract MMS messages from DB, using att files in $BACKUP_DIR_ANDROID/att-files

  --sms
    skip MMS parsing, and parse SMS instead
    format and output to SMS_CSV_FILE, and add to repo with:
    $ADD_COMM_TO_REPO_CMD

  --offset-hours=OFFSET_HOURS
    adjust msg info date and dateSent by positive or negative hours
    OFFSET_HOURS must be an integer
      same as: --offset-millis=\$((\$OFFSET_HOURS * 60 * 60 * 1000))

  --offset-millis=OFFSET_MILLIS
    adjust msg info date and dateSent by positive or negative milliseconds
    OFFSET_MILLIS must be an integer

   -n | -s | --dry-run | --simulate
     do not write to MMS repo, MMS parts repo, or SMS repo
     NOTE: backup dirs are still reorganized with:
       $REORGANIZE_CMD_HAR
       or
       $REORGANIZE_CMD_INDEXEDDB
";

sub handleSMS($@);
sub handleMMS($$$$);
sub extractHarFile($);
sub getBackupFile($$$);
sub cleanNumber($);
sub escapeStr($);
sub parseIndexedDB($);
sub parseMMSFile($);
sub parseSMSFile($);
sub formatSMSBodyForCSV($);
sub formatSMS($);
sub decodeBase64($);
sub replaceMIMEUnicodeChars($);
sub mtime($);
sub run(@);
sub nowMillis();

sub main(@){
  my $backupIndex;
  my $backupFile;
  my $mode = $MODE_HAR;
  my $msgType = $MSG_TYPE_MMS;
  my $opts = {
    offsetMillis => 0,
    dryRun       => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-b|--reorganze-backups)$/){
      $mode = $MODE_REORGANIZE;
    }elsif($arg =~ /^(-l|--latest)$/i){
      $backupIndex = 0;
    }elsif($arg =~ /^(\d+|-\d+)$/){
      $backupIndex = $1;
    }elsif(-f $arg and $arg =~ /\.har$/i){
      $backupFile = $arg;
      $mode = $MODE_HAR;
    }elsif(-f $arg and $arg =~ /indexeddb.*\.json/){
      $backupFile = $arg;
      $mode = $MODE_INDEXEDDB;
    }elsif($arg =~ /^(--har)$/){
      $mode = $MODE_HAR;
    }elsif($arg =~ /^(-i|--indexeddb|--indexed-db)$/){
      $mode = $MODE_INDEXEDDB;
    }elsif($arg =~ /^(-a|--android)$/){
      $mode = $MODE_ANDROID;
    }elsif($arg =~ /^--offset-hours=(-?\d+)$/){
      $$opts{offsetMillis} = $1*60*60*1000;
    }elsif($arg =~ /^--offset-millis=(-?\d+)$/){
      $$opts{offsetMillis} = $1;
    }elsif($arg =~ /^--sms$/){
      $msgType = $MSG_TYPE_SMS;
    }elsif($arg =~ /^(-n|-s|--dry-run|--simulate)$/){
      $$opts{dryRun} = 1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  my $myNum = `cat $MY_NUMBER_FILE`;
  chomp $myNum;
  $myNum = cleanNumber($myNum);
  if($mode =~ /^($MODE_HAR|$MODE_INDEXEDDB|$MODE_ANDROID)$/){
    if($myNum !~ /^\d{10}$/){
      die "ERROR: could not parse $MY_NUMBER_FILE\n";
    }
  }
  my $androidAttFilesDir;

  if(not defined $backupFile and defined $backupIndex){
    if($mode eq $MODE_HAR){
      run $REORGANIZE_CMD_HAR;
      $backupFile = getBackupFile($backupIndex, $BACKUP_DIR_HAR, "*.har");
    }elsif($mode eq $MODE_INDEXEDDB){
      my @downloadFiles = grep {-f $_} glob "$DOWNLOADS_DIR/indexeddb*.json";
      if(@downloadFiles > 0){
        run $REORGANIZE_CMD_INDEXEDDB;
      }
      $backupFile = getBackupFile($backupIndex, $BACKUP_DIR_INDEXEDDB, "indexeddb*.json");
    }elsif($mode eq $MODE_ANDROID){
      $backupFile = getBackupFile($backupIndex, "$BACKUP_DIR_ANDROID/db", "*messages_repository.sqlite");
    }
  }
  if($mode =~ /^($MODE_HAR|$MODE_INDEXEDDB|$MODE_ANDROID)$/){
    die "$USAGE\nERROR: no BACKUP_FILE given\n" if not defined $backupFile;
  }

  if($mode eq $MODE_ANDROID){
    if($backupFile =~ /(?:^|\/)(\d\d\d\d-\d\d-\d\d_\d\d\d\d\d\d_\d+)_messages_repository\.sqlite$/){
      my $backupName = $1;
      my @dirs = grep {-d $_} glob "$BACKUP_DIR_ANDROID/att-files/*$backupName*";
      $androidAttFilesDir = @dirs > 0 ? $dirs[0] : undef;
    }
    if(not defined $androidAttFilesDir){
      die "ERROR: no android att-files dir found for $backupFile\n";
    }
  }

  if($mode eq $MODE_REORGANIZE){
    run $REORGANIZE_CMD_HAR;
    run $REORGANIZE_CMD_INDEXEDDB;
    my @har       = map {s/.*\///; $_} grep {-f $_} glob "$BACKUP_DIR_HAR/*.har";
    my @indexedDB = map {s/.*\///; $_} grep {-f $_} glob "$BACKUP_DIR_INDEXEDDB/indexeddb*.json";
    print "\n\n";
    print "latest har:       $har[-1]\n";
    print "latest indexeddb: $indexedDB[-1]\n";
  }elsif($mode eq $MODE_INDEXEDDB and $msgType eq $MSG_TYPE_MMS){
    my @messages = parseIndexedDB($backupFile);
    my @mms = grep {$$_{type} eq "mms"} @messages;
    for my $mms(@mms){
      handleMMS($opts, $myNum, "msgID=$$mms{msgID} in $backupFile", $mms);
    }

    my $wrote = $$opts{dryRun} ? "DRY-RUN-DID-NOT-WRITE" : "WROTE";
    print "\n\n$wrote " . (0+@mms) . " MMS MESSAGES\n";
    print $INSTRUCTIONS;
  }elsif($mode eq $MODE_INDEXEDDB and $msgType eq $MSG_TYPE_SMS){
    my @messages = parseIndexedDB($backupFile);
    my @sms;
    for my $msg(@messages){
      next if $$msg{type} ne "sms";
      my $body = formatSMSBodyForCSV($$msg{body});

      push @sms, {
        date     => $$msg{dtmMillis},
        dateSent => $$msg{dtmMillis},
        dir      => $$msg{dir},
        from     => $$msg{from},
        to       => ${$$msg{toNums}}[0],
        body     => $body,
      };
    }
    handleSMS($opts, @sms);
  }elsif($mode eq $MODE_HAR and $msgType eq $MSG_TYPE_SMS){
    my $outDir = extractHarFile($backupFile);
    my @smsFiles = sort grep {/^(.*\/)?search(\.\d+)?$/} `find $outDir -name 'search*' -type f`;
    chomp $_ foreach @smsFiles;
    my @sms;
    for my $smsFile(@smsFiles){
      @sms = (@sms, parseSMSFile($smsFile));
    }

    handleSMS($opts, @sms);
  }elsif($mode eq $MODE_HAR and $msgType eq $MSG_TYPE_MMS){
    my $outDir = extractHarFile($backupFile);
    my @mmsFiles = sort `find $outDir -iregex '.*/objects/.*' -type f`;
    chomp $_ foreach @mmsFiles;
    system "dos2unix $_ 2>/dev/null" foreach @mmsFiles;

    for my $file(@mmsFiles){
      my $mms = parseMMSFile($file);
      handleMMS($opts, $myNum, "mms file: $file", $mms);
    }

    my $wrote = $$opts{dryRun} ? "DRY-RUN-DID-NOT-WRITE" : "WROTE";
    print "\n\n$wrote " . (0+@mmsFiles) . " MMS MESSAGES\n";
    print $INSTRUCTIONS;
  }elsif($mode eq $MODE_ANDROID and $msgType eq $MSG_TYPE_MMS){
    my @messages = parseAndroid($backupFile, $androidAttFilesDir, $myNum);
    my @mms = grep {$$_{type} eq "mms"} @messages;
    for my $mms(@mms){
      handleMMS($opts, $myNum, "msgID=$$mms{msgID} in $backupFile", $mms);
    }

    my $wrote = $$opts{dryRun} ? "DRY-RUN-DID-NOT-WRITE" : "WROTE";
    print "\n\n$wrote " . (0+@mms) . " MMS MESSAGES\n";
    print $INSTRUCTIONS;
  }elsif($mode eq $MODE_ANDROID and $msgType eq $MSG_TYPE_SMS){
    my @messages = parseAndroid($backupFile, $androidAttFilesDir, $myNum);
    my @sms;
    for my $msg(@messages){
      next if $$msg{type} ne "sms";
      my $body = formatSMSBodyForCSV($$msg{body});

      push @sms, {
        date     => $$msg{dtmMillis},
        dateSent => $$msg{dtmMillis},
        dir      => $$msg{dir},
        from     => $$msg{from},
        to       => ${$$msg{toNums}}[0],
        body     => $body,
      };
    }
    handleSMS($opts, @sms);
  }else{
    die "ERROR: unknown mode/msgType $mode/$msgType\n";
  }
}

sub handleSMS($@){
  my ($opts, @sms) = @_;
  #ignore empty SMS
  @sms = grep {$$_{body} ne '""'} @sms;

  for my $smsMsg(@sms){
    my $dateMillis = $$smsMsg{date} + $$opts{offsetMillis};
    my $dateSentMillis = $$smsMsg{dateSent} + $$opts{offsetMillis};
    my $dateS = int($dateMillis / 1000.0 + 0.5);
    my $dateFmt = `date --date=\@$dateS '+%Y-%m-%d %H:%M:%S'`;
    chomp $dateFmt;

    $$smsMsg{date} = $dateMillis;
    $$smsMsg{dateSent} = $dateSentMillis;
    $$smsMsg{dateFmt} = $dateFmt;
  }

  print "\n\n\n";
  my $smsCsvFile = "/tmp/tmobile-digits-sms-" . nowMillis() . ".sms";
  open FH, "> $smsCsvFile" or die "ERROR: could not write $smsCsvFile\n$!\n";
  for my $sms(@sms){
    my $fmt = formatSMS($sms);
    print FH $fmt;
  }
  close FH;
  my $count = @sms;
  print "\nwrote $count SMS to $smsCsvFile\n";
  print "\n\n\n";
  run $ADD_COMM_TO_REPO_CMD,
    "--sms", $smsCsvFile,
    ($$opts{dryRun} ? ("--dry-run") : ()),
    "--allow-old",
    "--dupe=fuzzy",
    "--fuzzy-whitespace-dupes",
    "--fuzzy-dupe-millis=" . 4 * 60 * 60 * 1000, #4 hours
    "--verbose",
  ;
}

sub handleMMS($$$$){
  my ($opts, $myNum, $srcDescription, $mms) = @_;
  my $msgDateMillis = $$mms{dtmMillis} + $$opts{offsetMillis};

  if(not defined $$mms{dir}){
    $$mms{dir} = $$mms{from} eq $myNum ? "OUT" : "INC";
  }
  my $dir = $$mms{dir};

  my @toNums = @{$$mms{toNums}};

  if($dir eq "OUT" and $$mms{from} ne $myNum){
    die "ERROR: outgoing MMS from another number in\n$srcDescription\n";
  }elsif($dir eq "INC" and $toNums[0] ne $myNum){
    #MMS sent to other person and 'forwarded' to me
  }

  my @otherNums = $dir eq "OUT" ? @toNums : ($$mms{from});
  @otherNums = grep {$_ ne $myNum} @otherNums;
  @otherNums = grep {$_ =~ /^\d{10}$/} @otherNums;
  my $otherNumFmt = join "-", @otherNums;

  if(@otherNums == 0){
    print "\n\n\n\n\n\n";
    print "WARNING: could not parse MMS phone number in:\n$srcDescription\n";
    next;
  }

  my $nowMillis = nowMillis();
  my $counter = "00000";
  my $mmsPartsDir;
  do{
    $mmsPartsDir = "$MMS_PARTS_REPO/msg-${msgDateMillis}-$counter";
    $counter++;
  }while(-e $mmsPartsDir);

  run "mkdir", "-p", $mmsPartsDir unless $$opts{dryRun};

  my @attFileList;
  for my $att(@{$$mms{atts}}){
    my $attFile = "$mmsPartsDir/$$att{attName}";
    push @attFileList, $attFile;
    if(not $$opts{dryRun}){
      open FH, "> $attFile" or die "ERROR: could not write $attFile\n$!\n";
      print FH $$att{attContents};
      close FH;
    }
  }
  if(defined $$mms{body} and length $$mms{body} > 0){
    my $textAttFile = "$mmsPartsDir/$$mms{textAttName}";
    push @attFileList, $textAttFile;
    if(not $$opts{dryRun}){
      open FH, "> $textAttFile" or die "ERROR: could not write $textAttFile\n$!\n";
      print FH $$mms{body};
      close FH;
    }
  }
  my $body = $$mms{body};
  $body = "" if not defined $body;

  my $subject = $$mms{subject};

  my $subjectFmt = escapeStr($subject);
  my $bodyFmt = escapeStr($body);

  $bodyFmt = replaceMIMEUnicodeChars($bodyFmt);

  my $checksum;
  if($$opts{dryRun}){
    $checksum = '0'x32;
  }else{
    open CMD, "-|", $SMS_DB_IMPORTER, "mms-hash", $subject, $body, @attFileList;
    $checksum = join '', <CMD>;
    close CMD;
    chomp $checksum;
  }

  if($checksum !~ /^[0-9a-f]{32}$/){
    die "ERROR: invalid MMS hash from $SMS_DB_IMPORTER in:\n$srcDescription\n";
  }

  my $mmsRepoDir = "$MMS_REPO/${msgDateMillis}_${otherNumFmt}_${dir}_${checksum}";
  run "mkdir", "-p", $mmsRepoDir unless $$opts{dryRun};

  for my $attFile(@attFileList){
    run "cp", "-a", $attFile, "$mmsRepoDir/" unless $$opts{dryRun};
  }

  my $info = ""
    . "from=$$mms{from}\n"
    . join("", map {"to=$_\n"} @toNums)
    . "dir=$dir\n"
    . "date=$msgDateMillis\n"
    . "date_sent=$msgDateMillis\n"
    . "subject=\"$subjectFmt\"\n"
    . "body=\"$bodyFmt\"\n"
    ;
  for my $attFile(@attFileList){
    my $att = $attFile;
    $att =~ s/^.*\///;
    $info .= "att=$att\n";
  }
  $info .= "checksum=$checksum\n";

  my $infoFile = "$mmsRepoDir/info";
  if(not $$opts{dryRun}){
    open FH, "> $infoFile" or die "ERROR: could not write $infoFile\n$!\n";
    print FH $info;
    close FH;
  }
}

sub extractHarFile($){
  my ($harFile) = @_;
  if(not -x $HAR_EXTRACTOR){
    run "pip", "install", "har-extractor";
  }
  if(not -x $HAR_EXTRACTOR){
    die "ERROR: could not find $HAR_EXTRACTOR\n";
  }

  my $nowMillis = nowMillis();
  my $outDir = "/tmp/tmobile-digits-har-$nowMillis/";

  run $HAR_EXTRACTOR, $harFile, "-o", $outDir;

  return $outDir;
}

sub getBackupFile($$$){
  my ($index, $backupDir, $globPattern) = @_;

  my @backupFiles = grep {-f $_} glob "$backupDir/$globPattern";
  if(@backupFiles == 0){
    die "ERROR: no BACKUP_FILEs match $backupDir/$globPattern\n";
  }
  my %mtimes = map {$_ => mtime $_} @backupFiles;

  @backupFiles = sort {$mtimes{$b} <=> $mtimes{$a}} @backupFiles;

  my $backupFile = $backupFiles[$index];
  if(not defined $backupFile or not -f $backupFile){
    die "ERROR: BACKUP_INDEX=$index not found in $backupDir\n";
  }
  return $backupFile;
}

sub cleanNumber($){
  my ($number) = @_;
  $number = "" if not defined $number;
  $number = $1 if $number =~ /^sip:([+0-9]+)@.*$/;
  $number =~ s/[^+0-9]//g;
  $number = $1 if $number =~ /^\+?1(\d{10})$/;
  return $number
}
sub escapeStr($){
  my ($str) = @_;
  $str =~ s/&/&amp;/g;
  $str =~ s/\\/&backslash;/g;
  $str =~ s/\n/\\n/g;
  $str =~ s/\r/\\r/g;
  $str =~ s/"/\\"/g;
  $str =~ s/&backslash;/\\\\/g;
  $str =~ s/&amp;/&/g;
  return $str;
}

sub parseIndexedDB($){
  my ($dbFile) = @_;
  my $json = `cat $dbFile`;
  my @jsonChannelEntriesData = eval {
    my $obj = decode_json($json);
    my $db = ${$obj}[0];
    my $channel_entries = ${$$db{stores}}[0];
    if($$channel_entries{name} ne "channel_entries"){
      die "first store is not channel_entries";
    }
    return @{$$channel_entries{data}};
  };
  die "ERROR: failed to parse $dbFile\n$@" if @jsonChannelEntriesData == 0;

  my %keyVals;
  my @keyOrder;
  for my $dataPair(@jsonChannelEntriesData){
    my $key = $$dataPair{key};
    my $val = $$dataPair{value};
    if(not defined $key or not defined $val){
      die "ERROR: malformed channel entry data pair in $dbFile\n"
    }
    if(defined $keyVals{$key}){
      die "ERROR: duplicate key $key in $dbFile\n";
    }
    $keyVals{$key} = $val;
    push @keyOrder, $key;
  }

  my @messages;
  for my $key(@keyOrder){
    my $val = $keyVals{$key};
    my $msg = {
      type        => undef,  #'sms' or 'mms' or 'call'
      from        => undef,
      toNums      => [],
      dir         => undef,
      dtm         => undef,
      body        => undef,
      subject     => "NoSubject",
      textAttName => "text",
      atts        => [],
      msgID       => undef,
      callDur     => undef,
    };

    $$msg{from} = cleanNumber($$val{sender});
    for my $to(@{$$val{toArr}}){
      push @{$$msg{toNums}}, cleanNumber($to);
    }

    my $msgID = $$val{entry}{imdnMessageID};
    $$msg{msgID} = $msgID;

    my $entryType = $$val{entry}{entryType};
    my $contentType = $$val{entry}{contentType};
    if($entryType =~ /^(message)$/ and $contentType =~ /^text\/plain$/){
      $$msg{type} = "sms";
    }elsif($entryType =~ /^(message|file)$/ and $contentType =~ /(Message\/CPIM|multipart)/){
      $$msg{type} = "mms";
    }elsif($entryType =~ /^(callLog)/){
      $$msg{type} = "call";
    }else{
      die "ERROR: unknown content/entry type for $msgID\n";
    }

    if($$msg{type} eq "sms" and @{$$msg{toNums}} > 1){
      #treat any sms-looking messages with multiple recipients as mms
      #  outbound text-only MMS sent from digits has contentType='text/plain'
      $$msg{type} = "mms";
    }

    $$msg{dir} = $$val{direction};
    if($$val{direction} =~ /^(in)$/){
      $$msg{dir} = "INC";
    }elsif($$val{direction} =~ /^(out)$/){
      $$msg{dir} = "OUT";
    }else{
      die "ERROR: invalid direction $$val{direction} for $msgID\n";
    }

    my $millis = $$val{date};
    my $epoch = int($millis / 1000 + 0.5);
    my $dtmFmt = `date --date='\@$epoch' '+%Y%m%d_%H%M%S'`;
    chomp $dtmFmt;

    $$msg{dtmMillis} = $millis;
    $$msg{dtmFmt} = $dtmFmt;
    $$msg{dtmEpoch} = $epoch;

    $$msg{body} = $$val{entry}{textcontent};

    $$msg{callDur} = $$val{entry}{callDuration};

    my $manualFileAttDir = "$BACKUP_DIR_INDEXEDDB/manual-file-attachment-blobs/$key";
    my @manualFileAtts = grep {-f $_} glob "$manualFileAttDir/*";

    my @files;
    if(@manualFileAtts > 0){
      for my $file(@manualFileAtts){
        my $filename = basename $file;
        my $base64File = `base64 -w 0 "$file"`;
        chomp $base64File;
        push @files, {
          filename => $filename,
          base64File => $base64File,
        };
      }
    }

    if(defined $$val{data}){
      push @files, $$val{data};
    }
    if(defined $$val{multiPartData}){
      @files = (@files, @{$$val{multiPartData}});
    }
    if(defined $$val{entry}){
      my $entry = $$val{entry};
      if(defined $$entry{data}){
        push @files, $$entry{data};
      }
      if(defined $$entry{multiPartData}){
        @files = (@files, @{$$entry{multiPartData}});
      }
    }

    my $seenFiles = {};
    for my $file(@files){
      my $fileName = $$file{filename};
      my $fileContents = $$file{base64File};
      next if not defined $fileName or not defined $fileContents;
      if(defined $$seenFiles{$fileName}){
        if($fileContents eq $$seenFiles{$fileName}){
          next;
        }else{
          die "ERROR: different files with the same name in one message\n";
        }
      }
      $$seenFiles{$fileName} = $fileContents;

      my $att = {
        attName     => $fileName,
        attContents => decodeBase64($fileContents),
      };
      push @{$$msg{atts}}, $att;
    }

    push @messages, $msg;
  }

  return @messages;
}

sub parseAndroid($$$){
  my ($dbFile, $attFilesDir, $myNum) = @_;
  my @messages;
  my $json = `sqlite3 \"$dbFile\" -json \"select * from common\"`;
  my @messageObjList = @{decode_json $json};
  for my $msgObj(@messageObjList){
    my $msg = {
      type        => undef,  #'sms' or 'mms' or 'call'
      from        => undef,
      toNums      => [],
      dir         => undef,
      dtm         => undef,
      body        => undef,
      subject     => undef,
      textAttName => "text",
      atts        => [],
      msgID       => undef,
      callDur     => undef,
    };

    $$msg{body} = $$msgObj{message_body};
    $$msg{subject} = $$msgObj{message_subject};
    $$msg{subject} = "NoSubject" if $$msg{subject} eq "";
    $$msg{msgID} = $$msgObj{_id};

    my $epoch = $$msgObj{message_time};
    my $dtmFmt = `date --date='\@$epoch' '+%Y%m%d_%H%M%S'`;
    chomp $dtmFmt;

    $$msg{dtmMillis} = "${epoch}000";
    $$msg{dtmFmt} = $dtmFmt;
    $$msg{dtmEpoch} = $epoch;

    my @nums;
    @nums = (@nums, split(/[ ,\$]/, $$msgObj{correspondent_phone_number}));
    @nums = (@nums, split(/[ ,\$]/, $$msgObj{conversation_id}));
    my $h4 = '[0-9a-f]{4}';
    @nums = grep {$_ !~ /^$h4.*$h4.*$h4$/} @nums;
    @nums = map {cleanNumber $_} @nums;
    @nums = grep {$_ !~ /$myNum/} @nums;

    my @uniqNums;
    my %okNums;
    for my $num(@nums){
      push @uniqNums, $num if not defined $okNums{$num};
      $okNums{$num} = 1;
    }
    @nums = @uniqNums;
    if(@nums == 0){
      die "ERROR: could not find a number for msg $$msgObj{_id}\n";
    }

    if($$msgObj{message_type} == 1){
      $$msg{dir} = "OUT";
    }elsif($$msgObj{message_type} == 2){
      $$msg{dir} = "INC";
    }else{
      die "ERROR: unknown message_type=$$msgObj{message_type}\n";
    }

    if($$msg{dir} eq "OUT"){
      $$msg{from} = $myNum;
      $$msg{toNums} = [@nums];
    }
    if($$msg{dir} eq "INC"){
      my $fromGuess = $$msgObj{correspondent_number};
      if(defined $fromGuess and $fromGuess =~ /^$h4.*$h4.*$h4$/){
        $fromGuess = undef;
      }else{
        $fromGuess = cleanNumber $fromGuess;
      }

      my $from;
      if($fromGuess =~ /\d{10}/){
        my @fromGuesses = grep {$_ =~ /$fromGuess/} @nums;
        $from = @fromGuesses > 0 ? $fromGuesses[0] : undef;
      }
      $from = $nums[0] if not defined $from;

      my @to = grep {$_ !~ /^$from$/} @nums;
      @to = ($myNum, @to);

      $$msg{from} = $from;
      $$msg{toNums} = [@to];
    }

    my @otherNums = grep {$_ !~ /$myNum/} ($$msg{from}, @{$$msg{toNums}});

    my $attFile = $$msgObj{file_uri};
    my $attName = $$msgObj{file_name};
    if(length $attFile > 0){
      $attFile =~ s/^.*\/com\.tmobile\.digits\/files\/DIGITS\/.Media\//$attFilesDir\//;
      if(not -f $attFile){
        die "ERROR: could not find file $attFile\n";
      }
      my $attContents = `cat \"$attFile\"`;
      push @{$$msg{atts}}, {
        attName     => $attName,
        attContents => $attContents,
      };
    }

    if(@{$$msg{atts}} > 0 or @otherNums > 1){
      $$msg{type} = "mms";
    }else{
      $$msg{type} = "sms";
    }

    push @messages, $msg;
  }

  return @messages;
}

sub parseMMSFile($){
  my ($mmsFile) = @_;
  my @lines = `cat "$mmsFile"`;

  my $mms = {
    from        => undef,
    toNums      => [],
    dtm         => undef,
    body        => undef,
    subject     => "NoSubject",
    textAttName => "text",
    atts        => [],
  };

  my @parts;
  my $curPart = undef;
  for my $line(@lines){
    if($line =~ /^--/){
      $curPart = [];
      push @parts, $curPart;
    }elsif(not defined $curPart){
      if($line =~ /^From:\s*(.+)$/){
        $$mms{from} = cleanNumber($1);
      }elsif($line =~ /^To:\s*(.+)$/){
        push @{$$mms{toNums}}, cleanNumber($1);
      }elsif($line =~ /^DateTime:\s*(.+)$/){
        $$mms{dtm} = $1;
      }
    }else{
      push @$curPart, $line;
    }
  }

  for my $part(@parts){
    my $text = join "", @$part;
    next if $text eq "";
    if($text =~ /^(.*?)\n\n(.*)$/s){
      my ($partHdr, $partBody) = ($1, $2);
      if($partHdr =~ /base64/i){
        $partBody = decodeBase64($partBody);
      }
      if($partHdr =~ /text/i){
        die "ERROR: duplicate text parts for $mmsFile\n" if defined $$mms{body};
        $$mms{body} = $partBody;
        if($partHdr =~ /Content-Location:(.+)/){
          $$mms{textAttName} = $1;
        }
      }else{
        my $attName = undef;
        if($partHdr =~ /Content-Location:(.+)/){
          $attName = $1;
        }elsif($partHdr =~ /Content-Type:\S*;Name="([^"]+)"/){
          $attName = $1;
        }
        my $att = {
          attName     => $attName,
          attContents => $partBody,
        };
        push @{$$mms{atts}}, $att;
      }
    }else{
      die "ERROR: malformed MMS part:$text\nin mms file:\n$mmsFile\n";
    }
  }

  my $dtmFmt = `date --date='$$mms{dtm}' '+%Y%m%d_%H%M%S'`;
  chomp $dtmFmt;
  my $epoch = `date --date='$$mms{dtm}' +%s`;
  chomp $epoch;

  $$mms{dtmFmt} = $dtmFmt;
  $$mms{dtmEpoch} = $epoch;
  $$mms{dtmMillis} = "${epoch}000";

  for my $att(@{$$mms{atts}}){
    if(not defined $$att{attName}){
      die "ERROR: missing file name for att part in mms file\n$mmsFile\n";
    }
    if(not defined $$att{attContents}){
      die "ERROR: could not parse file contents for att $$att{attName} in mms file\n$mmsFile\n";
    }
  }

  return $mms;
}

sub parseSMSFile($){
  my ($smsFile) = @_;
  my $json = `cat '$smsFile'`;
  my @objects;
  try{
    my $mainObj = decode_json($json);
    @objects = @{$$mainObj{objectList}{object}};
  }catch{
    warn "\n\nWARNING: could not parse SMS JSON file $smsFile\n$_\n";
    return undef;
  };
  my @smsMsgs;
  for my $obj(@objects){
    try{
      my $attList = $$obj{attributes}{attribute};
      my $smsAtts = {};
      for my $att(@$attList){
        my $name = $$att{name};
        my $values = $$att{value};
        my $value = @$values == 1 ? $$values[0] : undef;
        die "ERROR: dupe att $name\n" if defined $$smsAtts{$name};
        $$smsAtts{$name} = $value;
      }
      my $dateMillis = `date --date="$$smsAtts{date}" +%s%3N`;
      chomp $dateMillis;
      die "ERROR: could not parse date $$smsAtts{date}\n" if $dateMillis !~ /^\d+$/;

      my $dir;
      if($$smsAtts{Direction} =~ /^In$/i){
        $dir = "INC";
      }elsif($$smsAtts{Direction} =~ /^Out$/i){
        $dir = "OUT";
      }else{
        die "ERROR: invalid Direction $$smsAtts{Direction}\n";
      }
      my $body = $$smsAtts{textcontent};

      $body = formatSMSBodyForCSV($body);

      my $smsMsg = {
        date     => $dateMillis,
        dateSent => $dateMillis,
        dir      => $dir,
        from     => cleanNumber($$smsAtts{from}),
        to       => cleanNumber($$smsAtts{to}),
        body     => $body,
      };

      push @smsMsgs, $smsMsg;
    }catch{
      my $failedSMS = encode_json($obj);
      warn "\n\nWARNING: could not parse SMS in $smsFile\n$failedSMS\n$_\n";
      return undef;
    };
  }

  return @smsMsgs;
}

sub formatSMSBodyForCSV($){
  my ($body) = @_;

  #null-check
  $body = "" if not defined $body;

  #remove trailing whitespace
  $body =~ s/\s+$//g;

  #escape for double-quoted CSV col
  $body =~ s/\\/\\\\/g;
  $body =~ s/\n/\\n/g;
  $body =~ s/"/\\"/g;

  #wrap in ""
  $body = "\"$body\"";

  return $body;
}

sub formatSMS($){
  my ($smsMsg) = @_;
  my $fmt = "";
  if($$smsMsg{dir} eq "INC"){
    $fmt .= $$smsMsg{from};
  }elsif($$smsMsg{dir} eq "OUT"){
    $fmt .= $$smsMsg{to};
  }else{
    die "ERROR: invalid direction $$smsMsg{dir}\n";
  }

  $fmt .= ",$$smsMsg{date}";
  $fmt .= ",$$smsMsg{dateSent}";
  $fmt .= ",S";
  $fmt .= ",$$smsMsg{dir}";
  $fmt .= ",$$smsMsg{dateFmt}";
  $fmt .= ",$$smsMsg{body}";
  $fmt .= "\n";
  return $fmt;
}

sub decodeBase64($){
  my ($str) = @_;
  my $nowMillis = nowMillis();
  my $tmpFile = "/tmp/tmobile-digits-base64-$nowMillis";
  open FH, "> $tmpFile" or die "ERROR: could not write $tmpFile\n$!\n";
  print FH $str;
  close FH;
  system "dos2unix", "-q", $tmpFile;

  my $out = `base64 -d $tmpFile`;
  if($? != 0){
    die "ERROR: base64 decode failed for:\n$str\n";
  }

  return $out;
}

sub replaceMIMEUnicodeChars($){
  my ($str) = @_;
  my $byte = '[0-9a-f][0-9a-f]';
  while($str =~ /(=$byte=$byte=$byte=$byte)/i){
    my $mimeCode = $1;
    my $char = decode("MIME-Header", "=?UTF-8?Q?$mimeCode?=");
    utf8::encode($char);
    $str =~ s/$mimeCode/$char/;
  }
  return $str;
}

sub mtime($){
  my @stat = stat $_[0];
  return $stat[9];
}

sub run(@){
  print "@_\n";
  system @_;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

&main(@ARGV);
