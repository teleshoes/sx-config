#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my @sshOpts = map {("-o", $_)} (
  "LogLevel=ERROR",
  "NoHostAuthenticationForLocalhost=yes",
  "UserKnownHostsFile=/dev/null",
  "StrictHostKeyChecking=no",
);

my $user = "nemo";

my $maxTimeout = 30;
my $secretsFile = "$ENV{HOME}/.secrets";
my @configKeys = ("revtun.portfile");
my $remoteUser = "wolke";
my $remoteHost = "wolke-nuc";

my $backupDir = "~/backup-sx";

my $dcimDir = "/media/sdcard/phone/Pictures/Camera";
my $mmsPartsDir = "/home/$user/.local/share/commhistory/data";
my %sqliteDbs = (
  commhistory => "/home/$user/.local/share/commhistory/commhistory.db",
  contacts => "/home/$user/.local/share/system/Contacts/qtcontacts-sqlite/contacts.db",
);

my $lastSuccessFile = "/home/$user/.cache/backup-last-success";

sub ensureConnection($);
sub getLocalPort($);
sub getDCIMSummary();
sub createNotification();
sub notificationMsg($$);
sub removeNotification($);
sub sshCmd($@);
sub rsyncCmd($$$);
sub readSecrets();
sub run(@);
sub tryRun(@);
sub readProc(@);
sub tryReadProc(@);
sub tryReadProcQuiet(@);
sub nowHrMin();
sub nowYMD_HMS_MILLIS();
sub fail($);

sub main(@){
  run "date";
  run "bat";

  sleep 3;

  system "execPing";

  my $id = createNotification();

  ######
  notificationMsg $id, sprintf "BAK-CNXN: %s", nowHrMin();
  my $config = readSecrets();
  run "screen-cmd", "-q", "revtun", "-r", "--unsafe", "--local";
  run "screen-cmd", "revtun", "-r", "--unsafe", "--local";
  ensureConnection($config);
  run sshCmd($config, "mkdir", "-p", $backupDir);
  ######

  ######
  notificationMsg $id, sprintf "BAK-CELLID: %s", nowHrMin();
  my $opencellidFile = sprintf "/tmp/opencellid-geo-%s", nowYMD_HMS_MILLIS();
  system "opencellid-geo >$opencellidFile 2>&1";
  run rsyncCmd($config, $opencellidFile, "$backupDir/opencellid-geo/");
  ######

  ######
  notificationMsg $id, sprintf "BAK-DCIM: %s %s", getDCIMSummary(), nowHrMin();
  run rsyncCmd($config, "$dcimDir/", "$backupDir/DCIM"),
    "--exclude=/*/";
  ######

  ######
  notificationMsg $id, sprintf "BAK-DBS: %s", nowHrMin();
  my $sqliteDbsDestDir = "/tmp/backup-sqlite-dbs";
  run "rm", "-rf", $sqliteDbsDestDir;
  run "mkdir", "-p", $sqliteDbsDestDir;
  for my $dbName(sort keys %sqliteDbs){
    my $destGzipFile = "$sqliteDbsDestDir/$dbName.gz";
    run "backup-sqlite-db", $sqliteDbs{$dbName}, $destGzipFile;
  }
  run rsyncCmd($config, "$sqliteDbsDestDir/", $backupDir);
  ######

  ######
  notificationMsg $id, sprintf "BAK-MMS: %s", nowHrMin();
  run rsyncCmd($config, "$mmsPartsDir/", "$backupDir/mms-parts-dir/");
  ######

  ######
  notificationMsg $id, sprintf "%28s", "b\@" . nowHrMin();
  run "screen-cmd", "-q", "revtun", "--unsafe", "--local";
  system "echo " . nowHrMin() . " > $lastSuccessFile";
  ######

  ######
  notificationMsg $id, sprintf "BAK-GPS: %s", nowHrMin();
  my $gpsconFile = sprintf "/tmp/gpscon-%s", nowYMD_HMS_MILLIS();
  system "gpscon runs=1 dumps=2 tout=60 >$gpsconFile 2>&1";
  run rsyncCmd($config, $gpsconFile, "$backupDir/gpscon/");
  ######

  removeNotification $id;

  run "date";
  run "bat";
}

sub ensureConnection($){
  my $config = shift;
  my $host = "";
  my $start = time;
  $| = 1; #autoflush
  print "trying to connect to $remoteHost\n";
  while(time - $start < $maxTimeout){
    print ".";
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProcQuiet "@hostnameCmd 2>/dev/null";
    last if $? == 0;
    sleep 1;
  }
  print "\n";
  if($host ne $remoteHost){
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProc @hostnameCmd;
  }
  fail "Failed to connect to $remoteHost\n" if $host ne $remoteHost;
  print "connected!\n";
}

sub getLocalPort($){
  my $config = shift;
  my $file = $$config{'revtun.portfile'};
  fail "missing revtun.portfile: $file\n" if not -f $file;
  my $port = `cat $file`;
  chomp $port;
  fail "malformed port: $port\n" if $port !~ /^\d+$/;
  return $port;
}

sub getDCIMSummary(){
  my $dcimSizeMiB;
  my $dcimDu = `du -bc $dcimDir/*.* 2>/dev/null | tail -1`;
  if($dcimDu =~ /^(\d+)\s*total$/){
    $dcimSizeMiB = int($1/1024/1024 + 0.5);
  }else{
    $dcimSizeMiB = "???";
  }

  my $dcimCount = `ls $dcimDir/*.* 2>/dev/null | wc -l`;
  chomp $dcimCount;
  $dcimCount = "???" unless $dcimCount =~ /^\d+$/;

  return sprintf "%03dM %03df", $dcimSizeMiB, $dcimCount;
}

sub createNotification(){
  my $out = `notificationtool -A backup -o add`;
  if($out =~ /^Created notification with id (\d+)$/){
    return $1;
  }else{
    print STDERR "could not get notification ID\n";
    return 28758; #chosen by fair dice roll, guaranteed random
  }
}
sub notificationMsg($$){
  my ($id, $msg) = @_;
  system "notificationtool", "-A", "backup", "-o", "update", "-i", $id, $msg;
}
sub removeNotification($){
  my ($id) = @_;
  system "notificationtool", "-o", "remove", "-i", $id;
}

sub sshCmd($@){
  my ($config, @cmd) = @_;
  my $port = getLocalPort $config;
  return ("ssh", "$remoteUser\@localhost",
      "-p", $port,
      @sshOpts,
      @cmd);
}

sub rsyncCmd($$$){
  my ($config, $src, $dest) = @_;
  my $port = getLocalPort $config;
  return ("rsync",
    "-e", "ssh -p $port @sshOpts",
    "-avP", $src, "$remoteUser\@localhost:$dest");
}


sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @configKeys;
  for my $line(@lines){
    if($line =~ /^($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @configKeys){
    fail "Missing config '$key' in $secretsFile\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

sub run(@){
  tryRun @_;
  fail "Error running @_\n" if $? != 0;
}

sub tryRun(@){
  print "@_\n";
  system @_;
}

sub readProc(@){
  my $out = tryReadProc @_;
  fail "Error running @_\n" if $? != 0;
  return $out;
}

sub tryReadProc(@){
  print "@_\n";
  tryReadProcQuiet @_;
}
sub tryReadProcQuiet(@){
  open PROC, "-|", @_;
  my @lines = <PROC>;
  close PROC;

  my $out = join '', @lines;
  chomp $out if @lines == 1;
  return $out;
}
sub nowHrMin(){
  my $hrMin = `date +%H:%M`;
  chomp $hrMin;
  return $hrMin;
}
sub nowYMD_HMS_MILLIS(){
  my $nowMillis = int(time * 1000.0);
  my $nowSex = int($nowMillis / 1000.0);

  my $dateFmt = `date --date \@$nowSex +%Y%m%d_%H%M%S_$nowMillis`;
  chomp $dateFmt;
  return $dateFmt;
}

sub fail($){
  my ($msg) = @_;
  chomp $msg;

  my $lastSuccess = `cat $lastSuccessFile 2>/dev/null`;
  my $now = nowHrMin;
  my $id = createNotification();
  notificationMsg $id, sprintf "BACKUP FAILED %s (%s)", $now, $lastSuccess;

  die "$msg\n";
}

&main(@ARGV);
