#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my @SSH_OPTS = map {("-o", $_)} (
  "LogLevel=ERROR",
  "NoHostAuthenticationForLocalhost=yes",
  "UserKnownHostsFile=/dev/null",
  "StrictHostKeyChecking=no",
);

my $USER = "nemo";

my $MAX_TIMEOUT = 30;
my $SECRETS_FILE = "$ENV{HOME}/.secrets";
my @CONFIG_KEYS = ("revtun.portfile");
my $REMOTE_USER = "wolke";
my $REMOTE_HOST = "wolke-nuc";

my $BACKUP_DIR = "~/backup-sx";

my $dcimDirs = {
  int => "/home/$USER/Pictures",
  sd  => "/media/sdcard/phone/Pictures",
};
my $mmsPartsDir = "/home/$USER/.local/share/commhistory/data";
my %sqliteDbs = (
  commhistory => "/home/$USER/.local/share/commhistory/commhistory.db",
  contacts => "/home/$USER/.local/share/system/privileged/Contacts/qtcontacts-sqlite/contacts.db",
);

my $notificationIdsCache = "/home/$USER/.cache/backup-remote-notificationIds";
my $lastSuccessFile = "/home/$USER/.cache/backup-last-success";

sub ensureConnection($);
sub getLocalPort($);
sub getDCIMSummary($);
sub createNotification();
sub notificationMsg($$);
sub removeNotification($);
sub sshCmd($@);
sub rsyncCmd($$$);
sub readSecrets();
sub run(@);
sub tryRun(@);
sub readProc(@);
sub tryReadProc(@);
sub tryReadProcQuiet(@);
sub nowHrMin();
sub nowYMD_HMS_MILLIS();
sub fail($);
sub appendNotificationIdCache($);
sub clearAllNotifications();

sub main(@){
  run "date";
  run "bat";

  sleep 3;

  system "execPing";

  my $id = createNotification();
  appendNotificationIdCache($id);

  ######
  notificationMsg $id, sprintf "BAK-CNXN: %s", nowHrMin();
  my $config = readSecrets();
  run "screen-cmd", "-q", "revtun", "-r", "--unsafe", "--local";
  run "screen-cmd", "revtun", "-r", "--unsafe", "--local";
  ensureConnection($config);
  run sshCmd($config, "mkdir", "-p", $BACKUP_DIR);
  ######

  ######
  notificationMsg $id, sprintf "BAK-CELLID: %s", nowHrMin();
  my $opencellidFile = sprintf "/tmp/opencellid-geo-%s", nowYMD_HMS_MILLIS();
  system "opencellid-geo >$opencellidFile 2>&1";
  run rsyncCmd($config, $opencellidFile, "$BACKUP_DIR/opencellid-geo/");
  ######

  ######
  for my $dcimDirName(sort keys %$dcimDirs){
    my $dcimDir = $$dcimDirs{$dcimDirName};
    notificationMsg $id, sprintf "BAK-DCIM-$dcimDirName: %s %s",
      getDCIMSummary($dcimDir), nowHrMin();
    run rsyncCmd($config, "$dcimDir/", "$BACKUP_DIR/DCIM/$dcimDirName/"),
      "--exclude=backup_*";
  }
  ######

  ######
  notificationMsg $id, sprintf "BAK-DBS: %s", nowHrMin();
  my $sqliteDbsDestDir = "/tmp/backup-sqlite-dbs";
  run "rm", "-rf", $sqliteDbsDestDir;
  run "mkdir", "-p", $sqliteDbsDestDir;
  for my $dbName(sort keys %sqliteDbs){
    my $destGzipFile = "$sqliteDbsDestDir/$dbName.gz";
    run "sudo", "backup-sqlite-db", $sqliteDbs{$dbName}, $destGzipFile;
    run "sudo", "chown", "$USER.$USER", $destGzipFile;
  }
  run rsyncCmd($config, "$sqliteDbsDestDir/", $BACKUP_DIR);
  ######

  ######
  notificationMsg $id, sprintf "BAK-MMS: %s", nowHrMin();
  run rsyncCmd($config, "$mmsPartsDir/", "$BACKUP_DIR/mms-parts-dir/");
  ######

  ######
  notificationMsg $id, sprintf "BAK-GPS: %s", nowHrMin();
  my $gpsconFile = sprintf "/tmp/gpscon-%s", nowYMD_HMS_MILLIS();
  system "gpscon runs=1 dumps=2 tout=60 >$gpsconFile 2>&1";
  run rsyncCmd($config, $gpsconFile, "$BACKUP_DIR/gpscon/");
  ######

  ######
  notificationMsg $id, sprintf "%28s", "b\@" . nowHrMin();
  run "screen-cmd", "-q", "revtun", "-r", "--unsafe", "--local";
  system "echo " . nowHrMin() . " > $lastSuccessFile";
  ######

  clearAllNotifications();

  run "date";
  run "bat";
}

sub ensureConnection($){
  my $config = shift;
  my $host = "";
  my $start = time;
  $| = 1; #autoflush
  print "trying to connect to $REMOTE_HOST\n";
  while(time - $start < $MAX_TIMEOUT){
    print ".";
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProcQuiet "@hostnameCmd 2>/dev/null";
    last if $? == 0;
    sleep 1;
  }
  print "\n";
  if($host ne $REMOTE_HOST){
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProc @hostnameCmd;
  }
  fail "Failed to connect to $REMOTE_HOST\n" if $host ne $REMOTE_HOST;
  print "connected!\n";
}

sub getLocalPort($){
  my $config = shift;
  my $file = $$config{'revtun.portfile'};
  fail "missing revtun.portfile: $file\n" if not -f $file;
  my $port = `cat $file`;
  chomp $port;
  fail "malformed port: $port\n" if $port !~ /^\d+$/;
  return $port;
}

sub getDCIMSummary($){
  my ($dcimDir) = @_;

  my $findCmd = ""
    . "find '$dcimDir'"
    . "  -type f"
    . "  -not -iregex .*/backup_.*"
  ;

  my $duTotalCmd = ""
    . "tr '\\n' '\\0'"
    . " | du -bc --files0-from=-"
    . " | tail -1"
  ;

  my $wcLineCmd = ""
    . "wc -l"
  ;

  my $dcimDu = `$findCmd | $duTotalCmd`;
  my $dcimWc = `$findCmd | $wcLineCmd`;
  chomp $dcimDu;
  chomp $dcimWc;

  my $dcimSizeMiB;
  if($dcimDu =~ /^(\d+)\s*total$/){
    $dcimSizeMiB = int($1/1024/1024 + 0.5);
  }else{
    $dcimSizeMiB = "???";
  }

  my $dcimCount = $dcimWc;
  $dcimCount = "???" unless $dcimCount =~ /^\d+$/;

  return sprintf "%03dM %03df", $dcimSizeMiB, $dcimCount;
}

sub createNotification(){
  my $out = `notificationtool -A backup -o add`;
  if($out =~ /^Created notification with id (\d+)$/){
    return $1;
  }else{
    print STDERR "could not get notification ID\n";
    return 28758; #chosen by fair dice roll, guaranteed random
  }
}
sub notificationMsg($$){
  my ($id, $msg) = @_;
  print "\n$msg\n";
  system "notificationtool", "-A", "backup", "-o", "update", "-i", $id, $msg;
}
sub removeNotification($){
  my ($id) = @_;
  system "notificationtool", "-o", "remove", "-i", $id;
}

sub sshCmd($@){
  my ($config, @cmd) = @_;
  my $port = getLocalPort $config;
  return ("ssh", "$REMOTE_USER\@localhost",
      "-p", $port,
      @SSH_OPTS,
      @cmd);
}

sub rsyncCmd($$$){
  my ($config, $src, $dest) = @_;
  my $port = getLocalPort $config;
  return ("rsync",
    "-e", "ssh -p $port @SSH_OPTS",
    "-avP", $src, "$REMOTE_USER\@localhost:$dest");
}


sub readSecrets(){
  my @lines = `cat $SECRETS_FILE 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @CONFIG_KEYS;
  for my $line(@lines){
    if($line =~ /^($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @CONFIG_KEYS){
    fail "Missing config '$key' in $SECRETS_FILE\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

sub run(@){
  tryRun @_;
  fail "Error running @_\n" if $? != 0;
}

sub tryRun(@){
  print "@_\n";
  system @_;
}

sub readProc(@){
  my $out = tryReadProc @_;
  fail "Error running @_\n" if $? != 0;
  return $out;
}

sub tryReadProc(@){
  print "@_\n";
  tryReadProcQuiet @_;
}
sub tryReadProcQuiet(@){
  open PROC, "-|", @_;
  my @lines = <PROC>;
  close PROC;

  my $out = join '', @lines;
  chomp $out if @lines == 1;
  return $out;
}
sub nowHrMin(){
  my $hrMin = `date +%H:%M`;
  chomp $hrMin;
  return $hrMin;
}
sub nowYMD_HMS_MILLIS(){
  my $nowMillis = int(time * 1000.0);
  my $nowSex = int($nowMillis / 1000.0);

  my $dateFmt = `date --date \@$nowSex +%Y%m%d_%H%M%S_$nowMillis`;
  chomp $dateFmt;
  return $dateFmt;
}

sub fail($){
  my ($msg) = @_;
  chomp $msg;

  my $lastSuccess = `cat $lastSuccessFile 2>/dev/null`;
  my $now = nowHrMin;
  my $id = createNotification();
  notificationMsg $id, sprintf "BACKUP FAILED %s (%s)", $now, $lastSuccess;

  appendNotificationIdCache($id);

  die "$msg\n";
}

sub appendNotificationIdCache($){
  my ($id) = @_;
  open FH, ">> $notificationIdsCache"
    or print STDERR "ERROR: could not write to $notificationIdsCache\n$!\n";
  print FH "$id\n";
  close FH;
}

sub clearAllNotifications(){
  my @ids = `cat $notificationIdsCache 2>/dev/null`;
  system "rm", $notificationIdsCache;
  for my $id(@ids){
    removeNotification($id);
  }
}

&main(@ARGV);
