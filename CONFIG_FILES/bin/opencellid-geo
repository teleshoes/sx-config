#!/usr/bin/perl
use strict;
use warnings;

my $OPENCELLID_API_URL = "http://www.opencellid.org/cell/get";

my $secretsFile = "$ENV{HOME}/.secrets";
my $secretsPrefix = "opencellid";
my @configKeys = qw(token);
my @requiredKeys = qw(token);

sub getNetworkPropsDbus();
sub readProc(@);
sub readSecrets();

sub main(@){
  my $secrets = readSecrets();
  my $token = $$secrets{token};

  my $networkProps = getNetworkPropsDbus();

  my $mnc = $$networkProps{MobileNetworkCode};
  my $mcc = $$networkProps{MobileCountryCode};
  my $lac = $$networkProps{LocationAreaCode};
  my $cellid = $$networkProps{CellId};
  if(not defined $mnc or not defined $mcc or not defined $lac or not defined $cellid){
    die "could not read network registration info via dbus\n";
  }

  my $opencellidInfo = opencellidGet($token, $mnc, $mcc, $lac, $cellid);
  my $latLon;
  if(defined $$opencellidInfo{lat} and defined $$opencellidInfo{lon}){
    $latLon = "$$opencellidInfo{lat}, $$opencellidInfo{lon}";
  }else{
    $latLon = "no lat/lon found";
  }

  print "$latLon\n"
    . "\n"
    . "mnc=$mnc\n"
    . "mcc=$mcc\n"
    . "lac=$lac\n"
    . "cellid=$cellid\n"
    ;
}

sub opencellidGet($$$$$){
  my ($token, $mnc, $mcc, $lac, $cellid) = @_;
  my $url = $OPENCELLID_API_URL
    . "?key=$token"
    . "&mnc=$mnc"
    . "&mcc=$mcc"
    . "&lac=$lac"
    . "&cellid=$cellid"
    ;

  my $curlOut = readProc "curl", "--silent", $url;

  my $info = {};

  $$info{lat} = $1 if $curlOut =~ /lat\s*=\s*"(-?\d+|-?\d*\.\d+)"/;
  $$info{lon} = $1 if $curlOut =~ /lon\s*=\s*"(-?\d+|-?\d*\.\d+)"/;
  $$info{response} = $curlOut;

  return $info;
}

sub getNetworkPropsDbus(){
  my @cmd = qw(
    dbus-send
      --system
      --print-reply=literal
      --type=method_call
      --dest=org.ofono
      /ril_0
      org.ofono.NetworkRegistration.GetProperties
  );
  my $dbusOut = readProc @cmd;
  $dbusOut =~ s/(\s*\n\s*|\s+)/ /g;

  my @types = qw(
    string boolean byte
    int16 int32 int64 uint16 uint32 uint64
    double objectpath signature utf8string
    variant
  );
  my $typeRegex = "(?:variant\\s*)?(?:" . join("|", @types) . ")";

  my $info = {};
  while($dbusOut =~ /dict \s+ entry \s*\(\s* (\w+) \s+ $typeRegex \s+ (\S+) \s*\)/gx){
    my ($keyName, $val) = ($1, $2, $3);
    $$info{$keyName} = $val;
  }
  return $info;
}

sub readProc(@){
  open CMD, "-|", @_ or die "could not run \"@_\"\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return join "", @lines;
}

sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @configKeys;
  for my $line(@lines){
    if($line =~ /^$secretsPrefix\.($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @requiredKeys){
    die "Missing config '$key' in $secretsFile\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

&main(@ARGV);
