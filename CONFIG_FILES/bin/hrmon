#!/usr/bin/perl
use strict;
use warnings;

sub stopHrmon();
sub run(@);

my $MAC = '00:22:D0:44:94:5A';

my $BLE_HRL_EXEC = "BLEHeartRateLogger.py";

my $LOG_DIR = "$ENV{HOME}/.cache/logs/hrmon";

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0
  $0 --screen-daemon | --ensure-attach | ensure-attach
    ensure screen-daemon is running and attach to it
      -run: 'screen-daemon hrmon --ensure-attach'

  $0 --run
    kill any $BLE_HRL_EXEC procs and run $BLE_HRL_EXEC
      -run: pkill -f BLEHeartRateLogger.py
      -run: $BLE_HRL_EXEC -b -v -m $MAC

  $0 --start | start
    run --stop, and then start screen-daemon
      -run: $0 --stop
      -run: screen-daemon hrmon --start

  $0 --stop | stop
    stop screen-daemon and kill any other $BLE_HRL_EXEC procs
      -run: screen-daemon hrmon --stop
      -run: pkill -f BLEHeartRateLogger.py

  $0 --status
    print 'on' or 'off' if screen daemon is running
      -run: screen-daemon hrmon --status

  $0 --get | get | -g | g
    print the last line of the last log file, decompressing gz/bz2/xz if necessary
      -fetch latest log file as in: `ls $LOG_DIR/*.log* | sort | tail -1`
      -if compressed, decompress in memory
      -print the last line

  $0 --rotate-logs | rotate-logs | logs
    stop monitoring, compress all logs, and restart if was running
      -get PREV_STATUS as in: STATUS=`$0 --status`
      -run: $0 --stop
      -run: bzip2 $LOG_DIR/*.log
      -if \$PREV_STATUS = 'on':
        run: $0 --start
";

my $CMD_ENSURE_ATTACH = "ensure-attach";
my $CMD_RUN = "run";
my $CMD_START = "start";
my $CMD_STOP = "stop";
my $CMD_STATUS = "status";
my $CMD_GET = "get";
my $CMD_ROTATE_LOGS = "rotate-logs";

sub main(@){
  my $cmd = $CMD_ENSURE_ATTACH;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--screen-daemon|--ensure-attach|ensure-attach)$/){
      $cmd = $CMD_ENSURE_ATTACH;
    }elsif($arg =~ /^(--run|run)$/){
      $cmd = $CMD_RUN;
    }elsif($arg =~ /^(--start|start)$/){
      $cmd = $CMD_START;
    }elsif($arg =~ /^(--stop|stop)$/){
      $cmd = $CMD_STOP;
    }elsif($arg =~ /^(--status|status)$/){
      $cmd = $CMD_STATUS;
    }elsif($arg =~ /^(--get|get|-g|g)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(--rotate-logs|rotate-logs|logs)$/){
      $cmd = $CMD_ROTATE_LOGS;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_ENSURE_ATTACH){
    exec "screen-daemon", "hrmon", "--ensure-attach";
  }elsif($cmd eq $CMD_RUN){
    exec $BLE_HRL_EXEC, "-b", "-v", "-m", $MAC;
  }elsif($cmd eq $CMD_START){
    stopHrmon();
    run "screen-daemon", "hrmon", "--start";
  }elsif($cmd eq $CMD_STOP){
    stopHrmon();
  }elsif($cmd eq $CMD_STATUS){
    run "screen-daemon", "hrmon", "--status";
  }elsif($cmd eq $CMD_GET){
    my @logFiles = sort glob "$LOG_DIR/*.log*";
    die "ERROR: no log files available in $LOG_DIR\n" if @logFiles == 0;
    my $lastLogFile = $logFiles[-1];
    if($lastLogFile =~ /\.log$/){
      system "grep 'Heart rate' '$lastLogFile' | tail -1";
    }elsif($lastLogFile =~ /\.log\.gz$/){
      system "zgrep 'Heart rate' '$lastLogFile' | tail -1";
    }elsif($lastLogFile =~ /\.log\.xz$/){
      system "xz -d -c '$lastLogFile' | grep 'Heart rate' | tail -1";
    }elsif($lastLogFile =~ /\.log\.bz2/){
      system "bzip2 -d -c '$lastLogFile' | grep 'Heart rate' | tail -1";
    }else{
      die "ERROR: unrecognized log file format '$lastLogFile'\n";
    }
  }elsif($cmd eq $CMD_ROTATE_LOGS){
    my @logFiles = sort glob "$LOG_DIR/*.log";
    if(@logFiles == 0){
      print "skipping, no uncompressed log files available in $LOG_DIR\n";
      exit 0;
    }

    my $status = `screen-daemon hrmon --status`;
    stopHrmon();
    run "bzip2", @logFiles;
    if(-l "$LOG_DIR/latest"){
      #remove latest symlink if present, since compressing breaks it
      run "rm", "$LOG_DIR/latest";
    }

    if($status =~ /on/){
      stopHrmon();
      print "re-starting screen-daemon\n";
      run "screen-daemon", "hrmon", "--start";
    }
  }else{
    die "ERROR: unknown cmd $cmd\n"
  }
}

sub stopHrmon(){
  run "screen-daemon", "hrmon", "--stop";
  run "pkill", "-f", $BLE_HRL_EXEC;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
