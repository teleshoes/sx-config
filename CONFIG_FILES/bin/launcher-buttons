#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;

my $ipmagicName = "sx";

my @config = qw(
  voicecall-ui
  jolla-messages
  toeterm
  chrome

  qtbtn-klomp
  unplayer
  jolla-camera
  jolla-settings

  google-maps
  modrana
  gpsinfo
  cool-reader

  stellarium
  jolla-clock
  jolla-contacts
  qtemail

  jolla-calculator
  openrepos-myipaddress
  jolla-calendar
  vlc

  zoom
  riot
  filetug
  screentapshot2



  storeman
  store-client
  aptoide
  sailbook

  sailfish-office
  jolla-notes
  fingerterm
  thumbterm

  sailfish-browser
  okboard
  tkts
  meecast

  lirr_cpg_pen
  lirr_cpg_rvc
  lirr_fdl_pen
  lirr_pen_cpg

  lirr_pen_fdl
  lirr_rvc_cpg
  lirrgui
  lirr-traintime

  mta-etix
  jolla-gallery
  qtscreen-daemon
  nesoid



  snes9x
  jolla-mediaplayer
  jollacompass
  bluepill

  harbour-advanced-camera
);

my @unused = qw(
  jolla-email
  sailfish-weather
  sailfish-tutorial
  sailfish-archive
  sailfish-installationhandler
  jolla-aptoide
);

########################################################
#arbitrary depth nested dirs, with icons
#  if icon name is blank 'dir%name%[', use the defaultIconName
#e.g.:
#  appname0-launcher
#  dir%FolderName%folder-icon-name[
#    appname1-launcher
#    appname2-launcher
#    appname3-launcher
#    dir%SubFolder%icon-bird-nest[
#      appname4-launcher
#    ]
#  ]
#  appname5-launcher
#  appname6-launcher
########################################################

my %replacementRegexs = (
  'aptoide'        => qw/^apkd_launcher_cm_aptoide_pt-cm_aptoide_pt_view_entry_EntryActivity$/,
  'jolla-aptoide'  => qw/^apkd_launcher_com_aptoide_partners-com_aptoide_partners_Start$/,
  'chrome'         => qw/^apkd_launcher_com_android_chrome-.*$/,
  'cool-reader'    => qw/^apkd_launcher_org_coolreader-org_coolreader_CoolReader$/,
  'google-maps'    => qw/^apkd_launcher_com_google_android_apps_maps-com_google_android_maps_MapsActivity$/,
  'kasa'           => qw/^apkd_launcher_com_tplink_kasa__android-com_tplink_hellotp_activity_SplashScreenActivity$/,
  'nesoid'         => qw/^apkd_launcher_com_androidemu_nes-com_androidemu_nes_MainActivity$/,
  'snes9x'         => qw/^apkd_launcher_com_explusalpha_Snes9x-com_imagine_BaseActivity$/,
  'mta-etix'       => qw/^apkd_launcher_com_mta_mobileapp-com_mta_mobileapp_MainActivity$/,
  'lirr-traintime' => qw/^apkd_launcher_org_lirr_portal-org_lirr_portal_MainActivity$/,
  'lirrgui'        => qw/^lirrtraintime$/,
  'riot'           => qw/^apkd_launcher_im_vector_alpha-im_vector_activity_VectorLauncherActivity$/,
  'tkts'           => qw/^apkd_launcher_com_TDF_AndroidTdf-com_TDF_AndroidTdf_applicationwide_TktsSplashScreenActivity$/,
  'vlc'            => qw/^apkd_launcher_org_videolan_vlc-org_videolan_vlc_StartActivity$/,
  'zoom'           => qw/^apkd_launcher_us_zoom_videomeetings-com_zipow_videobox_LauncherActivity$/,
);

#desktop files with no launchers
my @extraIncludePatterns = qw(
  apkd-mime-handler
  csd.desktop
  jolla-calendar-import.desktop
  jolla-camera-lockscreen.desktop
  jolla-camera-viewfinder.desktop
  jolla-contacts-import.desktop
  jolla-gallery-openfile.desktop
  jolla-gallery-playvideostream.desktop
  jolla-mediaplayer-openfile.desktop
  jolla-messages-openurl.desktop
  jolla-notes-import.desktop
  new-mail.desktop
  open-url.desktop
  ovpn-import.desktop
  sailfish-office-openfile.desktop
  simkit.desktop
  store-client-install.desktop
  voicecall-ui-openurl.desktop
);

my $user = "nemo";
my $defaultIconName = "icon-launcher-folder-14";
my $activeDir = '/usr/share/applications';
my $allDir = '/opt/app-launchers';
my $directoryFileDir = "/home/$user/.config/lipstick";
my $confFileDest = "/home/$user/.config/lipstick/applications.menu";

sub rearrangeLauncherButtons();
sub ensureExecScriptOnDevice(@);
sub applyConfigReplacements($$);
sub getAppNamesInDir($);
sub getValidAppNames();
sub addMissingPrefix($$);
sub createAppDesktopFiles(@);
sub writeLipstickConfig(@);
sub run(@);

#in case running in a gui terminal
$SIG{HUP} = sub { print STDERR "Caught a sighup $!" };

my $usage = "Usage:
  $0
    re-arrange launcher buttons and launcher dirs, potentially removing some
      backs up desktop files to $allDir
      before changing $activeDir and lipstick

  $0 -g
    print a list of all app names from all desktop files
      in $allDir and $activeDir

  $0 --inactive
    print app names of desktop files that
      are in $allDir and are not in $activeDir
";

sub main(@){
  my $cmd;
  if(@_ == 1 and $_[0] =~ /^(-g)$/){
    $cmd = "get";
  }elsif(@_ == 1 and $_[0] =~ /^(--inactive)$/){
    $cmd = "inactive";
  }elsif(@_ == 0){
    $cmd = "rearrange";
  }else{
    die $usage;
  }

  ensureExecScriptOnDevice(@_);

  die "must be run as root\n" if `whoami` ne "root\n";

  if($cmd eq "get"){
    print map {"$_\n"} getValidAppNames();
  }elsif($cmd eq "inactive"){
    my @allAppNames = getAppNamesInDir $allDir;
    my %okActiveAppNames = map {$_ => 1} getAppNamesInDir $activeDir;
    my @inactive = grep {not defined $okActiveAppNames{$_}} @allAppNames;
    print map {"$_\n"} @inactive;
  }elsif($cmd eq "rearrange"){
    rearrangeLauncherButtons();
  }else{
    die "invalid command: $cmd\n";
  }
}

sub rearrangeLauncherButtons(){
  my @validAppNames = getValidAppNames();

  my @configItems = @config;
  @configItems = applyConfigReplacements \@configItems, \@validAppNames;
  @configItems = addMissingPrefixes([@configItems], [@validAppNames]);

  my @appNames = grep {$_ !~ /^(dir%.*%.*\[|\])$/} @configItems;

  my %okAllAppNamesOld = map {$_ => 1} getAppNamesInDir $allDir;
  createAppDesktopFiles(@appNames);
  my %okAllAppNamesNew = map {$_ => 1} getAppNamesInDir $allDir;

  writeLipstickConfig(@configItems);

  run "pkill lipstick";

  my %okActiveAppNames = map {$_ => 1} getAppNamesInDir $activeDir;

  my (@removedNew, @removedOld);
  for my $appName(sort keys %okAllAppNamesNew){
    if(not defined $okActiveAppNames{$appName}){
      if(defined $okAllAppNamesOld{$appName}){
        push @removedOld, $appName;
      }else{
        push @removedNew, $appName;
      }
    }
  }

  my @missing;
  for my $appName(@appNames){
    push @missing, $appName if not defined $okActiveAppNames{$appName};
  }

  print "\n\nMISSING (not installed): @missing\n" if @missing > 0;
  print "\n\nREMOVED (newly installed): @removedNew\n" if @removedNew > 0;
}

sub ensureExecScriptOnDevice(@){
  my @args = @_;
  my $targetHost = `ipmagic $ipmagicName 2>/dev/null`;
  chomp $targetHost;
  my $actualHost = `hostname`;
  chomp $actualHost;
  if(length $targetHost > 0 and $targetHost ne $actualHost){
    my $host = `ipmagic $ipmagicName`;
    chomp $host;
    my $name = basename $0;
    print "copying to the device\n";
    system "scp", $0, "root\@$host:/tmp/$name";
    print "rerunning on the device\n";
    exec "ssh", "root\@$host", "/tmp/$name", @args;
  }
}

sub applyConfigReplacements($$){
  my ($configItems, $validAppNames) = @_;

  my %replacements;
  for my $fakeAppName(sort keys %replacementRegexs){
    my $regex = $replacementRegexs{$fakeAppName};
    my $found = 0;
    for my $validAppName(@$validAppNames){
      if($validAppName =~ /$regex/){
        $replacements{$fakeAppName} = $validAppName;
        $found = 1;
      }
    }
    if(not $found){
      $replacements{$fakeAppName} = $regex;
    }
  }

  my @replacedConfigItems;
  for my $item(@$configItems){
    if($item =~ /^(dir%.*%\[|\])$/){ #dont replace dir start/end items
      push @replacedConfigItems, $item;
    }else{
      my $replacementItem = $replacements{$item};
      push @replacedConfigItems, defined $replacementItem ? $replacementItem : $item;
    }
  }

  return @replacedConfigItems;
}

sub getAppNamesInDir($){
  my ($dir) = @_;
  my @desktopFiles = glob "$dir/*.desktop";
  my @appNames = map {/\/([^\/]+)\.desktop$/} @desktopFiles;
  return @appNames;
}

sub getValidAppNames(){
  my %okAppNames;
  %okAppNames = (%okAppNames, map {$_ => 1} getAppNamesInDir $allDir);
  %okAppNames = (%okAppNames, map {$_ => 1} getAppNamesInDir $activeDir);
  return sort keys %okAppNames;
}

sub addMissingPrefixes($$){
  my ($apps, $validAppNames) = @_;
  my %jollas;
  my %harbours;
  for my $valid(@$validAppNames){
    if($valid =~ m/^jolla-(.*)$/){
      $jollas{$1} = 1
    }
    if($valid =~ m/^harbour-(.*)$/){
      $harbours{$1} = 1
    }
  }
  my @newApps;
  for my $app(@$apps){
    if(defined $jollas{$app}){
      $app = "jolla-$app";
      print "prepending 'jolla-' to $app\n";
    }elsif(defined $harbours{$app}){
      $app = "harbour-$app";
      print "prepending 'harbour-' to $app\n";
    }
    push @newApps, $app;
  }
  return @newApps;
}

sub createAppDesktopFiles(@){
  my @appNames = @_;
  run "mkdir", "-p", $allDir;
  my @active = glob "$activeDir/*.desktop";
  run "rsync", "-avP", "--ignore-existing", @active, $allDir;
  run "rm -rf $activeDir";
  run "mkdir", "-p", $activeDir;
  for my $app(@appNames){
    run "cp", "-a", "$allDir/$app.desktop", $activeDir;
  }
  for my $pattern(@extraIncludePatterns){
    for my $file(glob "$allDir/$pattern"){
      run "cp", "-a", $file, $activeDir;
    }
  }
}

sub writeLipstickConfig(@){
  my @config = @_;
  my $xml = "";
  $xml .= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  $xml .= "<Menu>\n";
  $xml .= "    <Name></Name>\n";
  my $depth = 1;
  my $indent = "    " x $depth;
  my %dirs;
  for my $configItem(@config){
    if($configItem =~ /^dir%(.*)%(.*)\[$/){
      my ($dirName, $icon) = ($1, $2);
      $icon = $defaultIconName if $icon eq "";
      my $dirFilePath = "$directoryFileDir/dir-$dirName.directory";
      $xml .= "$indent<Menu>\n";
      $xml .= "$indent    <Name>$dirName</Name>\n";
      $xml .= "$indent    <Directory>$dirFilePath</Directory>\n";
      $dirs{$dirFilePath} = $icon;
      $depth++;
      $indent = "    " x $depth;
    }elsif($configItem =~ /^\]$/){
      $depth--;
      $indent = "    " x $depth;
      $xml .= "$indent</Menu>\n"
    }else{
      $xml .= "$indent<Filename>$configItem.desktop</Filename>\n";
    }
  }
  $xml .= "</Menu>\n";

  run "rm -f $directoryFileDir/*.directory";
  for my $dirFilePath(sort keys %dirs){
    my $icon = $dirs{$dirFilePath};
    my $content = "[Desktop Entry]\nIcon=$icon\n";
    open FH, "> $dirFilePath" or die "Couldnt write to $dirFilePath\n";
    print FH $content;
    close FH;
    run "chown", "$user.$user", $dirFilePath;
  }

  open FH, "> $confFileDest" or die "Couldnt write to $confFileDest\n";
  print FH $xml;
  close FH;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
