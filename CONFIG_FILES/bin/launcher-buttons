#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;

my @config = qw(
  voicecall-ui
  jolla-messages
  fingerterm
  chrome

  tether-on
  harbour-unplayer
  jolla-camera
  jolla-settings

  google-maps
  jolla-contacts
  jolla-clock
  cool-reader

  stellarium
  lirr-traintime
  harbour-modrana
  jolla-gallery

  tkts
  jolla-calculator
  harbour-ipaddress
  jolla-calendar

  harbour-sailphoto
  filecase
  harbour-warehouse
  fdroid

  awful-piano
  store-client
  aptoide
  store-aptoide

  jolla-email
  harbour-file-browser
  jolla-mediaplayer
  sailfish-office

  jolla-notes
  sailfish-tutorial
  okboard
  harbour-dolphin-settings

  sailfish-browser
  harbour-hungermeter
  harbour-batterylog
  harbour-webcat

  patchmanager
  sailfish-weather
);

########################################################
#arbitrary depth nested dirs, with icons
#  if icon name is blank 'dir%name%[', use the defaultIconName
#e.g.:
#  appname0-launcher
#  dir%FolderName%folder-icon-name[
#    appname1-launcher
#    appname2-launcher
#    appname3-launcher
#    dir%SubFolder%icon-bird-nest[
#      appname4-launcher
#    ]
#  ]
#  appname5-launcher
#  appname6-launcher
########################################################

my %replacements = (
  'google-maps'    => 'apkd_launcher_com_google_android_apps_maps-com_google_android_maps_MapsActivity',
  'cool-reader'    => 'apkd_launcher_org_coolreader-org_coolreader_CoolReader',
  'chrome'         => 'apkd_launcher_com_android_chrome-org_chromium_chrome_browser_document_ChromeLauncherActivity',
  'fdroid'         => 'apkd_launcher_org_matkie_fdroid-org_fdroid_fdroid_FDroid',
  'lirr-traintime' => 'apkd_launcher_org_lirr_portal-org_lirr_portal_MainActivity',
  'store-aptoide'  => 'apkd_launcher_com_aptoide_partners-com_aptoide_partners_StartPartner',
  'aptoide'        => 'apkd_launcher_cm_aptoide_pt-cm_aptoide_pt_view_entry_EntryActivity',
  'tkts'           => 'apkd_launcher_com_TDF_AndroidTdf-com_TDF_AndroidTdf_applicationwide_TktsSplashScreenActivity',
  'awful-piano'    => 'apkd_launcher_com_gismart_realpianofree-com_gismart_piano_GoogleFreeActivity',
);

#desktop files with no launchers
my @extraIncludePatterns = qw(
  csd.desktop
  jolla-calendar-import.desktop
  jolla-camera-lockscreen.desktop
  jolla-camera-viewfinder.desktop
  jolla-contacts-import.desktop
  jolla-gallery-openfile.desktop
  jolla-gallery-playvideostream.desktop
  jolla-mediaplayer-openfile.desktop
  jolla-messages-openurl.desktop
  jolla-notes-import.desktop
  new-mail.desktop
  open-url.desktop
  ovpn-import.desktop
  sailfish-office-openfile.desktop
  simkit.desktop
  store-client-install.desktop
  voicecall-ui-openurl.desktop
);

my $user = "nemo";
my $defaultIconName = "icon-launcher-folder-14";
my $activeDir = '/usr/share/applications';
my $allDir = '/opt/app-launchers';
my $directoryFileDir = "/home/$user/.config/lipstick";
my $confFileDest = "/home/$user/.config/lipstick/applications.menu";

sub rearrangeLauncherButtons();
sub ensureExecScriptOnDevice(@);
sub addMissingPrefix($$);
sub getValidDesktopNames();
sub createAppDesktopFiles(@);
sub writeLipstickConfig(@);
sub run(@);

#in case running in a gui terminal
$SIG{HUP} = sub { print STDERR "Caught a sighup $!" };

my $usage = "Usage:
  $0
    re-arrange launcher buttons and launcher dirs, potentially removing some
      backs up desktop files to $allDir
      before changing $activeDir and lipstick

  $0 -g
    print a list of all app names from all desktop files
      in $allDir and $activeDir
";

sub main(@){
  my $cmd;
  if(@_ == 1 and $_[0] =~ /^(-g)$/){
    $cmd = "get";
  }elsif(@_ == 0){
    $cmd = "rearrange";
  }else{
    die $usage;
  }

  ensureExecScriptOnDevice(@_);

  die "must be run as root\n" if `whoami` ne "root\n";

  if($cmd eq "get"){
    print getValidDesktopNames();
  }elsif($cmd eq "rearrange"){
    rearrangeLauncherButtons();
  }else{
    die "invalid command: $cmd\n";
  }
}

sub rearrangeLauncherButtons(){
  my @validDesktopNames = getValidDesktopNames();

  my @configItems = @config;
  @configItems = map {defined $replacements{$_} ? $replacements{$_} : $_} @configItems;
  @configItems = addMissingPrefixes([@configItems], [@validDesktopNames]);

  my @appNames = grep {$_ !~ /(^dir%.*%.*\[$)|(^\]$)/} @configItems;

  my @missing = createAppDesktopFiles(@appNames);

  writeLipstickConfig(@configItems);

  run "pkill lipstick";

  print "\n\n\n\nMISSING: @missing\n" if @missing > 0;
}

sub ensureExecScriptOnDevice(@){
  my @args = @_;
  if(`which sx 2>/dev/null` ne "" and `hostname` ne `sx`){
    my $host = `sx`;
    chomp $host;
    my $name = basename $0;
    print "copying to the device\n";
    system "scp", $0, "root\@$host:/tmp/$name";
    print "rerunning on the device\n";
    exec "ssh", "root\@$host", "/tmp/$name", @args;
  }
}

sub addMissingPrefixes($$){
  my ($apps, $validDesktopNames) = @_;
  my %jollas;
  my %harbours;
  for my $valid(@$validDesktopNames){
    if($valid =~ m/^jolla-(.*)$/){
      $jollas{$1} = 1
    }
    if($valid =~ m/^harbour-(.*)$/){
      $harbours{$1} = 1
    }
  }
  my @newApps;
  for my $app(@$apps){
    if(defined $jollas{$app}){
      $app = "jolla-$app";
      print "prepending 'jolla-' to $app\n";
    }elsif(defined $harbours{$app}){
      $app = "harbour-$app";
      print "prepending 'harbour-' to $app\n";
    }
    push @newApps, $app;
  }
  return @newApps;
}

sub getValidDesktopNames(){
  my @names = `ls $activeDir/*.desktop $allDir/*.desktop`;
  for my $name(@names){
    $name =~ s/.desktop$//;
    $name =~ s/^.*\///;
  }
  return @names;
}

sub createAppDesktopFiles(@){
  my @appNames = @_;
  run "mkdir", "-p", $allDir;
  my @active = glob "$activeDir/*.desktop";
  run "rsync", "-avP", "--ignore-existing", @active, $allDir;
  run "rm -rf $activeDir";
  run "mkdir", "-p", $activeDir;
  my @missing;
  for my $app(@appNames){
    run "cp", "-a", "$allDir/$app.desktop", $activeDir;
    push @missing, $app if $? != 0;
  }
  for my $pattern(@extraIncludePatterns){
    for my $file(glob "$allDir/$pattern"){
      run "cp", "-a", $file, $activeDir;
    }
  }
  return @missing;
}

sub writeLipstickConfig(@){
  my @config = @_;
  my $xml = "";
  $xml .= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  $xml .= "<Menu>\n";
  $xml .= "    <Name></Name>\n";
  my $depth = 1;
  my $indent = "    " x $depth;
  my %dirs;
  for my $configItem(@config){
    if($configItem =~ /^dir%(.*)%(.*)\[$/){
      my ($dirName, $icon) = ($1, $2);
      $icon = $defaultIconName if $icon eq "";
      my $dirFilePath = "$directoryFileDir/dir-$dirName.directory";
      $xml .= "$indent<Menu>\n";
      $xml .= "$indent    <Name>$dirName</Name>\n";
      $xml .= "$indent    <Directory>$dirFilePath</Directory>\n";
      $dirs{$dirFilePath} = $icon;
      $depth++;
      $indent = "    " x $depth;
    }elsif($configItem =~ /^\]$/){
      $depth--;
      $indent = "    " x $depth;
      $xml .= "$indent</Menu>\n"
    }else{
      $xml .= "$indent<Filename>$configItem.desktop</Filename>\n";
    }
  }
  $xml .= "</Menu>\n";

  run "rm $directoryFileDir/*.directory";
  for my $dirFilePath(sort keys %dirs){
    my $icon = $dirs{$dirFilePath};
    my $content = "[Desktop Entry]\nIcon=$icon\n";
    open FH, "> $dirFilePath" or die "Couldnt write to $dirFilePath\n";
    print FH $content;
    close FH;
    run "chown", "$user.$user", $dirFilePath;
  }

  open FH, "> $confFileDest" or die "Couldnt write to $confFileDest\n";
  print FH $xml;
  close FH;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
