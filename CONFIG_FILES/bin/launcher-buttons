#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;

my %replacements = (
  'google-maps'    => 'apkd_launcher_com_google_android_apps_maps-com_google_android_maps_MapsActivity'
  'cool-reader'    => 'apkd_launcher_org_coolreader-org_coolreader_CoolReader',
  'chrome'         => 'apkd_launcher_com_android_chrome-org_chromium_chrome_browser_document_ChromeLauncherActivity'
  'fdroid'         => 'apkd_launcher_org_matkie_fdroid-org_fdroid_fdroid_FDroid',
  'lirr-traintime' => 'apkd_launcher_org_lirr_portal-org_lirr_portal_MainActivity',
  'store-aptoide'  => 'apkd_launcher_com_aptoide_partners-com_aptoide_partners_StartPartner'
  'tkts'           => 'apkd_launcher_com_TDF_AndroidTdf-com_TDF_AndroidTdf_applicationwide_TktsSplashScreenActivity',
);

my @extraIncludePatterns = qw(
  web-search-*.desktop
);

my @config = qw(
  voicecall-ui
  jolla-messages
  fingerterm
  sailfish-browser

  -finch
  harbour-unplayer
  jolla-camera
  jolla-settings

  google-maps
  jolla-contacts
  jolla-clock
  cool-reader

  -qtbtn-klomp
  -qtemail
  -contact-emily
  jolla-gallery

  dir-tools[
    -qtbtn-power
    -toggleBT
    tether-on
    jolla-calculator

    -restart-wifi
    -dontgosleep
    -screenshotmee
    -dropcache-mdn
    -dcim-reindex
    -restart-messaging-ui
  ]
  dir-useful[
    -qtodo
    -brujula
    -mms-picviewer
    -teatime

    -index-office
    -qtbigtext
    -coffee
    -maps
  ]
  dir-cute[
    stellarium
    -emumaster
    -vmpkn9
    -qml2048

    -passant
    -xmcr
    -dingmee
  ]
  dir-lirr+junk[
    -lirr_fdl_pen
    -lirr_pen_fdl
    -lirr_cpg_rvc
    -lirr_rvc_cpg
    -lirr_cpg_pen
    -lirr_pen_cpg
    lirr-traintime

    -call-log
    -call-log-all
    -transmission
    harbour-modrana
    jolla-email
    -contact-coocoo
    -browser
    -fennec
    -MeeFox
    -dfilebrowser
    -camera-ui
    -trojita-tp
    -NokiaPt
    -accountsui
    -btinput-terminal
    -btinput
    -gallery
    jolla-calendar
    store-client
    -pidgin
    -n9-button-monitor
    -billboard-ui
  ]
);

for my $entry(@config){
  if(defined $replacements{$entry}){
    $entry = $replacements{$entry};
  }
}

my @quickLaunch = qw(
  call-history
  messaging-ui
  browser
  cameraplus
);


my %apps;
my %appDirs;
my %dirs;
my %dirNames;

my $activeDir = '/usr/share/applications';
my $allDir = '/opt/app-launchers';
my $directoryDir = '/home/user/.local/share/applications';
my $quickLaunchDir = '/home/user/.local/share/applications';
my $confFileDest = '/home/user/.config/meegotouchhome-nokia/launcherbuttons.data';

sub run(@);
sub appendHarmattans();
sub parseConfig();
sub getValidDesktopNames();
sub launcherPath($);
sub createAppDesktopFiles();
sub createDirDesktopFiles();
sub createQuickLauncherDesktopFiles();
sub getAppData();
sub getDirData();
sub getQuickLauncherData();
sub getData();
sub writeLauncherButtonsData($);

#in case running in a gui terminal
$SIG{HUP} = sub { print STDERR "Caught a sighup $!" };

sub main(@){
  if(`which n9` ne "" and `hostname` ne `n9`){
    my $host = `n9`;
    chomp $host;
    my $name = basename $0;
    print "copying to the device\n";
    system "scp", $0, "root\@$host:/tmp/$name";
    print "rerunning on the device\n";
    exec "ssh", "root\@$host", "/tmp/$name", @_;
  }

  ensureRoot();

  if(@_ == 1 and $_[0] eq '-g'){
    print getValidDesktopNames();
    exit 0;
  }
  die "Usage: $0   or  $0 -g\n" if @_ > 0;

  run "/sbin/initctl stop xsession/mthome";
  appendHarmattans();
  parseConfig();
  my @missing = createAppDesktopFiles();
  createDirDesktopFiles();
  createQuickLauncherDesktopFiles();

  my $data = getData();
  run "killall meegotouchhome";
  writeLauncherButtonsData($data);
  run "/sbin/initctl start xsession/mthome";

  print "\n\n\n\nMISSING: @missing\n" if @missing > 0;
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    print "rerunning as root\n";
    exec "sudo", $0, @ARGV;
  }
}

sub run(@){
  print "@_\n";
  system @_;
}

sub appendHarmattans(){
  my %harmattans;
  for my $valid(getValidDesktopNames()){
    if($valid =~ m/^(.*)_harmattan$/){
      $harmattans{$1} = 1
    }
  }
  for(my $i=0; $i<@config; $i++){
    if(defined $harmattans{$config[$i]}){
      $config[$i] .= "_harmattan";
      print "appending '_harmattan' to $config[$i]\n";
    }
  }
  for(my $i=0; $i<@quickLaunch; $i++){
    if(defined $harmattans{$config[$i]}){
      $quickLaunch[$i] .= "_harmattan";
      print "appending '_harmattan' to $quickLaunch[$i]\n";
    }
  }
}

sub parseConfig(){
  my $index = 0;
  my $nextDir = 1;
  for(my $i=0; $i<@config; $i++){
    my $item = $config[$i];
    if($item =~ /^dir-(.*)\[$/){
      my $dirName = $1;
      $dirs{$nextDir} = $index++;
      $dirNames{$nextDir} = $dirName;

      my $dirIndex = 0;
      while(++$i<@config and $config[$i] ne ']'){
        my $app = $config[$i];
        $appDirs{$app} = $nextDir;
        $apps{$app} = $dirIndex++;
      }

      $nextDir++;
    }else{
      my $app = $config[$i];
      $apps{$app} = $index++;
    }
  }
}

sub getValidDesktopNames(){
  my @names = `ls $activeDir/*.desktop $allDir/*.desktop`;
  for my $name(@names){
    $name =~ s/.desktop$//;
    $name =~ s/^.*\///;
  }
  return @names;
}

sub launcherPath($){
  my $path = shift;
  $path =~ s/^\///;
  $path =~ s/\//\\/g;
  return $path;
}


sub createAppDesktopFiles(){
  run "mkdir", "-p", $allDir;
  my @active = glob "$activeDir/*.desktop";
  run "rsync", "-avP", "--ignore-existing", @active, $allDir;
  run "rm -rf $activeDir";
  run "mkdir", "-p", $activeDir;
  my @missing;
  for my $app(keys %apps){
    run "cp", "-a", "$allDir/$app.desktop", $activeDir;
    push @missing, $app if $? != 0;
  }
  for my $pattern(@extraIncludePatterns){
    for my $file(glob "$allDir/$pattern"){
      run "cp", "-a", $file, $activeDir;
    }
  }
  return @missing;
}

sub createDirDesktopFiles(){
  run "rm $directoryDir/*.directory";
  for my $dir(sort keys %dirs){
    my $dirName = $dirNames{$dir};
    my $content = ''
      . "[Desktop Entry]\n"
      . "Type=Directory\n"
      . "Name=$dirName\n"
      . "X-MeeGo-Folder-Index=$dir\n"
      . "Icon=icon-l-default-application\n"
      . "OnlyShowIn=X-MeeGo;\n"
      ;
    my $fileName = "$directoryDir/folder$dir.directory";
    open FH, "> $fileName" or die "Couldnt write to $fileName\n";
    print FH $content;
    close FH;
  }
  run "chown", "user.users", "-R", $directoryDir;
}

sub createQuickLauncherDesktopFiles(){
  run "rm $quickLaunchDir/*.desktop";
  for(my $i=0; $i<@quickLaunch; $i++){
    my $qlFile = "$quickLaunchDir/quicklaunchbar$i.desktop";
    run "ln", "-s", "$activeDir/$quickLaunch[$i].desktop", $qlFile;
  }
  run "chown", "user.users", "-R", $quickLaunchDir;
}


sub getAppData(){
  my $data = '';
  for my $app(sort keys %apps){
    my $index = $apps{$app};
    my $dir = $appDirs{$app};
    $dir = 0 if not defined $dir;

    my $desktopFile = "$activeDir/$app.desktop";
    $data .= launcherPath($desktopFile) . "=launcher/$dir/$index\n";
  }
  return $data;
}

sub getDirData(){
  my $data = '';
  for my $dir(sort keys %dirs){
    my $dirName = $dirNames{$dir};
    my $index = $dirs{$dir};
    my $desktopFile = "$directoryDir/folder$dir.directory";
    $data .= launcherPath($desktopFile) . "=launcher/0/$index\n";
  }
  return $data;
}

sub getQuickLauncherData(){
  my $data = '';
  for(my $i=0; $i<@quickLaunch; $i++){
    my $desktopFile = "$quickLaunchDir/quicklaunchbar$i.desktop";
    $data .= launcherPath($desktopFile) . "=quicklaunchbar/$i\n";
  }
  return $data;
}

sub getData(){
  my $data = "[DesktopEntries]\n";
  $data .= getDirData();
  $data .= getQuickLauncherData();
  $data .= getAppData();
  return $data;
}

sub writeLauncherButtonsData($){
  my $data = shift;
  print $data;

  open FH, "> $confFileDest" or die "Couldnt write to $confFileDest\n";
  print FH $data;
  close FH;
}

&main(@ARGV);
