#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;

my $ipmagicName = "sx";

my $USE_WAYDROID = 0;
my $USE_ALIENDALVIK = 1;

my $SDCARD_DIR = "/media/sdcard/phone";

my @config = qw(
  voicecall-ui
  jolla-messages
  fingerterm
  sailfish-browser

  qtbtn-klomp
  bromite
  opencamera-wrapper
  jolla-settings

  harbour-pure-maps
  tmobile-digits
  gpsinfo
  coolreader

  stellarium
  jolla-clock
  jolla-contacts
  qtemail

  jolla-calculator
  harbour-advanced-camera
  jolla-calendar
  waydroid-wd

  jolla-gallery
  unplayer
  filetug
  screenshot

  facebook
  google-maps
  element
  jolla-camera



  sailfish-office
  jolla-notes
  retrofit-barcode
  kill-lipstick2vnc

  okboard
  qtscreen-daemon
  jollacompass
  compass-calib

  lirr_isp_pen
  lirr_pen_isp
  lirr_bab_pen
  lirr_pen_bab

  lirr_isp_gc
  lirr_gc_isp
  lirrgui
  sailfish-audiorecorder

  mimer
  waydroid-runner
  jolla-mediaplayer
  meecast

  storeman
  store-client
  sailfishos-chum-gui
  aptoide

  fdroid
  kingdom
  nesoid
  snes9x



  chrome
  tor
  discord
  fbmessenger

  fairynest
  midea
  mystrom
  jitsi

  textfree
  tkts
  traintime

  vlc
  youtube
  youtube-music
  youtube-vanced-mgr

  android-settings
  modrana
  qtbtn-lap
  rheem

  harbour-mlsmanager
  sfos-forum-viewer
);

my @unused = qw(
  jolla-email
  sailfish-weather
  sailfish-tutorial
  sailfish-archive
  sailfish-installationhandler
  openconnect-import
  sailfish-captiveportal
  vpnc-import
  google-tts
  vanced-microg
  ivona-tts
  ivona-tts-amy
  opencamera
);

########################################################
#arbitrary depth nested dirs, with icons
#  if icon name is blank 'dir%name%[', use the defaultIconName
#e.g.:
#  appname0-launcher
#  dir%FolderName%folder-icon-name[
#    appname1-launcher
#    appname2-launcher
#    appname3-launcher
#    dir%SubFolder%icon-bird-nest[
#      appname4-launcher
#    ]
#  ]
#  appname5-launcher
#  appname6-launcher
########################################################


# APP_NAME => [PACKAGE, ACTION, ICON_PATH]
# these get created as "/usr/shared/applications/<PREFIX>-<APP_NAME>.desktop"
#   PREFIX is "android-ad" for USE_ALIENDALVIK and "android-wd" for USE_WAYDROID
my %androidLaunchers = (
  "android-settings"   => ["com.android.settings",                      ".Settings",                                                       undef],
  "aptoide"            => ["cm.aptoide.pt",                             ".view.MainActivity",                                              undef],
  "bromite"            => ["org.bromite.bromite",                       "com.google.android.apps.chrome.Main",                             undef],
  "chrome"             => ["com.android.chrome",                        "com.google.android.apps.chrome.Main",                             undef],
  "coolreader"         => ["org.coolreader",                            ".CoolReader",                                                     undef],
  "discord"            => ["com.discord",                               ".app.AppActivity\$Main",                                          undef],
  "element"            => ["im.vector.app",                             "im.vector.app.features.Alias",                                    undef],
  "facebook"           => ["com.facebook.katana",                       ".LoginActivity",                                                  undef],
  "fairynest"          => ["com.spled.aicontrol",                       ".activity.main.MainActivity",                                     undef],
  "fbmessenger"        => ["com.facebook.mlite",                        ".coreui.view.MainActivity",                                       undef],
  "fdroid"             => ["org.fdroid.fdroid",                         ".views.main.MainActivity",                                        undef],
  "google-maps"        => ["com.google.android.apps.maps",              "com.google.android.maps.MapsActivity",                            undef],
  "google-tts"         => ["com.google.android.tts",                    "android.app.AppDetailsActivity",                                  undef],
  "ivona-tts"          => ["com.ivona.tts",                             ".WelcomeActivity",                                                undef],
  "ivona-tts-amy"      => ["com.ivona.tts.voicebeta.eng.gbr.amy",       ".IvonaVoice",                                                     undef],
  "jitsi"              => ["org.jitsi.meet",                            ".MainActivity",                                                   undef],
  "kingdom"            => ["com.rawfury.kingdom2crowns",                "com.unity3d.player.UnityPlayerActivity",                          undef],
  "midea"              => ["com.midea.aircondition.obm",                ".activity.LoginActivity",                                         undef],
  "mystrom"            => ["com.cogniance.asoka.srs.android",           ".MainActivity",                                                   undef],
  "nesoid"             => ["com.androidemu.nes",                        ".MainActivity",                                                   undef],
  "opencamera"         => ["net.sourceforge.opencamera",                ".MainActivity",                                                   undef],
  "rheem"              => ["com.rheem.econetconsumerandroid",           "com.rheem.econet.view.splash.SplashActivity",                     undef],
  "snes9x"             => ["com.explusalpha.Snes9xPlus",                "com.imagine.BaseActivity",                                        undef],
  "textfree"           => ["com.pinger.textfree",                       ".call.activities.TFSplash",                                       undef],
  "tkts"               => ["com.TDF.AndroidTdf",                        ".applicationwide.TktsSplashScreenActivity",                       undef],
  "tmobile-digits"     => ["com.tmobile.digits",                        "com.mavenir.digits.digits3x.MainActivity",                        undef],
  "tor"                => ["org.torproject.torbrowser",                 ".App",                                                            undef],
  "traintime"          => ["com.mta.mobileapp",                         ".MainActivity",                                                   undef],
  "vanced-microg"      => ["com.mgoogle.android.gms",                   "android.app.AppDetailsActivity",                                  undef],
  "vlc"                => ["org.videolan.vlc",                          ".StartActivity",                                                  undef],
  "youtube"            => ["com.vanced.android.youtube",                "com.google.android.youtube.app.honeycomb.Shell\$HomeActivity",    undef],
  "youtube-music"      => ["com.vanced.android.apps.youtube.music",     "com.google.android.apps.youtube.music.activities.MusicActivity",  undef],
  "youtube-vanced-mgr" => ["com.vanced.manager",                        ".ui.MainActivity",                                                undef],
);



# APP_NAME_ALIAS => REAL_DESKTOP_FILE_REGEX
my %replacementRegexsWaydroid = map {$_ => "^android-wd-$_\$"} sort keys %androidLaunchers;

# APP_NAME_ALIAS => REAL_DESKTOP_FILE_REGEX
my %replacementRegexsAliendalvik = map {$_ => "^android-ad-$_\$"} sort keys %androidLaunchers;

# APP_NAME_ALIAS => REAL_DESKTOP_FILE_REGEX
my %replacementRegexs = (
  'lirrgui'          => qw/^lirrtraintime$/,

  ($USE_WAYDROID ? %replacementRegexsWaydroid : ()),
  ($USE_ALIENDALVIK ? %replacementRegexsAliendalvik : ()),
);

#desktop files with no launchers
my @extraIncludePatterns = qw(
  apkd-mime-handler.desktop
  csd.desktop
  harbour-pure-maps-uri-handler.desktop
  jolla-calendar-import.desktop
  jolla-camera-lockscreen.desktop
  jolla-camera-viewfinder.desktop
  jolla-contacts-import.desktop
  jolla-gallery-openfile.desktop
  jolla-gallery-playvideostream.desktop
  jolla-mediaplayer-openfile.desktop
  jolla-messages-openurl.desktop
  jolla-notes-import.desktop
  l2tp-import.desktop
  new-mail.desktop
  open-url.desktop
  ovpn-import.desktop
  pptp-import.desktop
  sailfish-captiveportal.desktop
  sailfish-office-openfile.desktop
  sailfish-share.desktop
  simkit.desktop
  store-client-install.desktop
  voicecall-ui-openurl.desktop
  webcal-import.desktop
);

my $user = "nemo";
my $defaultIconName = "icon-launcher-folder-14";
my $activeDir = '/usr/share/applications';
my $allDir = '/opt/app-launchers';
my $userDir = "/home/$user/.local/share/applications";
my $origLaunchersUserDir = '/opt/app-launchers-user';
my $directoryFileDir = "/home/$user/.config/lipstick";
my $confFileDest = "/home/$user/.config/lipstick/applications.menu";

my $waydroidSrcAppIconDir = "/home/waydroid/data/icons";
my $waydroidBackupAppIconDir = "$SDCARD_DIR/android-app-icons-wd";
my $waydroidDestAppIconDir = "/usr/share/icons/waydroid";

my $aliendalvikSrcAppIconDir = "/var/lib/apkd";
my $aliendalvikBackupAppIconDir = "$SDCARD_DIR/android-app-icons-ad";
my $aliendalvikDestAppIconDir = "/usr/share/icons/aliendalvik";

sub rearrangeLauncherButtons();
sub createAndroidDesktopFiles();
sub createAndroidDesktopFile($$$$);
sub ensureExecScriptOnDevice(@);
sub applyConfigReplacements($$);
sub getAppNamesInDir($);
sub getValidAppNames();
sub addMissingPrefix($$);
sub createAppDesktopFiles(@);
sub writeLipstickConfig(@);
sub run(@);

#in case running in a gui terminal
$SIG{HUP} = sub { print STDERR "Caught a sighup $!" };

my $usage = "Usage:
  $0
    re-arrange launcher buttons and launcher dirs, potentially removing some
      backs up desktop files to $allDir
      before changing $activeDir and lipstick

  $0 -g
    print a list of all app names from all desktop files
      in $allDir and $activeDir

  $0 --inactive
    print app names of desktop files that
      are in $allDir and are not in $activeDir
";

sub main(@){
  my $cmd;
  if(@_ == 1 and $_[0] =~ /^(-g)$/){
    $cmd = "get";
  }elsif(@_ == 1 and $_[0] =~ /^(--inactive)$/){
    $cmd = "inactive";
  }elsif(@_ == 0){
    $cmd = "rearrange";
  }else{
    die $usage;
  }

  ensureExecScriptOnDevice(@_);

  die "must be run as root\n" if `whoami` ne "root\n";

  if($cmd eq "get"){
    print map {"$_\n"} getValidAppNames();
  }elsif($cmd eq "inactive"){
    my @allAppNames = getAppNamesInDir $allDir;
    my %okActiveAppNames = map {$_ => 1} getAppNamesInDir $activeDir;
    my @inactive = grep {not defined $okActiveAppNames{$_}} @allAppNames;
    print map {"$_\n"} @inactive;
  }elsif($cmd eq "rearrange"){
    rearrangeLauncherButtons();
  }else{
    die "invalid command: $cmd\n";
  }
}

sub rearrangeLauncherButtons(){
  createAndroidDesktopFiles();

  my @validAppNames = getValidAppNames();

  my @configItems = @config;
  @configItems = applyConfigReplacements \@configItems, \@validAppNames;
  @configItems = addMissingPrefixes([@configItems], [@validAppNames]);

  my @appNames = grep {$_ !~ /^(dir%.*%.*\[|\])$/} @configItems;

  my %okAllAppNamesOld = map {$_ => 1} getAppNamesInDir $allDir;
  createAppDesktopFiles(@appNames);
  my %okAllAppNamesNew = map {$_ => 1} getAppNamesInDir $allDir;

  writeLipstickConfig(@configItems);

  run "pkill -9 lipstick";

  my %okActiveAppNames = map {$_ => 1} getAppNamesInDir $activeDir;

  my @unusedItems = @unused;
  @unusedItems = applyConfigReplacements \@unusedItems, \@validAppNames;
  my %okUnusedAppNames = map {$_ => 1} @unusedItems;

  my (@removedNew, @removedOld);
  for my $appName(sort keys %okAllAppNamesNew){
    if(not defined $okActiveAppNames{$appName}){
      if(defined $okAllAppNamesOld{$appName} or defined $okUnusedAppNames{$appName}){
        push @removedOld, $appName;
      }else{
        push @removedNew, $appName;
      }
    }
  }

  my @missing;
  for my $appName(@appNames){
    push @missing, $appName if not defined $okActiveAppNames{$appName};
  }

  print "\n\nMISSING (not installed): @missing\n" if @missing > 0;
  print "\n\nREMOVED (newly installed): @removedNew\n" if @removedNew > 0;

  run "udo systemctl --user restart lipstick";
}

sub createAndroidDesktopFiles(){
  run "rm -f $activeDir/android-wd-*.desktop";
  run "rm -f $allDir/android-wd-*.desktop";

  run "rm -f $activeDir/android-ad-*.desktop";
  run "rm -f $allDir/android-ad-*.desktop";

  if($USE_WAYDROID){
    run "mkdir", "-p", $waydroidBackupAppIconDir;
    run "rsync", "-avP",
      "$waydroidSrcAppIconDir/",
      "$waydroidBackupAppIconDir/",
    ;
    run "mkdir", "-p", $waydroidDestAppIconDir;
    run "rsync", "-avP",
      "$waydroidBackupAppIconDir/",
      "$waydroidDestAppIconDir/",
    ;
  }
  if($USE_ALIENDALVIK){
    my $adIcons = {};
    for my $iconFile(glob "$aliendalvikSrcAppIconDir/*.png"){
      if($iconFile =~ /apkd_launcher_(\w+)-(.+).png/){
        my ($pkgNameFmt, $intentFmt) = ($1, $2);
        $$adIcons{$pkgNameFmt} = $iconFile;
      }
    }

    run "mkdir", "-p", $aliendalvikBackupAppIconDir;
    for my $appName(sort keys %androidLaunchers){
      my ($pkg, $intent, $iconPath) = @{$androidLaunchers{$appName}};
      my $pkgNameFmt = $pkg;
      $pkgNameFmt =~ s/\W/_/g;
      my $iconFile = $$adIcons{$pkgNameFmt};
      if(defined $iconFile){
        run "cp", "-ar", "$iconFile", "$aliendalvikBackupAppIconDir/$pkg.png";
      }else{
        print "\n\nWARNING: no aliendalvik icon found for $appName - $pkg\n";
      }
    }

    run "mkdir", "-p", $aliendalvikDestAppIconDir;
    run "rsync", "-avP",
      "$aliendalvikBackupAppIconDir/",
      "$aliendalvikDestAppIconDir/",
    ;
  }

  if($USE_WAYDROID){
    for my $appName(sort keys %androidLaunchers){
      my ($pkg, $intent, $iconPath) = @{$androidLaunchers{$appName}};
      createAndroidDesktopFile($appName, "waydroid", "wd", $waydroidDestAppIconDir);
    }
  }
  if($USE_ALIENDALVIK){
    for my $appName(sort keys %androidLaunchers){
      my ($pkg, $intent, $iconPath) = @{$androidLaunchers{$appName}};
      createAndroidDesktopFile($appName, "aliendalvik", "ad", $aliendalvikDestAppIconDir);
    }
  }
}

sub createAndroidDesktopFile($$$$){
  my ($appName, $androidEnvName, $wdAdLauncherCmdExec, $androidIconDir) = @_;

  my ($pkg, $action, $iconPathOverride) = @{$androidLaunchers{$appName}};

  my $iconPath = "$androidIconDir/$pkg.png";
  $iconPath = $iconPathOverride if defined $iconPathOverride;

  my $fullIntent = "$pkg/$action";

  my $desktopFilePrefix = "android-$wdAdLauncherCmdExec";

  my $cmd = "/usr/local/bin/udo $wdAdLauncherCmdExec --launch-intent=\"$fullIntent\"";

  my $desktopFile = "$activeDir/$desktopFilePrefix-$appName.desktop";
  my $desktopContents = ""
    . "[Desktop Entry]\n"
    . "Name=$appName\n"
    . "Comment=Run $fullIntent in $androidEnvName\n"
    . "Icon=$iconPath\n"
    . "Exec=$cmd\n"
    . "Type=Application\n"
    . "X-Nemo-Single-Instance=no\n"
    . "Custom-Launcher=yes\n"
    . "\n"
    . "[X-Sailjail]\n"
    . "Sandboxing=Disabled\n"
    ;

  open FH, "> $desktopFile" or die "ERROR: cannot write $desktopFile\n$!\n";
  print FH $desktopContents;
  close FH;
}

sub ensureExecScriptOnDevice(@){
  my @args = @_;
  my $targetHost = `ipmagic $ipmagicName 2>/dev/null`;
  chomp $targetHost;
  my $actualHost = `hostname`;
  chomp $actualHost;
  if(length $targetHost > 0 and $targetHost ne $actualHost){
    my $host = `ipmagic $ipmagicName`;
    chomp $host;
    my $name = basename $0;
    print "copying to the device\n";
    system "scp", $0, "root\@$host:/tmp/$name";
    print "rerunning on the device\n";
    exec "ssh", "root\@$host", "/tmp/$name", @args;
  }
}

sub applyConfigReplacements($$){
  my ($configItems, $validAppNames) = @_;

  my %replacements;
  for my $fakeAppName(sort keys %replacementRegexs){
    my $regex = $replacementRegexs{$fakeAppName};
    my $found = 0;
    for my $validAppName(@$validAppNames){
      if($validAppName =~ /$regex/){
        $replacements{$fakeAppName} = $validAppName;
        $found = 1;
      }
    }
    if(not $found){
      $replacements{$fakeAppName} = $regex;
    }
  }

  my @replacedConfigItems;
  for my $item(@$configItems){
    if($item =~ /^(dir%.*%\[|\])$/){ #dont replace dir start/end items
      push @replacedConfigItems, $item;
    }else{
      my $replacementItem = $replacements{$item};
      push @replacedConfigItems, defined $replacementItem ? $replacementItem : $item;
    }
  }

  return @replacedConfigItems;
}

sub getAppNamesInDir($){
  my ($dir) = @_;
  my @desktopFiles = glob "$dir/*.desktop";
  my @appNames = map {/\/([^\/]+)\.desktop$/} @desktopFiles;
  return @appNames;
}

sub getValidAppNames(){
  my %okAppNames;
  %okAppNames = (%okAppNames, map {$_ => 1} getAppNamesInDir $allDir);
  %okAppNames = (%okAppNames, map {$_ => 1} getAppNamesInDir $activeDir);
  return sort keys %okAppNames;
}

sub addMissingPrefixes($$){
  my ($apps, $validAppNames) = @_;
  my %jollas;
  my %harbours;
  for my $valid(@$validAppNames){
    if($valid =~ m/^jolla-(.*)$/){
      $jollas{$1} = 1
    }
    if($valid =~ m/^harbour-(.*)$/){
      $harbours{$1} = 1
    }
  }
  my @newApps;
  for my $app(@$apps){
    if(defined $jollas{$app}){
      $app = "jolla-$app";
      print "prepending 'jolla-' to $app\n";
    }elsif(defined $harbours{$app}){
      $app = "harbour-$app";
      print "prepending 'harbour-' to $app\n";
    }
    push @newApps, $app;
  }
  return @newApps;
}

sub createAppDesktopFiles(@){
  my @appNames = @_;
  run "mkdir", "-p", $allDir;
  my @active = glob "$activeDir/*.desktop";

  run "rsync", "-avP", "--ignore-existing", @active, $allDir;
  run "rm -rf $activeDir";
  run "mkdir", "-p", $activeDir;
  for my $app(@appNames){
    run "cp", "-a", "$allDir/$app.desktop", $activeDir;
  }
  for my $pattern(@extraIncludePatterns){
    for my $file(glob "$allDir/$pattern"){
      run "cp", "-a", $file, $activeDir;
    }
  }

  if($USE_ALIENDALVIK){
    run "mkdir", "-p", $origLaunchersUserDir;

    my @userLaunchers = glob "$userDir/*.desktop";
    run "chattr", "-i", @userLaunchers;

    for my $appName(sort keys %androidLaunchers){
      my ($pkg, $intent, $iconPath) = @{$androidLaunchers{$appName}};
      my $pkgNameFmt = $pkg;
      $pkgNameFmt =~ s/\W/_/g;
      my @launchers = glob "$userDir/apkd_launcher_$pkgNameFmt-*.desktop";
      for my $launcher(@launchers){
        if(not -z $launcher){
          #backup desktop file, create empty placeholder, and prevent deletion
          run "mv", "--no-clobber", $launcher, "$origLaunchersUserDir/";
          run "rm", "-f", $launcher;
          run "touch", $launcher;
          run "chattr", "+i", $launcher;
        }
      }
    }
  }
}

sub writeLipstickConfig(@){
  my @config = @_;
  my $xml = "";
  $xml .= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  $xml .= "<Menu>\n";
  $xml .= "    <Name></Name>\n";
  my $depth = 1;
  my $indent = "    " x $depth;
  my %dirs;
  for my $configItem(@config){
    if($configItem =~ /^dir%(.*)%(.*)\[$/){
      my ($dirName, $icon) = ($1, $2);
      $icon = $defaultIconName if $icon eq "";
      my $dirFilePath = "$directoryFileDir/dir-$dirName.directory";
      $xml .= "$indent<Menu>\n";
      $xml .= "$indent    <Name>$dirName</Name>\n";
      $xml .= "$indent    <Directory>$dirFilePath</Directory>\n";
      $dirs{$dirFilePath} = $icon;
      $depth++;
      $indent = "    " x $depth;
    }elsif($configItem =~ /^\]$/){
      $depth--;
      $indent = "    " x $depth;
      $xml .= "$indent</Menu>\n"
    }else{
      $xml .= "$indent<Filename>$configItem.desktop</Filename>\n";
    }
  }
  $xml .= "</Menu>\n";

  run "rm -f $directoryFileDir/*.directory";
  for my $dirFilePath(sort keys %dirs){
    my $icon = $dirs{$dirFilePath};
    my $content = "[Desktop Entry]\nIcon=$icon\n";
    open FH, "> $dirFilePath" or die "Couldnt write to $dirFilePath\n";
    print FH $content;
    close FH;
    run "chown", "$user.$user", $dirFilePath;
  }

  open FH, "> $confFileDest" or die "Couldnt write to $confFileDest\n";
  print FH $xml;
  close FH;
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
