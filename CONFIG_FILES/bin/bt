#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub setControllerMode($);
sub fix();
sub setPowered($);
sub getPowered();
sub readFile($);
sub writeFile($$);
sub getRoot(@);

my $EXEC = basename $0;

my $BT_CONF_FILE = "/etc/bluetooth/main.conf";
my @CONTROLLER_MODES = qw(dual bredr le);
my $OK_CONTROLLER_MODES = join "|", @CONTROLLER_MODES;

my $CAR_MSG_FMT = "pair car in ui, allow connections, name=CAR, type=Toy and press enter";

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC get | --get | g | -g
    print bluetooth status

  $EXEC
  $EXEC on | --on | enable | --enable | enabled | --enabled
    restart bluetooth and bluetooth-rfkill-event
    enable bluetooth

  $EXEC off | --off | disable | --disable | disabled | --disabled
    restart bluetooth and bluetooth-rfkill-event
    disable bluetooth

  $EXEC toggle | --toggle | t | -t
    restart bluetooth and bluetooth-rfkill-event
    toggle bluetooth

  $EXEC --set-mode=CONTROLLER_MODE | --set-controller-mode=CONTROLLER_MODE
  $EXEC --set-mode CONTROLLER_MODE | --set-controller-mode CONTROLLER_MODE
  $EXEC mode CONTROLLER_MODE
    edit $BT_CONF_FILE, setting ControllerMode = CONTROLLER_MODE
    CONTROLLER_MODE
      one of: @CONTROLLER_MODES

  $EXEC car | --car
    -run: $EXEC off && $EXEC mode bredr && $EXEC on
    -wait for input after successfully pairing and allowing connections
      -$CAR_MSG_FMT
    -run: $EXEC off && $EXEC mode dual && $EXEC on
";

my $CMD_GET = "get";
my $CMD_ON = "on";
my $CMD_OFF = "off";
my $CMD_TOGGLE = "toggle";
my $CMD_MODE = "mode";
my $CMD_CAR = "car";

sub main(@){
  my $cmd = $CMD_GET;
  my $targetControllerMode = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(get|--get|g|-g)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(on|--on|enable|--enable|enabled|--enabled)$/){
      $cmd = $CMD_ON;
    }elsif($arg =~ /^(off|--off|disable|--disable|disabled|--disabled)$/){
      $cmd = $CMD_OFF;
    }elsif($arg =~ /^(toggle|--toggle|t|-t)$/){
      $cmd = $CMD_TOGGLE;
    }elsif($arg =~ /^(--set-mode|--set-controller-mode)=($OK_CONTROLLER_MODES)$/){
      $cmd = $CMD_MODE;
      $targetControllerMode = $2;
    }elsif($arg =~ /^(--set-mode|--set-controller-mode|mode)$/){
      $cmd = $CMD_MODE;
    }elsif($arg =~ /^(car|--car)$/){
      $cmd = $CMD_CAR;
    }elsif($arg =~ /^($OK_CONTROLLER_MODES)$/ and $cmd eq $CMD_MODE){
      $targetControllerMode = $1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  getRoot(@ARGV);

  if($cmd eq $CMD_GET){
    my $p = getPowered();
    print "powered: " . ($p ? "yes" : "no") . "\n";
  }elsif($cmd eq $CMD_ON){
    fix();
    setPowered(0);
    setPowered(1);
  }elsif($cmd eq $CMD_OFF){
    fix();
    setPowered(1);
    setPowered(0);
  }elsif($cmd eq $CMD_TOGGLE){
    my $p = getPowered();
    fix();
    setPowered($p);
    setPowered($p ? 0 : 1);
  }elsif($cmd eq $CMD_MODE){
    if(not defined $targetControllerMode){
      die "$USAGE\nERROR: missing CONTROLLER_MODE\n";
    }
    setControllerMode($targetControllerMode);
  }elsif($cmd eq $CMD_CAR){
    setPowered(0);
    setControllerMode("bredr");
    setPowered(1);
    print "\n";
    print "$CAR_MSG_FMT\n";
    <STDIN>;
    print "\n";
    setPowered(0);
    setControllerMode("dual");
    setPowered(1);
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub setControllerMode($){
  my ($targetControllerMode) = @_;
  my $old = `grep ControllerMode $BT_CONF_FILE`;
  my $conf = readFile $BT_CONF_FILE;
  if($conf !~ s/^\s*#?\s*ControllerMode\s*=.+$/ControllerMode = $targetControllerMode/m){
    die "ERROR: could not find ControllerMode in $BT_CONF_FILE\n";
  }
  writeFile $BT_CONF_FILE, $conf;
  my $new = `grep ControllerMode $BT_CONF_FILE`;
  print "$old=>\n$new";
}

sub fix(){
  system "systemctl stop bluetooth-rfkill-event";
  system "systemctl stop bluetooth";
  system "systemctl start bluetooth";
  system "systemctl start bluetooth-rfkill-event";
}

sub setPowered($){
  my ($powered) = @_;
  if($powered){
    system "connmanctl enable bluetooth";
  }else{
    system "connmanctl disable bluetooth";
  }
}

sub getPowered(){
  my @lines = `connmanctl technologies`;
  my $tech = {};
  my $curTechName = undef;
  for my $line(@lines){
    if($line =~ /^(\/.+)$/){
      $curTechName = $1;
      die "ERROR: dupe techs in connmanctl\n" if defined $$tech{$curTechName};
      $$tech{$curTechName} = {};
    }elsif($line =~ /^\s+(\w+)\s*=\s*(.+)$/){
      my ($key, $val) = ($1, $2);
      $$tech{$curTechName}{$key} = $val;
    }else{
      die "ERROR: malformed line in connmanctl:\n$line\n";
    }
  }

  for my $techName(sort keys %$tech){
    if($techName =~ /bluetooth/i){
      for my $att(sort keys %{$$tech{$techName}}){
        if($att =~ /powered/i){
          my $val = $$tech{$techName}{$att};
          if($val =~ /true/i){
            return 1;
          }elsif($val =~ /false/i){
            return 0;
          }
        }
      }
    }
  }

  die "ERROR: could not find bluetooth tech in connmanctl\n";
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "Could not read $file\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}

sub writeFile($$){
  my ($file, $contents) = @_;
  open FH, "> $file" or die "Could not write $file\n";
  print FH $contents;
  close FH;
}

sub getRoot(@){
  if(`whoami` ne "root\n"){
    exec "sudo", $0, @_;
  }
}

&main(@ARGV);
