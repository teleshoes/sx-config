#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep time);

my $EXEC = basename $0;
my $USER = "nemo";

my $APK_DIR = "/media/sdcard/phone/apks-waydroid";
my $SRC_OBB_DIR = "$APK_DIR/obb";
my $DEST_OBB_DIR = "/home/waydroid/data/media/obb";
my $USER_DIR = "/home/$USER/.local/share/waydroid";

my $WAYDROID_RUNNER_DESKTOP_FILE = "/usr/share/applications/waydroid-runner.desktop";

my $WD_CMD_FILE_PREFIX = "$USER_DIR/data/data/wd-cmd";;

my $SESSION_DELAY_MILLIS = 1000;
my $ENSURE_SESSION_TIMEOUT_MILLIS = 15000;

my $UI_READY_LOGCAT_LINE = "TELLING SURFACE FLINGER WE ARE BOOTED";

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC restart|--restart|r
    same as: $EXEC stop ; $EXEC start

  $EXEC start|--start|begin|--begin|b
    start waydroid
      -start container
      -run waydroid-runner

  $EXEC stop|--stop|end|--end|e
    stop waydroid
      -stop session
      -stop container
      -kill waydroid-sensord

  $EXEC --activate
    use invoker to switch lipstick window to waydroid-runner window

  $EXEC shell
    same as: sudo waydroid shell

  $EXEC shell ARG [ARG ARG...]
    create CMD_FILE=$WD_CMD_FILE_PREFIX-<MILLIS>
    write 'ARG ARG ARG...' to <CMD_FILE>
    run: sudo waydroid shell <CMD_FILE>
    remove <CMD_FILE>

  $EXEC launch APK_PREFIX
    if session is not started:
      start session as in $EXEC --start
      wait until shell is available
      wait until line appears in logcat:
        $UI_READY_LOGCAT_LINE

    use invoker to activate waydroid window

    get <PACKAGE_NAME>
      get APK_FILE=$APK_DIR/<APK_PREFIX>*.apk
        must match exactly one APK_FILE
      if APK_FILE is named <SHORTNAME>_<PACKAGE_NAME>_<VERSION>.apk:
        get PACKAGE=<PACKAGE_NAME>
      otherwise:
        use apk-info/aapt to fetch PACKAGE=`apk-info --package <APK_FILE>`

    run: sudo waydroid app launch <PACKAGE_NAME>

  $EXEC [APK_PREFIX]
  $EXEC install|--install|app|--app|--apk|--apk|apps|--apps|apks|--apks APK_PREFIX
    same as: $EXEC --install=<APK_PREFIX>
    ($APK_DIR/<APK_PREFIX>*.apk must match one or more apks)

  $EXEC --install|install|app|--app|apps|--apps|apk|apks
    same as: $EXEC --install=''
    (matches all available APKs)

  $EXEC --install=APK_PREFIX|--app=APK_PREFIX|--apk=APK_PREFIX
    run 'sudo waydroid app install $APK_DIR/<APK_PREFIX>*.apk'
    (if APK_PREFIX is empty, glob matches all available APKs)

  $EXEC obb | --obb
    sync $SRC_OBB_DIR/ to $DEST_OBB_DIR/
";

my $CMD_RESTART = "restart";
my $CMD_START = "start";
my $CMD_STOP = "stop";
my $CMD_ACTIVATE = "activate";
my $CMD_SHELL = "shell";
my $CMD_LAUNCH = "launch";
my $CMD_INSTALL = "install";
my $CMD_OBB = "obb";

sub waydroidShell(@);
sub ensureShell();
sub isShellUp();
sub waitForLogcatLine($);
sub ensureRunning();
sub isSessionRunning();
sub activateWaydroidWindow();
sub start();
sub stop();
sub getApksForPrefix($);
sub nowMillis();
sub run(@);
sub runQuiet(@);

sub main(@){
  my $cmd = undef;
  my $apkPrefix;
  my @shellArgs;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(restart|--restart|r)$/){
      $cmd = $CMD_RESTART;
    }elsif($arg =~ /^(start|--start|begin|--begin|b)$/){
      $cmd = $CMD_START;
    }elsif($arg =~ /^(stop|--stop|end|--end|e)$/){
      $cmd = $CMD_STOP;
    }elsif($arg =~ /^(--activate)$/){
      $cmd = $CMD_ACTIVATE;
    }elsif($arg =~ /^(shell)$/){
      $cmd = $CMD_SHELL;
      @shellArgs = @_;
      @_ = ();
    }elsif($arg =~ /^(launch)$/){
      $cmd = $CMD_LAUNCH;
    }elsif($arg =~ /^(?:--install|--app|--apk)=(.+)$/){
      $cmd = $CMD_INSTALL;
      $apkPrefix = $1;
    }elsif($arg =~ /^(?:--install|install|--apps?|apps?|--apks?|apks?)$/){
      $cmd = $CMD_INSTALL;
    }elsif(getApksForPrefix($arg) > 0 and (not defined $cmd or $cmd =~ /$CMD_INSTALL|$CMD_LAUNCH/)){
      if(not defined $cmd){
        $cmd = $CMD_INSTALL;
      }
      $apkPrefix = $arg;
    }elsif($arg =~ /^(obb|--obb)$/){
      $cmd = $CMD_OBB;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "ERROR: missing command\n" if not defined $cmd;

  if($cmd eq $CMD_RESTART){
    stop();
    start();
  }elsif($cmd eq $CMD_START){
    start();
  }elsif($cmd eq $CMD_STOP){
    stop();
  }elsif($cmd eq $CMD_ACTIVATE){
    activateWaydroidWindow();
  }elsif($cmd eq $CMD_SHELL){
    waydroidShell(@shellArgs);
  }elsif($cmd eq $CMD_LAUNCH){
    if(not isSessionRunning()){
      ensureRunning();
      waitForLogcatLine($UI_READY_LOGCAT_LINE);
    }
    activateWaydroidWindow();

    my @apks = getApksForPrefix($apkPrefix);
    if(@apks == 0){
      die "ERROR: no APKs match $APK_DIR/$apkPrefix*.apk\n";
    }elsif(@apks > 1){
      die "ERROR: too many APKs match $APK_DIR/$apkPrefix*.apk\n";
    }
    my $apk = $apks[0];

    my $pkg;
    if($apk =~ /^(?:.*\/)?([a-zA-Z0-9]+)_(.+)_([^_]+)\.apk$/){
      $pkg = $2;
      print "parsed from filename: packageName=$pkg\n";
    }else{
      $pkg = `apk-info --package $apk`;
      chomp $pkg;
      if($pkg !~ /\w/){
        die "ERROR: invalid intent fetched from `apk-info`\n";
      }
      print "fetched with apk-info: packageName=$pkg\n";
    }

    run "sudo", "waydroid", "app", "launch", $pkg;
  }elsif($cmd eq $CMD_INSTALL){
    ensureRunning();
    my @apks = getApksForPrefix($apkPrefix);
    if(@apks == 0){
      die "ERROR: no APKs match $APK_DIR/$apkPrefix*.apk\n";
    }
    for my $apk(@apks){
      run "sudo", "waydroid", "app", "install", $apk;
    }
  }elsif($cmd eq $CMD_OBB){
    run "sudo", "rsync", "-avP", "$SRC_OBB_DIR/", "$DEST_OBB_DIR/";
  }else{
    die "ERROR: unknown command: $cmd\n";
  }
}

sub waydroidShell(@){
  my @shellArgs = @_;
  if(@shellArgs == 0){
    exec "sudo", "waydroid", "shell";
  }else{
    my $nowMillis = nowMillis();
    my $cmdFile = "$WD_CMD_FILE_PREFIX-$nowMillis";
    open CMD, "|-", "sudo dd status=none of=$cmdFile"
      or die "ERROR: could not write $cmdFile\n$!\n";
    print CMD "@shellArgs\n";
    close CMD;
    runQuiet "sudo", "chmod", "+x", $cmdFile;

    my $androidCmdFile = $cmdFile;
    $androidCmdFile =~ s/$USER_DIR\//\//;

    my $outFile = "/tmp/waydroid-cmd-$nowMillis.out";
    runQuiet "sudo waydroid shell $androidCmdFile 2>&1 | tee $outFile";
    my $out = `cat $outFile`;

    runQuiet "sudo", "rm", $cmdFile;
    runQuiet "sudo", "rm", $outFile;
    return $out;
  }
}

sub ensureShell(){
  my $start = nowMillis();
  while(not isShellUp()){
    if(nowMillis() - $start > $ENSURE_SESSION_TIMEOUT_MILLIS){
      die "ERROR: ensure shell timed out after" . (nowMillis() - $start) . "ms\n";
    }
    print "shell is not available, sleeping for $SESSION_DELAY_MILLIS\n";
    sleep $SESSION_DELAY_MILLIS/1000.0;
  }
}

sub isShellUp(){
  my $out = waydroidShell("getprop", "ro.product.odm.brand");
  if($out =~ /waydroid/){
    return 1;
  }else{
    return 0;
  }
}

sub waitForLogcatLine($){
  my ($lineRegex) = @_;
  ensureShell();
  waydroidShell("logcat", "-e", $lineRegex, "-m", "1");
}

sub ensureRunning(){
  if(not isSessionRunning()){
    start();
  }
  my $start = nowMillis();
  while(not isSessionRunning()){
    if(nowMillis() - $start > $ENSURE_SESSION_TIMEOUT_MILLIS){
      die "ERROR: ensure session timed out after" . (nowMillis() - $start) . "ms\n";
    }
    print "session is not running, sleeping for $SESSION_DELAY_MILLIS\n";
    sleep $SESSION_DELAY_MILLIS/1000.0;
  }
}

sub isSessionRunning(){
  my $out = `sudo waydroid status`;
  if($out =~ /Session:\s*RUNNING/){
    return 1;
  }else{
    return 0;
  }
}

sub activateWaydroidWindow(){
  run "udo invoker --type=generic -F $WAYDROID_RUNNER_DESKTOP_FILE echo hello";
}

sub start(){
  run qw(sudo chmod 777 /var/lib/waydroid/);
  run qw(udo screen-daemon waydroid-container --start 0 0 sudo waydroid container start);
  run qw(udo screen-daemon waydroid-runner --start 0 0 waydroid-runner);
}
sub stop(){
  run qw(sudo waydroid session stop);
  run qw(sudo waydroid container stop);
  run qw(sudo pkill -9 -f waydroid-runner);
  run qw(sudo pkill -9 -f waydroid-sensord);

  run qw(udo screen-daemon waydroid-container --stop);
  run qw(udo screen-daemon waydroid-runner --stop);
  run qw(udo screen -wipe);

  run qw(sudo systemctl restart dbus-org.nemomobile.provisioning);
}

sub getApksForPrefix($){
  my ($prefix) = @_;
  $prefix = "" if not defined $prefix;
  $prefix =~ s/\.apk$//;

  my @files = grep {-f $_} glob "$APK_DIR/$prefix*.apk";
  return @files;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}
sub runQuiet(@){
  system @_;
}

&main(@ARGV);
