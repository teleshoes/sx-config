#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep time);

my $EXEC = basename $0;

my $APK_DIR = "/media/sdcard/phone/apks-waydroid";
my $SRC_OBB_DIR = "$APK_DIR/obb";
my $DEST_OBB_DIR = "/home/waydroid/data/media/obb";

my $SESSION_DELAY_MILLIS = 1000;
my $ENSURE_SESSION_TIMEOUT_MILLIS = 15000;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC restart|--restart|r
    same as: $EXEC stop ; $EXEC start

  $EXEC start|--start|begin|--begin|b
    start waydroid
      -start container
      -run waydroid-runner

  $EXEC stop|--stop|end|--end|e
    stop waydroid
      -stop session
      -stop container
      -kill waydroid-sensord

  $EXEC [APK_PREFIX]
  $EXEC install|--install|app|--app|--apk|--apk|apps|--apps|apks|--apks APK_PREFIX
    same as: $EXEC --install=<APK_PREFIX>
    ($APK_DIR/<APK_PREFIX>*.apk must match one or more apks)

  $EXEC --install|install|app|--app|apps|--apps|apk|apks
    same as: $EXEC --install=''
    (matches all available APKs)

  $EXEC --install=APK_PREFIX|--app=APK_PREFIX|--apk=APK_PREFIX
    run 'sudo waydroid app install $APK_DIR/<APK_PREFIX>*.apk'
    (if APK_PREFIX is empty, glob matches all available APKs)

  $EXEC obb | --obb
    sync $SRC_OBB_DIR/ to $DEST_OBB_DIR/
";

my $CMD_RESTART = "restart";
my $CMD_START = "start";
my $CMD_STOP = "stop";
my $CMD_INSTALL = "install";
my $CMD_OBB = "obb";

sub start();
sub stop();
sub getApksForPrefix($);
sub run(@);

sub main(@){
  my $cmd = undef;
  my $apkPrefix;
  my @shellArgs;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(restart|--restart|r)$/){
      $cmd = $CMD_RESTART;
    }elsif($arg =~ /^(start|--start|begin|--begin|b)$/){
      $cmd = $CMD_START;
    }elsif($arg =~ /^(stop|--stop|end|--end|e)$/){
      $cmd = $CMD_STOP;
    }elsif($arg =~ /^(?:--install|--app|--apk)=(.+)$/){
      $cmd = $CMD_INSTALL;
      $apkPrefix = $1;
    }elsif($arg =~ /^(?:--install|install|--apps?|apps?|--apks?|apks?)$/){
      $cmd = $CMD_INSTALL;
    }elsif(getApksForPrefix($arg) > 0 and (not defined $cmd or $cmd eq $CMD_INSTALL)){
      $cmd = $CMD_INSTALL;
      $apkPrefix = $arg;
    }elsif($arg =~ /^(obb|--obb)$/){
      $cmd = $CMD_OBB;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "ERROR: missing command\n" if not defined $cmd;

  if($cmd eq $CMD_RESTART){
    stop();
    start();
  }elsif($cmd eq $CMD_START){
    start();
  }elsif($cmd eq $CMD_STOP){
    stop();
  }elsif($cmd eq $CMD_INSTALL){
    ensureRunning();
    my @apks = getApksForPrefix($apkPrefix);
    if(@apks == 0){
      die "ERROR: no APKs match $APK_DIR/$apkPrefix*.apk\n";
    }
    for my $apk(@apks){
      run "sudo", "waydroid", "app", "install", $apk;
    }
  }elsif($cmd eq $CMD_OBB){
    run "sudo", "rsync", "-avP", "$SRC_OBB_DIR/", "$DEST_OBB_DIR/";
  }else{
    die "ERROR: unknown command: $cmd\n";
  }
}

sub ensureRunning(){
  if(not isSessionRunning()){
    start();
  }
  my $start = nowMillis();
  while(not isSessionRunning()){
    if(nowMillis() - $start > $ENSURE_SESSION_TIMEOUT_MILLIS){
      die "ERROR: ensure session timed out after" . (nowMillis() - $start) . "ms\n";
    }
    print "session is not running, sleeping for $SESSION_DELAY_MILLIS\n";
    sleep $SESSION_DELAY_MILLIS/1000.0;
  }
}

sub isSessionRunning(){
  my $out = `sudo waydroid status`;
  if($out =~ /Session:\s*RUNNING/){
    return 1;
  }else{
    return 0;
  }
}

sub start(){
  run qw(sudo chmod 777 /var/lib/waydroid/);
  run qw(udo screen-daemon waydroid-container --start 0 0 sudo waydroid container start);
  run qw(udo screen-daemon waydroid-runner --start 0 0 waydroid-runner);
}
sub stop(){
  run qw(sudo waydroid session stop);
  run qw(sudo waydroid container stop);
  run qw(sudo pkill -9 -f waydroid-runner);
  run qw(sudo pkill -9 -f waydroid-sensord);

  run qw(udo screen-daemon waydroid-container --stop);
  run qw(udo screen-daemon waydroid-runner --stop);
  run qw(udo screen -wipe);

  run qw(sudo systemctl restart dbus-org.nemomobile.provisioning);
}

sub getApksForPrefix($){
  my ($prefix) = @_;
  $prefix = "" if not defined $prefix;
  my @files = grep {-f $_} glob "$APK_DIR/$prefix*.apk";
  return @files;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
