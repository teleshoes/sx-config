#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep time);

my $EXEC = basename $0;
my $USER = "nemo";

my $APK_DIR = "/media/sdcard/phone/apks-waydroid";
my $SRC_OBB_DIR = "$APK_DIR/obb";
my $DEST_OBB_DIR = "/home/waydroid/data/media/obb";
my $USER_DIR = "/home/$USER/.local/share/waydroid";

my $WAYDROID_RUNNER_DESKTOP_FILE = "/usr/share/applications/waydroid-runner.desktop";

my $WD_CMD_FILE_PREFIX = "$USER_DIR/data/data/wd-cmd";

my $SESSION_DELAY_MILLIS = 1000;
my $ENSURE_SESSION_TIMEOUT_MILLIS = 15000;

my $UI_READY_LOGCAT_LINE = "TELLING SURFACE FLINGER WE ARE BOOTED";

my @TEST_SHELL_CMD = qw(getprop ro.product.odm.brand);
my $TEST_SHELL_OUTPUT_REGEX = "waydroid";

my $USAGE = "Usage:
  $EXEC help|--help|-h|h
    show this message

  $EXEC restart|--restart|-r|r
    same as: $EXEC stop ; $EXEC start

  $EXEC start|--start
  $EXEC begin|--begin|-b|b
    start waydroid
      -start container in screen-daemon session
      -run waydroid-runner in screen-daemon session
      -run `$EXEC --port-forward` in screen-daemon session

  $EXEC stop|--stop
  $EXEC end|--end|-e|e
    stop waydroid
      -stop session
      -stop container
      -kill waydroid-sensord

  $EXEC --port-forward
  $EXEC port|--port|-p|p
    wait for shell+UI as in:
      $EXEC --wait-ui
    get ANDROID_IP (e.g.: 192.168.250.112) as in:
      $EXEC shell ip -4 addr show eth0 \\
        | grep inet \\
        | sed 's/^ *inet *//' \\
        | sed 's/ .*$//' \\
        | sed 's/\/24$//'
    forward port 5555 localhost => ANDROID_IP as in:
      ssh -t -t -R 5555:<ANDROID_IP>:5555 localhost

  $EXEC activate|--activate|-a|a
    use invoker to switch lipstick window to waydroid-runner window

  $EXEC shell|--shell
  $EXEC execute|--execute|-x|x
    run: sudo waydroid shell

  $EXEC shell|--shell ARG [ARG ARG...]
  $EXEC execute|--execute|-x|x ARG [ARG ARG...]
    create CMD_FILE=$WD_CMD_FILE_PREFIX-<MILLIS>
    write 'ARG ARG ARG...' to <CMD_FILE>
    run: sudo waydroid shell <CMD_FILE> | tee <TMP_OUTFILE>
    remove <TMP_OUTFILE>
    remove <CMD_FILE>

  $EXEC --wait-ui
  $EXEC wait|--wait|-w|w
    wait until shell is available
      repeatedly run '@TEST_SHELL_CMD'
      until output matches '$TEST_SHELL_OUTPUT_REGEX'
      or timeout (${ENSURE_SESSION_TIMEOUT_MILLIS}ms);
    wait until line appears in logcat (using -e and -m):
      $UI_READY_LOGCAT_LINE

  $EXEC launch|--launch|-l|l LAUNCH_ARG
    same as: $EXEC --launch=LAUNCH_ARG

  $EXEC --launch=LAUNCH_ARG
    if $APK_DIR/<LAUNCH_ARG>*.apk matches exactly one file:
      run: $EXEC --launch-apk=<LAUNCH_ARG>
    otherwise:
      run: $EXEC --launch-intent=<LAUNCH_ARG>

  $EXEC --launch-apk=APK_ARG
    get <INTENT>:
      get <APK_FILE>:
        if <APK_ARG> is an asbolute or relative file:
          APK_FILE=<APK_ARG>
        if $APK_DIR/<APK_ARG> is a file:
          APK_FILE=$APK_DIR/<APK_ARG>
        otherwise:
          APK_FILE=$APK_DIR/<APK_ARG>*.apk
          (must match exactly one APK_FILE)
      use apk-info/aapt to fetch:
        INTENT=`apk-info --intent <APK_FILE>`
    same as: $EXEC --launch-intent=INTENT

  $EXEC --launch-intent=INTENT
    if session is not started:
      start session as in $EXEC --start
      run: $EXEC --wait-ui
    use invoker to activate waydroid window
    run: $EXEC shell am start <INTENT>

  $EXEC install|--install|-i|i APK_ARG
    same as: $EXEC --install=<APK_ARG>

  $EXEC --install|install|-i|i
    same as: $EXEC --install=''
    (matches all available APKs)

  $EXEC --install=APK_ARG
    get <APK_FILE_LIST>:
      if <APK_ARG> is an asbolute or relative file:
        APK_FILE_LIST=<APK_ARG>
      if $APK_DIR/<APK_ARG> is a file:
        APK_FILE_LIST=$APK_DIR/<APK_ARG>
      otherwise:
        APK_FILE_LIST=$APK_DIR/<APK_ARG>*.apk
        (if APK_ARG is empty, glob matches all available APKs)
    run 'sudo waydroid app install <APK_FILE_LIST>'

  $EXEC obb|--obb|-o|o
    sync $SRC_OBB_DIR/ to $DEST_OBB_DIR/

  synopsis:
    h Help          =
    r Restart       =
    b start/Begin   =
    e stop/End      =
    p Port-forward  =
    a Activate      =
    x eXecute/shell = [ARG ARG ..]
    w Wait-ui       =
    l Launch        = APK_ARG | INTENT
    i Install       = APK_ARG
    o Obb           =
";

my $CMD_RESTART = "restart";
my $CMD_START = "start";
my $CMD_STOP = "stop";
my $CMD_PORT_FORWARD = "port-forward";
my $CMD_ACTIVATE = "activate";
my $CMD_SHELL = "shell";
my $CMD_WAIT_UI = "wait-ui";
my $CMD_LAUNCH = "launch";
my $CMD_INSTALL = "install";
my $CMD_OBB = "obb";

sub ensureAndroidFullyUp();
sub waydroidShell(@);
sub ensureShell();
sub isShellUp();
sub waitForLogcatLine($);
sub ensureRunning();
sub isSessionRunning();
sub isUIWindowOpen();
sub activateWaydroidWindow();
sub start();
sub stop();
sub getIntentForMatchingApk($);
sub getMatchingApks($);
sub nowMillis();
sub run(@);
sub runQuiet(@);

sub main(@){
  my $cmd = undef;
  my $apkArg;
  my $launchIntent;
  my @shellArgs;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(help|--help|-h|h)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(restart|--restart|-r|r)$/){
      $cmd = $CMD_RESTART;
    }elsif($arg =~ /^(start|--start|begin|--begin|-b|b)$/){
      $cmd = $CMD_START;
    }elsif($arg =~ /^(stop|--stop|end|--end|-e|e)$/){
      $cmd = $CMD_STOP;
    }elsif($arg =~ /^(--port-forward|port|--port|-p|p)$/){
      $cmd = $CMD_PORT_FORWARD;
    }elsif($arg =~ /^(activate|--activate|-a|a)$/){
      $cmd = $CMD_ACTIVATE;
    }elsif($arg =~ /^(shell|--shell|execute|--execute|-x|x)$/){
      $cmd = $CMD_SHELL;
      @shellArgs = @_;
      @_ = ();
    }elsif($arg =~ /^(--wait-ui|wait|--wait|-w|w)$/){
      $cmd = $CMD_WAIT_UI;
    }elsif($arg =~ /^--launch=(.+)$/){
      $cmd = $CMD_LAUNCH;
      my $launchArg = $1;
      if(getMatchingApks($launchArg) == 1){
        $apkArg = $launchArg;
      }else{
        $launchIntent = $launchArg;
      }
    }elsif($arg =~ /^--launch-apk=(.+)$/){
      $cmd = $CMD_LAUNCH;
      $apkArg = $1;
    }elsif($arg =~ /^--launch-intent=(.+)$/){
      $cmd = $CMD_LAUNCH;
      $launchIntent = $1;
    }elsif($arg =~ /^(launch|--launch|-l|l)$/){
      die "ERROR: missing LAUNCH_ARG\n" if @_ < 1;
      $cmd = $CMD_LAUNCH;
      my $launchArg = shift;
      if(getMatchingApks($launchArg) == 1){
        $apkArg = $launchArg;
      }else{
        $launchIntent = $launchArg;
      }
    }elsif($arg =~ /^--install=(.+)$/){
      $cmd = $CMD_INSTALL;
      $apkArg = $1;
    }elsif($arg =~ /^(install|--install|-i|i)$/){
      $cmd = $CMD_INSTALL;
      if(@_ > 0){
        $apkArg = shift;
      }else{
        $apkArg = "";
      }
    }elsif($arg =~ /^(obb|--obb|-o|o)$/){
      $cmd = $CMD_OBB;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "ERROR: missing command\n" if not defined $cmd;

  if($cmd eq $CMD_RESTART){
    stop();
    start();
  }elsif($cmd eq $CMD_START){
    start();
  }elsif($cmd eq $CMD_STOP){
    stop();
  }elsif($cmd eq $CMD_PORT_FORWARD){
    waitForLogcatLine($UI_READY_LOGCAT_LINE);
    my $androidIP = getAndroidIP();
    exec "ssh", "-t", "-t", "-R", "5555:$androidIP:5555", "localhost";
  }elsif($cmd eq $CMD_ACTIVATE){
    activateWaydroidWindow();
  }elsif($cmd eq $CMD_SHELL){
    waydroidShell(@shellArgs);
  }elsif($cmd eq $CMD_WAIT_UI){
    waitForLogcatLine($UI_READY_LOGCAT_LINE);
    print "\n";
  }elsif($cmd eq $CMD_LAUNCH){
    my $intent;
    if(defined $launchIntent){
      $intent = $launchIntent;
    }elsif(defined $apkArg){
      $intent = getIntentForMatchingApk($apkArg);
    }else{
      die "ERROR: launch cmd requires APK_ARG or LAUNCH_INTENT\n";
    }

    ensureAndroidFullyUp();
    activateWaydroidWindow();

    waydroidShell("am", "start", $intent);
    print "\n";
  }elsif($cmd eq $CMD_INSTALL){
    ensureRunning();
    my @apks = getMatchingApks($apkArg);
    if(@apks == 0){
      die "ERROR: no APKs found for '$apkArg'\n";
    }
    for my $apk(@apks){
      run "sudo", "waydroid", "app", "install", $apk;
    }
  }elsif($cmd eq $CMD_OBB){
    run "sudo", "rsync", "-avP", "$SRC_OBB_DIR/", "$DEST_OBB_DIR/";
  }else{
    die "ERROR: unknown command: $cmd\n";
  }
}

sub ensureAndroidFullyUp(){
  if(not isUIWindowOpen()){
    stop();
  }
  if(not isSessionRunning()){
    ensureRunning();
    waitForLogcatLine($UI_READY_LOGCAT_LINE);
  }
}

sub waydroidShell(@){
  my @shellArgs = @_;
  if(@shellArgs == 0){
    exec "sudo", "waydroid", "shell";
  }else{
    my $nowMillis = nowMillis();
    my $cmdFile = "$WD_CMD_FILE_PREFIX-$nowMillis";
    open CMD, "|-", "sudo dd status=none of=$cmdFile"
      or die "ERROR: could not write $cmdFile\n$!\n";
    print CMD "@shellArgs\n";
    close CMD;
    runQuiet "sudo", "chmod", "+x", $cmdFile;

    my $androidCmdFile = $cmdFile;
    $androidCmdFile =~ s/$USER_DIR\//\//;

    my $outFile = "/tmp/waydroid-cmd-$nowMillis.out";
    runQuiet "sudo waydroid shell $androidCmdFile 2>&1 | tee $outFile";
    my $out = `cat $outFile`;

    runQuiet "sudo", "rm", $cmdFile;
    runQuiet "sudo", "rm", $outFile;
    return $out;
  }
}

sub getAndroidIP(){
  my $out = waydroidShell("ip -4 addr show eth0");
  print "\n";
  if($out =~ /^\s*inet\s+(\d+\.\d+\.\d+\.\d+)(?:\/24)?\s*/m){
    return $1;
  }else{
    die "ERROR: could not get android ip with ip -4 addr show eth0\n";
  }
}

sub ensureShell(){
  my $start = nowMillis();
  while(not isShellUp()){
    if(nowMillis() - $start > $ENSURE_SESSION_TIMEOUT_MILLIS){
      die "ERROR: ensure shell timed out after" . (nowMillis() - $start) . "ms\n";
    }
    print "shell is not available, sleeping for $SESSION_DELAY_MILLIS\n";
    sleep $SESSION_DELAY_MILLIS/1000.0;
  }
}

sub isShellUp(){
  my $out = waydroidShell(@TEST_SHELL_CMD);
  print "\n";
  if($out =~ /$TEST_SHELL_OUTPUT_REGEX/){
    return 1;
  }else{
    return 0;
  }
}

sub waitForLogcatLine($){
  my ($lineRegex) = @_;
  ensureShell();
  waydroidShell("logcat", "-e", $lineRegex, "-m", "1");
}

sub ensureRunning(){
  if(not isSessionRunning()){
    start();
  }
  my $start = nowMillis();
  while(not isSessionRunning()){
    if(nowMillis() - $start > $ENSURE_SESSION_TIMEOUT_MILLIS){
      die "ERROR: ensure session timed out after" . (nowMillis() - $start) . "ms\n";
    }
    print "session is not running, sleeping for $SESSION_DELAY_MILLIS\n";
    sleep $SESSION_DELAY_MILLIS/1000.0;
  }
}

sub isSessionRunning(){
  my $out = `sudo waydroid status`;
  if($out =~ /Session:\s*RUNNING/){
    return 1;
  }else{
    return 0;
  }
}

sub isUIWindowOpen(){
  my $pid = `pgrep waydroid-runner`;
  my $exitCode = $?;
  if($exitCode == 0 and $pid =~ /^\d+$/){
    return 1;
  }else{
    return 0;
  }
}

sub activateWaydroidWindow(){
  run "udo invoker --type=generic -F $WAYDROID_RUNNER_DESKTOP_FILE echo hello";
}

sub start(){
  run qw(sudo chmod 777 /var/lib/waydroid/);
  run qw(udo screen-daemon waydroid-container --start 0 0 sudo waydroid container start);
  run qw(udo screen-daemon waydroid-runner --start 0 0 waydroid-runner);
  run qw(udo screen-daemon waydroid-port-forward --start 0 0 wd --port-forward);
}
sub stop(){
  run qw(sudo waydroid session stop);
  run qw(sudo waydroid container stop);
  run qw(sudo pkill -9 -f waydroid-runner);
  run qw(sudo pkill -9 -f waydroid-sensord);

  run qw(udo screen-daemon waydroid-container --stop);
  run qw(udo screen-daemon waydroid-runner --stop);
  run qw(udo screen -wipe);

  run qw(sudo systemctl restart dbus-org.nemomobile.provisioning);
}

sub getIntentForMatchingApk($){
  my ($apkArg) = @_;
  my @apks = getMatchingApks($apkArg);
  if(@apks == 0){
    die "ERROR: no APKs found for '$apkArg'\n";
  }elsif(@apks > 1){
    die "ERROR: too many APKs match '$apkArg': @apks\n";
  }
  my $apk = $apks[0];

  my $intent = `apk-info --intent $apk`;
  chomp $intent;
  if($intent !~ /\w/){
    die "ERROR: invalid intent fetched from `apk-info`\n";
  }
  print "fetched with apk-info: intent=$intent\n";
  return $intent;
}

sub getMatchingApks($){
  my ($apkArg) = @_;
  $apkArg = "" if not defined $apkArg;
  if(-f $apkArg){
    return $apkArg;
  }
  if(-f "$APK_DIR/$apkArg"){
    return "$APK_DIR/$apkArg";
  }

  my @files = grep {-f $_} glob "$APK_DIR/$apkArg*.apk";
  return @files;
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}
sub runQuiet(@){
  system @_;
}

&main(@ARGV);
