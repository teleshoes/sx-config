#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename dirname);

sub readConf();
sub applySdcardConf($);
sub run(@);

my $USER = "nemo";
my $SRC_MNT_BASE_DIR = "/run/media/$USER";
my $DEST_MNT_BASE_DIR = "/media/sdcard";

my $SDCARDS_CONF_FILE = "/etc/sdcards.conf";

my $CMD_APPLY = "apply";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --apply
    for each SDCARD_NAME in $SDCARDS_CONF_FILE:
      -extract UUID from <SDCARD_NAME>.uuid=<UUID>
      -extract MODE from <SDCARD_NAME>.mode=<MODE>
      -get SRC_MOUNT_POINT and DEST_MOUNT_POINT to remount
        SRC_MOUNT_POINT = $SRC_MNT_BASE_DIR/<UUID>
        DEST_MOUNT_POINT = $DEST_MNT_BASE_DIR/<SDCARD_NAME>
      -if MODE = remount:
        -if <DEST_MOUNT_POINT> is a mountpoint:
          -do nothing
        -otherwise:
          -make parent mountpoint private
          -mount --move <SRC_MOUNT_POINT> <DEST_MOUNT_POINT>
          -make parent mountpoint shared
      -if MODE = symlink:
        -if <DEST_MOUNT_POINT> is a symlink to <SRC_MOUNT_POINT>:
          -do nothing
        -otherwise:
          -remove <DEST_MOUNT_POINT> and replace with a symlink to <SRC_MOUNT_POINT>

  $EXEC --loop
    -perform `$EXEC --apply` every 30s
";

sub main(@){
  my $cmd = $CMD_APPLY;
  my $isLoop = 0;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--apply)$/){
      $cmd = $CMD_APPLY;
    }elsif($arg =~ /^(--loop)$/){
      $isLoop = 1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_APPLY){
    my $entries = readConf();
    if($isLoop){
      while(1){
        system "date";
        applySdcardConf($entries);
        sleep 30;
      }
    }else{
      applySdcardConf($entries);
    }
  }else{
    die "ERROR: unknown cmd $cmd\n";
  }
}

sub readConf(){
  my $entries = {};
  if(-e $SDCARDS_CONF_FILE){
    open my $fh, "<", $SDCARDS_CONF_FILE
      or die "ERROR: could not read $SDCARDS_CONF_FILE\n$!\n";
    my @lines = <$fh>;
    close $fh;
    for my $line(@lines){
      if($line =~ /^\s*(\w+)\.(\w+)\s*=\s*(.*)?\s*$/){
        my ($name, $field, $val) = ($1, $2, $3);
        $$entries{$name} = {} if not defined $$entries{$name};
        $$entries{$name}{$field} = $val;
      }
    }
  }
  return $entries;
}

sub applySdcardConf($){
  my ($entries) = @_;
  for my $name(sort keys %$entries){
    print "\n$name\n";
    my $uuid = $$entries{$name}{uuid};
    my $mode = $$entries{$name}{mode};
    if(not defined $uuid or not defined $mode){
      die "ERROR: malformed/missing config for $name\n"
    }
    my $srcMountPoint = "$SRC_MNT_BASE_DIR/$uuid";
    my $destMountPoint = "$DEST_MNT_BASE_DIR/$name";
    if($mode eq "remount"){
      my $isDestMountpoint = `mountpoint '$destMountPoint' 2>/dev/null`;
      if(not -l $destMountPoint and $isDestMountpoint =~ /is a mountpoint/){
        print "$destMountPoint is already a mountpoint\n";
      }else{
        run "sudo rmdir $destMountPoint" if -d $destMountPoint;
        run "sudo rm -f $destMountPoint" if -e $destMountPoint;
        die "ERROR: could not remove $destMountPoint\n" if -e $destMountPoint;
        run "sudo mkdir -p $destMountPoint";

        die "ERROR: could not create $destMountPoint\n" if not -d $destMountPoint;

        my $parentDir = dirname $srcMountPoint;
        my $parentMountPoint = `findmnt -n -o TARGET --target "$parentDir"`;
        chomp $parentMountPoint;

        run "sudo", "mount", "--make-private", $parentMountPoint;
        run "sudo", "mount", "--move", $srcMountPoint, $destMountPoint;
        run "sudo", "mount", "--make-shared", $parentMountPoint;

        $isDestMountpoint = `mountpoint '$destMountPoint' 2>/dev/null`;

        if($isDestMountpoint =~ /is a mountpoint/){
          print "ran mount --move for $srcMountPoint => $destMountPoint\n";
        }else{
          die "ERROR: failed to re-mount $srcMountPoint\n";
        }
      }
    }elsif($mode eq "symlink"){
      my $link = readlink $destMountPoint;
      if(-l $destMountPoint and $link eq $srcMountPoint){
        print "$destMountPoint already symlink to $srcMountPoint\n";
      }else{
        run "sudo mkdir -p $DEST_MNT_BASE_DIR";
        run "sudo", "rm", "-f", $destMountPoint if -l $destMountPoint;
        run "sudo", "rmdir", $destMountPoint if -d $destMountPoint;
        run "sudo", "rm", "-f", $destMountPoint if -e $destMountPoint;
        run "sudo", "ln", "-s", $srcMountPoint, $destMountPoint;
      }
    }else{
      die "ERROR: unknown mode $mode\n";
    }
  }
}

sub run(@){
  print "@_\n";
  system @_;
  die "ERROR: cmd '@_' failed\n$!\n" if $? != 0;
}

&main(@ARGV);
