#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename dirname);

sub moveSdcard();

my $USER = "nemo";
my $SRC_MNT_BASE_DIR = "/run/media/$USER";
my $DEST_MNT_BASE_DIR = "/media/sdcard";

my $SDCARDS_CONF_FILE = "/etc/sdcards.conf";

my $NAME;
my $UUID;
my $CONF = `cat $SDCARDS_CONF_FILE`;
if($CONF =~ /^(\w+)\.uuid=(.+)$/){
  $NAME = $1;
  $UUID = $2;
}

my $CMD_APPLY = "apply";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC
  $EXEC --apply
    -get SRC_MOUNT_POINT and DEST_MOUNT_POINT to remount
      SRC_MOUNT_POINT=$SRC_MNT_BASE_DIR/$UUID
      DEST_MOUNT_POINT=$DEST_MNT_BASE_DIR/$NAME
    -if <DEST_MOUNT_POINT> is a mountpoint:
      -do nothing
    -otherwise:
      -make parent mountpoint private
      -mount --move <SRC_MOUNT_POINT> <DEST_MOUNT_POINT>
      -make parent mountpoint shared

  $EXEC --loop
    -perform `$EXEC --apply` every 30s
";

sub main(@){
  my $cmd = $CMD_APPLY;
  my $isLoop = 0;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--apply)$/){
      $cmd = $CMD_APPLY;
    }elsif($arg =~ /^(--loop)$/){
      $isLoop = 1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_APPLY){
    if($isLoop){
      while(1){
        system "date";
        moveSdcard();
        sleep 30;
      }
    }else{
      moveSdcard();
    }
  }else{
    die "ERROR: unknown cmd $cmd\n";
  }
}

sub moveSdcard(){
  my $srcMountPoint = "$SRC_MNT_BASE_DIR/$UUID";
  my $destMountPoint = "$DEST_MNT_BASE_DIR/$NAME";

  my $isDestMountpoint = `mountpoint '$destMountPoint' 2>/dev/null`;
  if(not -l $destMountPoint and $isDestMountpoint =~ /is a mountpoint/){
    print "$destMountPoint is already a mountpoint\n";
  }else{
    system "sudo rmdir $destMountPoint" if -d $destMountPoint;
    system "sudo rm -f $destMountPoint" if -e $destMountPoint;
    die "ERROR: could not remove $destMountPoint\n" if -e $destMountPoint;
    system "sudo mkdir -p $destMountPoint";

    die "ERROR: could not create $destMountPoint\n" if not -d $destMountPoint;

    my $parentDir = dirname $srcMountPoint;
    my $parentMountPoint = `findmnt -n -o TARGET --target "$parentDir"`;
    chomp $parentMountPoint;

    system "sudo", "mount", "--make-private", $parentMountPoint;
    system "sudo", "mount", "--move", $srcMountPoint, $destMountPoint;
    system "sudo", "mount", "--make-shared", $parentMountPoint;

    $isDestMountpoint = `mountpoint '$destMountPoint' 2>/dev/null`;

    if($isDestMountpoint =~ /is a mountpoint/){
      print "ran mount --move for $srcMountPoint => $destMountPoint\n";
    }else{
      die "ERROR: failed to re-mount $srcMountPoint\n";
    }
  }
}

&main(@ARGV);
