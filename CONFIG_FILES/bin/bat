#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub readCapacity();
sub isPSM();
sub setPSM($);

my $CAPACITY_DEV = "/sys/class/power_supply/battery/capacity";

my $EXEC = basename $0;

my $ACTION_GET = "get";
my $ACTION_ON = "on";
my $ACTION_OFF = "off";
my $ACTION_TOGGLE = "toggle";

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
  $EXEC -g | --get
    show the current battery capacity from $CAPACITY_DEV

  $EXEC --psm get | psm get
    get forced psm status with `mcetool`
    print 'enabled' or 'disabled'

  $EXEC --psm on | psm on
    enable forced psm with `mcetool -F`

  $EXEC --psm off | psm off
    disable forced psm with `mcetool -F`

  $EXEC --psm | psm
  $EXEC --psm toggle | psm toggle
    if forced psm is enabled:
      same as: $EXEC --psm off
    otherwise:
      same as: $EXEC --psm on
";

my $CMD_GET = "get";
my $CMD_PSM_GET = "psm-get";
my $CMD_PSM_SET = "psm-set";

sub main(@){
  my $cmd = $CMD_GET;
  my $actionArg = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(--psm|psm)$/){
      if(@_ > 0 and $_[0] =~ /^($ACTION_GET|$ACTION_ON|$ACTION_OFF|$ACTION_TOGGLE)$/){
        $actionArg = shift @_;
      }else{
        $actionArg = $ACTION_TOGGLE;
      }

      if($actionArg eq $ACTION_GET){
        $cmd = $CMD_PSM_GET;
      }else{
        $cmd = $CMD_PSM_SET;
      }
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($cmd eq $CMD_GET){
    print readCapacity() . "\n";
  }elsif($cmd eq $CMD_PSM_GET){
    print isPSM() ? "enabled\n" : "disabled\n";
  }elsif($cmd eq $CMD_PSM_SET){
    $actionArg = isPSM() ? $ACTION_OFF : $ACTION_ON if $actionArg eq $ACTION_TOGGLE;
    my $val = $actionArg eq $ACTION_ON ? 1 : 0;
    setPSM($val);
  }else{
    die "ERROR: unknown cmd $cmd\n";
  }
}

sub readCapacity(){
  my $out = `cat $CAPACITY_DEV 2>/dev/null`;
  chomp $out;
  if($out =~ /^(\d+)$/){
    return $1;
  }else{
    die "ERROR: could not read $CAPACITY_DEV\n";
  }
}

sub isPSM(){
  my $out = `mcetool`;
  my $status = "";
  $status = $1 if $out =~ /^Forced power saving mode:\s*(enabled|disabled)$/m;
  if($status eq "enabled"){
    return 1;
  }elsif($status eq "disabled"){
    return 0;
  }else{
    die "ERROR: could not read PSM status\n";
  }
}

sub setPSM($){
  my ($isPSM) = @_;
  system "mcetool", "-F", ($isPSM ? "enabled" : "disabled");
}

&main(@ARGV);
