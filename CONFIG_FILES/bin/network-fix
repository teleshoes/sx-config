#!/usr/bin/perl
use strict;
use warnings;

sub checkReadyForRestart($);
sub isActiveVoiceCall();
sub isScreenLocked();
sub readProc(@);

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS]
    restart ofono

  OPTS
    -n | --no-force | no-force | -m | --maybe | maybe
      do not restart ofono if screen is unlocked, OR a voice call is active
      (only restart when screen is locked and there is no voice call)

    -f | --force | force
      (this is the default)
      restart ofono regardless of current state

    --wait=WAIT_MILLIS | --wait-millis=WAIT_MILLIS
      delay WAIT_MILLIS milliseconds before restarting
      checks if ready for restart before AND after waiting
      if WAIT_MILLIS is 0, check once and do not sleep
        -cancel restart and exit if not ready
        -sleep WAIT_MILLIS milliseconds
        -cancel restart and exit if not ready
        -restart ofono
";

sub main(@){
  my $force = 1;
  my $waitMillis = 0;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-n|--no-force|no-force|-m|--maybe|maybe)$/){
      $force = 0;
    }elsif($arg =~ /^(-f|--force|force)$/){
      $force = 1;
    }elsif($arg =~ /^(?:--wait|--wait-millis)=(\d+)$/){
      $waitMillis = $1;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  my $restart = checkReadyForRestart($force);

  if($restart and $waitMillis > 0){
    print "sleeping for $waitMillis millis\n";
    sleep ($waitMillis / 1000.0);
    $restart = checkReadyForRestart($force);
  }

  if($restart){
    system "date";
    print "RESTARTING OFONO\n";
    system "sudo", "systemctl", "restart", "ofono";
    system "update-status-led";
  }
}

sub checkReadyForRestart($){
  my ($force) = @_;

  my $restart = 0;
  if($force){
    $restart = 1;
  }elsif(not isScreenLocked()){
    print "skipping: screen not locked\n";
    $restart = 0;
  }elsif(isActiveVoiceCall()){
    print "skipping: active voice call\n";
    $restart = 0;
  }else{
    $restart = 1;
  }

  return $restart;
}

sub isActiveVoiceCall(){
  my $out = readProc qw(
     qdbus
       org.nemomobile.voicecall
       /
       org.nemomobile.voicecall.VoiceCallManager.activeVoiceCall
  );

  if($out =~ /^\s*$/){
    return 0;
  }else{
    return 1;
  }
}

sub isScreenLocked(){
  my $out = readProc qw(
    qdbus
      --system
      com.nokia.mce
      /com/nokia/mce/request
      com.nokia.mce.request.get_display_status
  );

  my $status = "";
  if($out =~ /^(on|off)$/){
    $status = $1;
  }

  if($status eq "on"){
    return 0;
  }elsif($status eq "off"){
    return 1;
  }else{
    print STDERR "WARNING: could not read display status\n";
    return 0;
  }
}

sub readProc(@){
  my @cmd = @_;
  open CMD, "-|", @cmd or die "could not run @cmd\n$!\n";
  my $out = join '', <CMD>;
  close CMD;
  die "ERROR: \"@cmd\" failed\n" if $? != 0;
  return $out;
}

&main(@ARGV);
