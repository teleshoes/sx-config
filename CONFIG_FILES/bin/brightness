#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep);

sub getBrightness();
sub setBrightness($);
sub fixColor();
sub writeHBM($$);

my $HBM_MODE_DEV = "/sys/devices/dsi_panel_driver/hbm_mode";

my $HBM_MODE_WRITE_RETRY_ATTEMPTS = 5;
my $HBM_MODE_DELAY_MILLIS = 100;

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC
  $EXEC -g | g | --get | get
    print brightness percent as an integer between 1 and 100
    similar to: `mcetool | grep -P -o '^Brightness:\\s*\\K(\\d+)'`

  $EXEC PERCENT
  $EXEC -s | s | --set | set PERCENT
  $EXEC --set=PERCENT
    set brightness to PERCENT, and print 'OLD => NEW'
    similar to: `mcetool -b PERCENT`

    PERCENT
      -an integer between 1 and 100 inclusive,
        optionally followed by a '%' sign which is ignored
      -if '0' is passed in, '1' is used instead

  $EXEC -f | f | --fix | fix | --fix-color
    fix broken color calibration in certain sony devices
      by briefly toggling max brightness
    lasts until next screen is turned off
    similar to: echo 1 | sudo tee $HBM_MODE_DEV
                sleep 0.1
                echo 0 | sudo tee $HBM_MODE_DEV
";

my $CMD_GET = "get";
my $CMD_SET = "set";
my $CMD_FIX_COLOR = "fix-color";

sub main(@){
  my $cmd = $CMD_GET;
  my $targetBrightness = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|g|--get|get)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(-s|s|--set|set)$/){
      $cmd = $CMD_SET;
    }elsif($arg =~ /^--set=(\d+)%?$/){
      $cmd = $CMD_SET;
      $targetBrightness = $1;
    }elsif($arg =~ /^(\d+)%?$/){
      $cmd = $CMD_SET;
      $targetBrightness = $1;
    }elsif($arg =~ /^(-f|f|--fix|fix|--fix-color)$/){
      $cmd = $CMD_FIX_COLOR
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(defined $targetBrightness){
    $targetBrightness = 1 if $targetBrightness == 0;
    if($targetBrightness < 1 or $targetBrightness > 100){
      die "ERROR: PERCENT must be between 1 and 100\n";
    }
  }

  if($cmd eq $CMD_GET){
    print getBrightness() . "\n";
  }elsif($cmd eq $CMD_SET){
    die "$USAGE\nERROR: missing PERCENT\n" if not defined $targetBrightness;
    my $old = getBrightness();
    setBrightness($targetBrightness);
    my $new = getBrightness();
    print "$old => $new\n";
  }elsif($cmd eq $CMD_FIX_COLOR){
    fixColor();
  }else{
    die $USAGE;
  }
}

sub getBrightness(){
  my $out = `mcetool`;
  if($out =~ /^Brightness:\s*(\d+)/m){
    return $1;
  }else{
    return undef;
  }
}

sub setBrightness($){
  system "mcetool", "-b", $_[0];
}

sub fixColor(){
  writeHBM(1, $HBM_MODE_WRITE_RETRY_ATTEMPTS);
  sleep($HBM_MODE_DELAY_MILLIS/1000.0);
  writeHBM(0, $HBM_MODE_WRITE_RETRY_ATTEMPTS);
}

sub writeHBM($$){
  my ($val, $retryAttempts) = @_;

  open my $cmdH, "|-", "sudo", "dd", "status=none", "of=$HBM_MODE_DEV";
  print $cmdH "$_[0]\n";
  close $cmdH;

  my $exitCode = $? >> 8;
  if($exitCode != 0){
    if($retryAttempts == 0){
      die "ERROR: could not write $HBM_MODE_DEV (maybe screen blanked)\n";
    }else{
      print "  failed to write $HBM_MODE_DEV, retrying $retryAttempts more time(s)\n";
      sleep($HBM_MODE_DELAY_MILLIS / 1000.0);
      writeHBM($val, $retryAttempts - 1);
    }
  }else{
    if($retryAttempts < $HBM_MODE_WRITE_RETRY_ATTEMPTS){
      print "  retry successful\n";
    }
  }
}

&main(@ARGV);
