#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;
my $TTS_PROC_REGEX = "(com.google.android.tts|com.ivona.tts)";
my @KLOMP_TOGGLE_CMD = qw(klomp-cmd pause);
my @COOLREADER_TOGGLE_CMD = qw(coolreader-ctl ttsPlayPause);

my $COOLREADER_LOGCAT_EVENT_REGEXS = {
  APP_OPEN    => 'G\\|cr\\| CoolReader.onStart()',
  TTS_CREATE  => 'G\\|ttssvc\\| onCreate',
  TTS_DESTROY => 'G\\|ttssvc\\| onDestroy',
};

my $COOLREADER_ALL_LOGCAT_EVENTS_REGEX = join("|",
  sort values %$COOLREADER_LOGCAT_EVENT_REGEXS);

my $COOLREADER_LOGCAT_EVENT_REGEX_FMT = join '', map{
  sprintf("      %-12s => %s\n", $_, $$COOLREADER_LOGCAT_EVENT_REGEXS{$_})
} sort keys %$COOLREADER_LOGCAT_EVENT_REGEXS;

my $USAGE = "Usage:
  $EXEC -g|--get
    -if `$EXEC --is-tts-running` = 'YES'
       -print \"coolreader\"
    -otherwise:
       -print \"klomp\"

  $EXEC -p|--play-pause|--play|--pause
    -if `$EXEC --get` = \"coolreader\":
      -run: `$EXEC --coolreader-toggle`
    -otherwise:
      -run: @KLOMP_TOGGLE_CMD

  $EXEC --coolreader-toggle
    -if `profile` == general:
      run: @COOLREADER_TOGGLE_CMD
    -otherwise:
      run: sudo pkill -9 -f $TTS_PROC_REGEX

  $EXEC --is-tts-running
    -if `pgrep -f '^$TTS_PROC_REGEX\\s*\$'` is successful:
      print \"yes\"
    -otherwise:
      print \"no\"

  $EXEC --get-cr-event
    -get coolreader pid:
      COOLREADER_PID=`ad -x pgrep org.coolreader`
    -read logcat for pid COOLREADER_PID:
      `ad -x logcat cr3:D -d --pid=COOLREADER_PID -e '$COOLREADER_ALL_LOGCAT_EVENTS_REGEX'`
    -print the EVENT of the most recent line that matches the EVENT_REGEX:
      EVENT        => EVENT_REGEX
      ===========================\n" . $COOLREADER_LOGCAT_EVENT_REGEX_FMT . "
";

my $CMD_GET = "get";
my $CMD_PLAY_PAUSE = "play-pause";
my $CMD_COOLREADER_TOGGLE = "coolreader-toggle";
my $CMD_IS_TTS_RUNNING = "is-tts-running";
my $CMD_GET_CR_EVENT = "get-cr-event";

sub isCoolreader();
sub isTTSRunning();
sub getCoolreaderAndroidPID();
sub getLastCoolreaderLogcatEvent($);
sub isProfileGeneral();

sub main(@){
  my $cmd = undef;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(-p|--play-pause|--play|--pause)$/){
      $cmd = $CMD_PLAY_PAUSE;
    }elsif($arg =~ /^(--coolreader-toggle)$/){
      $cmd = $CMD_COOLREADER_TOGGLE;
    }elsif($arg =~ /^(--is-tts-running)$/){
      $cmd = $CMD_IS_TTS_RUNNING;
    }elsif($arg =~ /^(--get-cr-event)$/){
      $cmd = $CMD_GET_CR_EVENT;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: missing command\n" if not defined $cmd;

  if($cmd eq $CMD_GET){
    if(isCoolreader()){
      print "coolreader\n";
    }else{
      print "klomp\n";
    }
  }elsif($cmd eq $CMD_PLAY_PAUSE){
    if(isCoolreader()){
      coolreaderToggle();
    }else{
      system @KLOMP_TOGGLE_CMD;
    }
  }elsif($cmd eq $CMD_COOLREADER_TOGGLE){
    coolreaderToggle();
  }elsif($cmd eq $CMD_IS_TTS_RUNNING){
    if(isTTSRunning()){
      print "yes\n";
    }else{
      print "no\n";
    }
  }elsif($cmd eq $CMD_GET_CR_EVENT){
    my $pid = getCoolreaderAndroidPID();
    my $event;
    if(defined $pid){
      $event = getLastCoolreaderLogcatEvent($pid);
    }
    print "$event\n" if defined $event;
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub coolreaderToggle(){
  if(isProfileGeneral()){
    system @COOLREADER_TOGGLE_CMD;
  }else{
    system "sudo", "pkill", "-9", "-f", $TTS_PROC_REGEX;
  }
}

sub isCoolreader(){
  my $isTTSRunning = isTTSRunning;
  return 0 if not isTTSRunning();

  return 1;
}

sub isTTSRunning(){
  system "pgrep -f '^$TTS_PROC_REGEX\\s*\$' >/dev/null 2>/dev/null";
  return $? == 0 ? 1 : 0;
}

sub getCoolreaderAndroidPID(){
  my $pid = `ad -x pgrep "^org.coolreader\$"`;
  if($pid =~ /^(\d+)$/){
    return $1;
  }else{
    return undef;
  }
}

sub getLastCoolreaderLogcatEvent($){
  my ($pid) = @_;
  my @lines = `ad -x logcat cr3:D -d --pid=$pid -e '$COOLREADER_ALL_LOGCAT_EVENTS_REGEX'`;
  for my $line(reverse @lines){
    for my $event(sort keys %$COOLREADER_LOGCAT_EVENT_REGEXS){
      my $regex = $$COOLREADER_LOGCAT_EVENT_REGEXS{$event};
      if($line =~ /$regex/){
        return $event;
      }
    }
  }
  return undef;
}

sub isProfileGeneral(){
  my $profile = `profile`;
  chomp $profile;
  return $profile =~ /^general$/ ? 1 : 0;
}

&main(@ARGV);
