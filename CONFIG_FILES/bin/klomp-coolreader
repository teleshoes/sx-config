#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;
my $CR_PROC_REGEX = "(org.coolreader)";
my @KLOMP_TOGGLE_CMD = qw(klomp-cmd pause);
my @COOLREADER_TOGGLE_CMD = qw(coolreader-ctl ttsPlayPause);

my $CR_DATA_DIR = "/home/.android/data/data/org.coolreader";
my $CR_STATE_LOG_FILE = "$CR_DATA_DIR/files/cr-state-log.txt";

my $USAGE = "Usage:
  $EXEC -g|--get
    -if `$EXEC --is-cr-running` = 'yes'
     AND `$EXEC --is-cr-tts-mode` = 'yes':
       -print \"coolreader\"
    -otherwise:
       -print \"klomp\"

  $EXEC -p|--play-pause|--play|--pause
    -if `$EXEC --get` = \"coolreader\":
      -run: `$EXEC --coolreader-toggle`
    -otherwise:
      -run: @KLOMP_TOGGLE_CMD

  $EXEC --coolreader-toggle
    -if `profile` == general:
      run: @COOLREADER_TOGGLE_CMD

  $EXEC --is-cr-running
    -if `pgrep -f '^$CR_PROC_REGEX\\s*\$'` is successful:
      print \"yes\"
    -otherwise:
      print \"no\"

  $EXEC --is-cr-tts-mode
    -read (as root): $CR_STATE_LOG_FILE
    -if 'TTS_CREATE' appears later than 'TTS_DESTROY':
      print \"yes\"
    -otherwise:
      print \"no\"
";

my $CMD_GET = "get";
my $CMD_PLAY_PAUSE = "play-pause";
my $CMD_COOLREADER_TOGGLE = "coolreader-toggle";
my $CMD_IS_CR_RUNNING = "is-cr-running";
my $CMD_IS_CR_TTS_MODE = "is-cr-tts-mode";

sub isCoolreaderMode();
sub isCoolreaderRunning();
sub isCoolreaderTTSMode();
sub isProfileGeneral();

sub main(@){
  my $cmd = undef;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(-p|--play-pause|--play|--pause)$/){
      $cmd = $CMD_PLAY_PAUSE;
    }elsif($arg =~ /^(--coolreader-toggle)$/){
      $cmd = $CMD_COOLREADER_TOGGLE;
    }elsif($arg =~ /^(--is-cr-running)$/){
      $cmd = $CMD_IS_CR_RUNNING;
    }elsif($arg =~ /^(--is-cr-tts-mode)$/){
      $cmd = $CMD_IS_CR_TTS_MODE;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  die "$USAGE\nERROR: missing command\n" if not defined $cmd;

  if($cmd eq $CMD_GET){
    if(isCoolreaderMode()){
      print "coolreader\n";
    }else{
      print "klomp\n";
    }
  }elsif($cmd eq $CMD_PLAY_PAUSE){
    if(isCoolreaderMode()){
      coolreaderToggle();
    }else{
      system @KLOMP_TOGGLE_CMD;
    }
  }elsif($cmd eq $CMD_COOLREADER_TOGGLE){
    coolreaderToggle();
  }elsif($cmd eq $CMD_IS_CR_RUNNING){
    print isCoolreaderRunning() ? "yes\n" : "no\n";
  }elsif($cmd eq $CMD_IS_CR_TTS_MODE){
    print isCoolreaderTTSMode() ? "yes\n" : "no\n";
  }else{
    die "ERROR: unknown command $cmd\n";
  }
}

sub coolreaderToggle(){
  if(isProfileGeneral()){
    system @COOLREADER_TOGGLE_CMD;
  }
}

sub isCoolreaderMode(){
  return isCoolreaderRunning() && isCoolreaderTTSMode();
}

sub isCoolreaderRunning(){
  system "pgrep -f '^$CR_PROC_REGEX\\s*\$' >/dev/null 2>/dev/null";
  return $? == 0 ? 1 : 0;
}

sub isCoolreaderTTSMode(){
  my @lines = `sudo cat $CR_STATE_LOG_FILE 2>/dev/null`;
  for my $line(reverse @lines){
    if($line =~ /TTS_ON/){
      return 1;
    }elsif($line =~ /TTS_OFF/){
      return 0;
    }
  }
  return 0;
}

sub isProfileGeneral(){
  my $profile = `profile`;
  chomp $profile;
  return $profile =~ /^general$/ ? 1 : 0;
}

&main(@ARGV);
