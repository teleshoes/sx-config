#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $EXEC = basename $0;

my $DEV_LEDS_DIR = "/sys/devices/soc.0/7af6000.i2c/i2c-6/6-0042/leds";
my $DEV_RED = "$DEV_LEDS_DIR/led:rgb_red/brightness";
my $DEV_GREEN = "$DEV_LEDS_DIR/led:rgb_green/brightness";
my $DEV_BLUE = "$DEV_LEDS_DIR/led:rgb_blue/brightness";

my $MAX_BRIGHTNESS = 12;

my @COLORS_ARR = (
  off    => [map{$MAX_BRIGHTNESS*$_} (0.0, 0.0, 0.0)],
  white  => [map{$MAX_BRIGHTNESS*$_} (1.0, 1.0, 1.0)],
  black  => [map{$MAX_BRIGHTNESS*$_} (0.0, 0.0, 0.0)],

  red    => [map{$MAX_BRIGHTNESS*$_} (1.0, 0.0, 0.0)],
  green  => [map{$MAX_BRIGHTNESS*$_} (0.0, 1.0, 0.0)],
  blue   => [map{$MAX_BRIGHTNESS*$_} (0.0, 0.0, 1.0)],

  yellow => [map{$MAX_BRIGHTNESS*$_} (1.0, 1.0, 0.0)],
  purple => [map{$MAX_BRIGHTNESS*$_} (1.0, 0.0, 1.0)],
  teal   => [map{$MAX_BRIGHTNESS*$_} (0.0, 1.0, 1.0)],
);
my %COLORS_BY_NAME = @COLORS_ARR;
my @COLOR_NAMES = map {$COLORS_ARR[$_]} grep {$_ % 2 == 0} (0..$#COLORS_ARR);
my $COLOR_FMT = join "\n    ", map {"$_ => @{$COLORS_BY_NAME{$_}}"} @COLOR_NAMES;

sub ensureRoot();
sub readLEDs();
sub writeLEDs($$$);
sub readDevInt($);
sub writeDevInt($$);
sub allInts(@);

my $usage = "Usage:
  $EXEC -h|--help
    print this message

  $EXEC [-g|--get]
    read LED brightnesses and print them as integers on one line:
      RED_BRIGHTNESS GREEN_BRIGHTNESS BLUE_BRIGHTNESS

  $EXEC [-s|--set] RED_BRIGHTNESS GREEN_BRIGHTNESS BLUE_BRIGHTNESS
    set RGB LED brightness

  $EXEC COLOR
    same as `$EXEC --set` with the following red/green/blue values

  COLOR
    $COLOR_FMT
  RED_BRIGHTNESS
    integer value in $DEV_RED
    (seems to be 0 - 27 on SFOS Xperia X Compact)
  GREEN_BRIGHTNESS
    integer value in $DEV_GREEN
    (seems to be 0 - 20 on SFOS Xperia X Compact)
  BLUE_BRIGHTNESS
    integer value in $DEV_BLUE
    (seems to be 0 - 120 on SFOS Xperia X Compact)
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print "$usage\n";
    exit 0;
  }elsif(@_ == 0 or (@_ == 1 and $_[0] =~ /^(-g|--get)$/)){
    my ($r, $g, $b) = readLEDs();
    print "$r $g $b\n";
  }elsif(@_ == 4 and $_[0] =~ /^(-s|--set)$/ and allInts(@_[1..3])){
    my ($r, $g, $b) = ($_[1], $_[2], $_[3]);
    ensureRoot();
    writeLEDs($r, $g, $b);
  }elsif(@_ == 3 and allInts(@_[0..2])){
    my ($r, $g, $b) = ($_[0], $_[1], $_[2]);
    ensureRoot();
    writeLEDs($r, $g, $b);
  }elsif(@_ == 1 and defined $COLORS_BY_NAME{$_[0]}){
    my ($colorName) = @_;
    my ($r, $g, $b) = @{$COLORS_BY_NAME{$colorName}};
    ensureRoot();
    writeLEDs($r, $g, $b);
  }else{
    die $usage;
  }
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    exec "sudo", $0, @ARGV;
  }
}

sub readLEDs(){
  my $r = readDevInt $DEV_RED;
  my $g = readDevInt $DEV_GREEN;
  my $b = readDevInt $DEV_BLUE;
  return ($r, $g, $b);
}

sub writeLEDs($$$){
  my ($r, $g, $b) = @_;
  writeDevInt $DEV_RED, $r;
  writeDevInt $DEV_GREEN, $g;
  writeDevInt $DEV_BLUE, $b;
}

sub readDevInt($){
  my ($dev) = @_;
  my $val = `cat $dev 2>/dev/null`;
  if($val =~ /^(-?\d+)$/){
    return $1;
  }else{
    die "ERROR: could not read integer from $dev\n";
  }
}

sub writeDevInt($$){
  my ($dev, $val) = @_;
  die "ERROR: $val is not an integer\n" if $val !~ /^-?\d+$/;
  system "echo $val > $dev";
  if($? != 0){
    die "ERROR: could not write $val to $dev\n";
  }
}

sub allInts(@){
  for my $arg(@_){
    if($arg !~ /^-?\d+$/){
      return 0;
    }
  }
  return 1;
}

&main(@ARGV);
