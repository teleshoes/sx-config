#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

sub serviceCmd($);
sub waitForAliendalvik($);
sub isAliendalvikRunning();
sub lxcWrapCmd($@);
sub lxcShell($@);
sub lxcReadProc($@);
sub getApksForPrefix($);
sub getRes();
sub parseScreenDimArg($$);
sub nowMillis();

my $EXEC = basename $0;

my $APK_DIR = "/media/sdcard/phone/apks-aliendalvik";
my %SHELL_ENV_VARS = (
  ANDROID_DATA         => "/data",
  ANDROID_RUNTIME_ROOT => "/apex/com.android.runtime",
  ANDROID_TZDATA_ROOT  => "/apex/com.android.tzdata",
);
my $SHELL_ENV_VARS_SH_FMT = join " ", map{"$_=$SHELL_ENV_VARS{$_}"}
  sort keys %SHELL_ENV_VARS;
my $SHELL_ENV_VARS_USAGE_FMT = join " \\\n            ", map{"$_=$SHELL_ENV_VARS{$_}"}
  sort keys %SHELL_ENV_VARS;

my $CONTAINER_NAME = "aliendalvik";
my $LXC_PATH = "/tmp/appsupport";

my $DEFAULT_WAIT_TIMEOUT_SECONDS = 60;

my $USAGE = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC start|--start
  $EXEC stop|--stop
  $EXEC restart|--restart
    run: sudo systemctl start|stop|restart aliendalvik

  $EXEC init|--init [INIT_CMD INIT_CMD...]
    -ensure aliendalvik is running
      -if not, restart it
      -wait up to 60s for it to start, and then restart up to two more times
    -run each INIT_CMD, in order, waiting for each to finish
    similar to:
           ( $EXEC --check-running || $EXEC restart ) \\
        && ( $EXEC --wait 60       || $EXEC restart ) \\
        && ( $EXEC --wait 60       || $EXEC restart ) \\
        && ( INIT_CMD ; INIT_CMD ; INIT_CMD )

  $EXEC
  $EXEC -x|x
  $EXEC --shell|shell
    run: sudo LXC_ATTACH_CMD

  $EXEC [OPTS] -x|x CMD_ARG CMD_ARG
    run: sudo LXC_ATTACH_CMD -- CMD_ARG CMD_ARG CMD_ARG..

  $EXEC [OPTS] CMD_ARG CMD_ARG...
  $EXEC [OPTS] --shell|shell CMD_ARG CMD_ARG...
    run: sudo LXC_ATTACH_CMD -- sh -c '
            $SHELL_ENV_VARS_USAGE_FMT \\
            CMD_ARG CMD_ARG CMD_ARG..'

  $EXEC res|--res
    -get window info as in: $EXEC --shell dumpsys window
    -parse DisplayInfo.real
      e.g.: DisplayInfo{app 2394 x 1080, real 2520 x 1080, ... }
    -print WIDTHxHEIGHT

  $EXEC tap|--tap XPOS YPOS
  $EXEC --tap=XPOSxYPOS
    run 'input tap' with args as if device is in portrait mode
      (rotate args if device is in landscape)
    -get screen <SCREEN_WIDTH> and <SCREEN_HEIGHT> as in $EXEC --get-res
    -calculate screen-percent if <XPOS> is 'X_PCT%'
      X_PX = <X_PCT> * MIN(<SCREEN_WIDTH>, <SCREEN_HEIGHT>)
    -calculate screen-percent if <YPOS> is 'Y_PCT%'
      Y_PX = <Y_PCT> * MAX(<SCREEN_WIDTH>, <SCREEN_HEIGHT>)
    -convert portrait tap for current orientation:
      -if landscape mode (SCREEN_WIDTH > SCREEN_HEIGHT):
        ROTATED_X_PX = Y_PX
        ROTATED_Y_PX = SCREEN_HEIGHT - X_PX
      -otherwise:
        ROTATED_X_PX = X_PX
        ROTATED_Y_PX = Y_PX
    -run: $EXEC --shell input tap ROTATED_X_PX ROTATED_Y_PX

    XPOS
      position along narrow edge, measured from top-left corner in portrait mode
      can be integer number of px, or real number followed by '%'
    YPOS
      position along wide edge, measured from top-left corner in portrait mode
      can be integer number of px, or real number followed by '%'

  $EXEC orient|--orient ORIENT_ARG
  $EXEC --orient=ORIENT_ARG
    run:
      $EXEC settings put system accelerometer_rotation ACCEL_VAL
      $EXEC settings put system user_rotation USER_VAL
    (both are run twice because sometimes 'inverted' is ignored)

    ORIENT_ARG
      auto | a | none                   =  ACCEL_VAL=1   USER_VAL=0
      portrait | p | 0                  =  ACCEL_VAL=0   USER_VAL=0
      landscape | l | 1                 =  ACCEL_VAL=0   USER_VAL=1
      portrait-inverted | pi | 2        =  ACCEL_VAL=0   USER_VAL=2
      landscape-inverted | li | 3       =  ACCEL_VAL=0   USER_VAL=3

  $EXEC -i|i|--install|install APK_FILE APK_FILE...
  $EXEC --install=APK_FILE
    run: apkd-install-preload APK_FILE APK_FILE...
         apkd-install APK_FILE APK_FILE...

    APK_FILE
      an .apk file, OR a prefix of .apk files in $APK_DIR
      e.g.: /tmp/abc.apk  => /tmp/abc.apk
            coolreader-   => $APK_DIR/coolreader-*.apk

  $EXEC -u|u|--uninstall|uninstall APK_FILE APK_FILE...
  $EXEC --uninstall=APK_FILE
    for each APK_FILE:
      get the PACKAGE_NAME with `apk-info --package`
      run: $EXEC pm uninstall PACKAGE_NAME

  $EXEC -l|l|--launch|launch|--launch-intent|launch-intent INTENT
  $EXEC --launch=INTENT
  $EXEC --launch-intent=INTENT
    -parse INTENT into: PKG_NAME/ACTIVITY
      -if ACTIVITY starts with a '.', PKG_NAME will be prepended
    -run: apkd-launcher PKG_NAME.apk PKG_NAME/ACTIVITY
    e.g.: $EXEC -l org.coolreader/.CoolReader
          => apkd-launcher org.coolreader.apk org.coolreader/org.coolreader.CoolReader

  $EXEC settings|--settings
    same as: $EXEC --intent=com.android.settings/.Settings
    NOTE: args to settings treated as '$EXEC shell settings ARG ARG..'

  $EXEC -w|w|--wait
    same as: $EXEC --wait=$DEFAULT_WAIT_TIMEOUT_SECONDS

  $EXEC -w|w|--wait TIMEOUT_SECONDS
  $EXEC --wait=TIMEOUT_SECONDS
    wait until aliendalvik is running
    e.g.: $EXEC --wait 30 && echo OK || echo FAIL
      -every 1s, check if aliendalvik is running as in `$EXEC --check-running`
        -if TIMEOUT_SECONDS has transpired:
          print error message and exit with exit code 1
        -if `LXC_ATTACH_CMD` succeeded:
          exit with exit code 0
        -otherwise:
          sleep for 1s and retry

  $EXEC --check-running
    check if aliendalvik is running with `LXC_ATTACH_CMD`
    run: `LXC_ATTACH_CMD echo ok 2>/dev/null`
      -if response is ok, exit with exit code 0
      -otherwise, print error message and exit with exit code 1

  OPTS
    -q | --quiet
      do not print shell commands before running them (this is the default)
    -v | --verbose
      print shell commands before running them

  LXC_ATTACH_CMD
    lxc-attach -q --name=$CONTAINER_NAME --lxcpath=$LXC_PATH
";

my $MODE_SERVICE = "service";
my $MODE_INIT = "init";
my $MODE_SHELL = "shell";
my $MODE_RES = "res";
my $MODE_TAP = "tap";
my $MODE_ORIENT = "orient";
my $MODE_INSTALL = "install";
my $MODE_UNINSTALL = "uninstall";
my $MODE_LAUNCH = "launch";
my $MODE_WAIT = "wait";
my $MODE_CHECK_RUNNING = "check-running";

my $OK_OPTS = join "|", qw(
  -q --quiet -v --verbose
);

sub main(@){
  my $mode = $MODE_SHELL;
  my $serviceCmd;
  my @initCmds;
  my @cmdArgs;
  my @apkFileArgs;
  my $intent;
  my $opts = {
    verbose         => 0,
    shellEnvWrapper => 1,
  };
  my ($tapXpos, $tapYpos);
  my $orientArg;
  my $waitTimeoutSeconds;

  while(@_ > 0 and $_[0] =~ /^($OK_OPTS)$/){
    my $opt = shift @_;
    if($opt =~ /^(-q|--quiet)$/){
      $$opts{verbose} = 0;
    }elsif($opt =~ /^(-v|--verbose)$/){
      $$opts{verbose} = 1;
    }else{
      die "$USAGE\nERROR: unknown opt $opt\n";
    }
  }

  for(my $i=0; $i<@_; $i++){
    my $arg = $_[$i];
    my $isFirstArg = $i == 0 ? 1 : 0;
    my $isLastArg = $i == $#_ ? 1 : 0;
    if($isFirstArg and $arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($isFirstArg and $arg =~ /^(?:--)?(start|stop|restart)$/ and $isLastArg){
      $mode = $MODE_SERVICE;
      $serviceCmd = $1;
    }elsif($isFirstArg and $arg =~ /^(?:--)?(init)$/){
      $mode = $MODE_INIT;
    }elsif($isFirstArg and $arg =~ /^(-x|x)$/){
      $mode = $MODE_SHELL;
      $$opts{shellEnvWrapper} = 0;
    }elsif($isFirstArg and $arg =~ /^(--shell|shell)$/){
      $mode = $MODE_SHELL;
      $$opts{shellEnvWrapper} = 1;
    }elsif($isFirstArg and $arg =~ /^(res|-res)$/){
      $mode = $MODE_RES;
    }elsif($isFirstArg and $arg =~ /^(tap|--tap)$/ and $i == $#_-2){
      $mode = $MODE_TAP;
      ($tapXpos, $tapYpos) = ($_[++$i], $_[++$i]);
    }elsif($isFirstArg and $arg =~ /^--tap=(.+)x(.+)$/){
      $mode = $MODE_TAP;
      ($tapXpos, $tapYpos) = ($1, $2);
    }elsif($isFirstArg and $arg =~ /^(orient|--orient)$/ and $i == $#_-1){
      $mode = $MODE_ORIENT;
      $orientArg = $_[++$i];
    }elsif($isFirstArg and $arg =~ /^--orient=(.+)$/){
      $mode = $MODE_ORIENT;
      $orientArg = $1;
    }elsif($isFirstArg and $arg =~ /^(-i|i|--install|install)$/){
      $mode = $MODE_INSTALL;
    }elsif($isFirstArg and $arg =~ /^(--install)=(.+)$/){
      $mode = $MODE_INSTALL;
      push @apkFileArgs, $2;
    }elsif($isFirstArg and $arg =~ /^(-u|u|--uninstall|uninstall)$/){
      $mode = $MODE_UNINSTALL;
    }elsif($isFirstArg and $arg =~ /^(--uninstall)=(.+)$/){
      $mode = $MODE_UNINSTALL;
      push @apkFileArgs, $2;
    }elsif($isFirstArg and $arg =~ /^(-l|l|--launch|launch|--launch-intent|launch-intent)$/){
      $mode = $MODE_LAUNCH;
    }elsif($isFirstArg and $arg =~ /^(--launch|--launch-intent)=(.+)$/){
      $mode = $MODE_LAUNCH;
      $intent = $2;
    }elsif($isFirstArg and $arg =~ /^(settings|--settings)$/ and @_ == 0){
      $mode = $MODE_LAUNCH;
      $intent = 'com.android.settings/.Settings';
    }elsif($isFirstArg and $arg =~ /^(-w|w|--wait)$/){
      $mode = $MODE_WAIT;
    }elsif($isFirstArg and $arg =~ /^(--check-running)$/){
      $mode = $MODE_CHECK_RUNNING;
    }elsif($isFirstArg and $arg =~ /^(--wait)=(\d+)$/){
      $mode = $MODE_WAIT;
      $waitTimeoutSeconds = $1;
    }elsif($mode eq $MODE_INIT){
      push @initCmds, $arg;
    }elsif($mode eq $MODE_SHELL){
      push @cmdArgs, $arg;
    }elsif($mode =~ /^($MODE_INSTALL|$MODE_UNINSTALL)$/){
      if(-f $arg){
        push @apkFileArgs, $arg;
      }else{
        my @apkPrefixFiles = getApksForPrefix($arg);
        if(@apkPrefixFiles == 0){
          die "$USAGE\nERROR: no APK files found for prefix $arg\n";
        }
        print "$arg => \n" . join '', map {"  $_\n"} @apkPrefixFiles;
        @apkFileArgs = (@apkFileArgs, @apkPrefixFiles);
      }
    }elsif($mode eq $MODE_LAUNCH and not defined $intent){
      $intent = $arg;
    }elsif($mode eq $MODE_WAIT and not defined $waitTimeoutSeconds and $arg =~ /^\d+$/){
      $waitTimeoutSeconds = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg '$arg'\n";
    }
  }

  if($mode eq $MODE_SERVICE){
    serviceCmd $serviceCmd;
  }elsif($mode eq $MODE_INIT){
    serviceCmd "restart" if not isAliendalvikRunning();
    serviceCmd "restart" if not waitForAliendalvik($DEFAULT_WAIT_TIMEOUT_SECONDS);
    serviceCmd "restart" if not waitForAliendalvik($DEFAULT_WAIT_TIMEOUT_SECONDS);
    for my $cmd(@initCmds){
      system $cmd;
    }
  }elsif($mode eq $MODE_SHELL){
    lxcShell($opts, @cmdArgs);
  }elsif($mode eq $MODE_INSTALL){
    die "$USAGE\nError: no APK_FILE to install\n" if @apkFileArgs == 0;
    my $envArgs = "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/100000/dbus/user_bus_socket";
    system "sudo", "sh", "-c", "$envArgs apkd-install-preload @apkFileArgs";
    system "sudo", "sh", "-c", "$envArgs apkd-install @apkFileArgs";
  }elsif($mode eq $MODE_UNINSTALL){
    die "$USAGE\nError: no APK_FILE to uninstall\n" if @apkFileArgs == 0;
    for my $apkFile(@apkFileArgs){
      my $pkgName = `apk-info --package $apkFile`;
      chomp $pkgName;
      my @cmd = ("pm", "uninstall", $pkgName);
      print "@cmd\n";
      lxcShell $opts, @cmd;
    }
  }elsif($mode eq $MODE_RES){
    my ($screenX, $screenY) = getRes();
    print "${screenX}x${screenY}\n";
  }elsif($mode eq $MODE_TAP){
    my ($screenX, $screenY) = getRes();
    my $isLandscape;
    my ($minDim, $maxDim);
    if(not defined $screenX or not defined $screenY){
      $isLandscape = 0;
      ($minDim, $maxDim) = (undef, undef);
    }else{
      $isLandscape = $screenX > $screenY;
      ($minDim, $maxDim) = $isLandscape ? ($screenY, $screenX) : ($screenX, $screenY);
    }

    my $xPx = parseScreenDimArg($tapXpos, $minDim);
    my $yPx = parseScreenDimArg($tapYpos, $maxDim);

    my $realX = $isLandscape ? $yPx : $xPx;
    my $realY = $isLandscape ? $screenY - $xPx : $yPx;

    print "tapping ${realX}x${realY}\n";
    lxcShell $opts, "input", "tap", $realX, $realY;
  }elsif($mode eq $MODE_ORIENT){
    my ($accelVal, $userVal);
    if($orientArg =~ /^(auto|a|none)$/){
      ($accelVal, $userVal) = (1, 0);
    }elsif($orientArg =~ /^(portrait|p|0)$/){
      ($accelVal, $userVal) = (0, 0);
    }elsif($orientArg =~ /^(landscape|l|1)$/){
      ($accelVal, $userVal) = (0, 1);
    }elsif($orientArg =~ /^(portrait-inverted|pi|2)$/){
      ($accelVal, $userVal) = (0, 2);
    }elsif($orientArg =~ /^(landscape-inverted|li|3)$/){
      ($accelVal, $userVal) = (0, 3);
    }

    lxcShell $opts, ("settings", "put", "system", "accelerometer_rotation", "$accelVal");
    lxcShell $opts, ("settings", "put", "system", "user_rotation", "$userVal");

    #twice because sometimes inverted is ignored the first time
    lxcShell $opts, ("settings", "put", "system", "accelerometer_rotation", "$accelVal");
    lxcShell $opts, ("settings", "put", "system", "user_rotation", "$userVal");
  }elsif($mode eq $MODE_LAUNCH){
    die "ERROR: missing intent\n" if not defined $intent;
    my ($pkgName, $activity);
    if($intent =~ /^(.+)\/(.+)$/){
      ($pkgName, $activity) = ($1, $2);
      if($activity =~ /^\./){
        #this is NOT implemented by apkd-launcher, apparently
        $activity = "$pkgName$activity";
      }
    }else{
      die "ERROR: malformed intent (must be PKG_NAME/ACTIVITY)\n";
    }
    my $apk = "$pkgName.apk";
    my @cmd = ("apkd-launcher", $apk, "$pkgName/$activity");
    exec @cmd;
  }elsif($mode eq $MODE_WAIT){
    $waitTimeoutSeconds = $DEFAULT_WAIT_TIMEOUT_SECONDS if not defined $waitTimeoutSeconds;
    if(waitForAliendalvik($waitTimeoutSeconds)){
      exit 0;
    }else{
      print STDERR "ERROR: aliendalvik did not start in ${waitTimeoutSeconds}s\n";
      exit 1;
    }
  }elsif($mode eq $MODE_CHECK_RUNNING){
    if(isAliendalvikRunning()){
      exit 0;
    }else{
      print STDERR "ERROR: aliendalvik is not running\n";
      exit 1;
    }
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub serviceCmd($){
  my ($serviceCmd) = @_;
  system "sudo", "systemctl", $serviceCmd, "aliendalvik";
}

sub waitForAliendalvik($){
  my ($waitTimeoutSeconds) = @_;
  my $waitTimeoutMillis = $waitTimeoutSeconds * 1000;
  my $start = nowMillis();
  while(1){
    if($waitTimeoutMillis < nowMillis()-$start){
      return 0;
    }
    if(isAliendalvikRunning){
      return 1;
    }
    sleep 1;
  }
}

sub isAliendalvikRunning(){
  my $opts = {};
  my $out = lxcReadProc $opts, "echo", "ok";
  if($out =~ /^ok$/){
    return 1;
  }else{
    return 0;
  }
}

sub lxcWrapCmd($@){
  my ($opts, @shellCmd) = @_;
  my @cmd = ("sudo", "lxc-attach", "-q", "--name=$CONTAINER_NAME", "--lxcpath=$LXC_PATH");

  if(@shellCmd > 0){
    if($$opts{shellEnvWrapper}){
      @cmd = (@cmd, "--", "sh", "-c", "$SHELL_ENV_VARS_SH_FMT @shellCmd");
    }else{
      @cmd = (@cmd, "--", @shellCmd);
    }
  }

  return @cmd;
}

sub lxcShell($@){
  my ($opts, @shellCmd) = @_;
  my @cmd = lxcWrapCmd($opts, @shellCmd);
  if(@shellCmd > 0){
    print "@cmd\n" if $$opts{verbose};
  }
  system @cmd;
}

sub lxcReadProc($@){
  my ($opts, @shellCmd) = @_;
  my @cmd = lxcWrapCmd($opts, @shellCmd);
  open my $fh, "-|", @cmd or die "ERROR: could not run cmd @cmd\n$!\n";
  my $output = join '', <$fh>;
  close $fh;
  return $output;
}

sub getApksForPrefix($){
  my ($prefix) = @_;
  my @files = glob "$APK_DIR/$prefix*";
  @files = grep {/\.apk$/i} grep {-f $_} @files;
  return @files;
}

sub getRes(){
  my $out = `$EXEC --shell dumpsys window`;
  if($out =~ /DisplayInfo.*real (\d+) x (\d+)/){
    return ($1, $2);
  }
  return (undef, undef);
}

sub parseScreenDimArg($$){
  my ($arg, $screenDimSize) = @_;
  if($arg =~ /^(\d+)$/){
    return $1;
  }elsif($arg =~ /^(\d+|\d*\.\d+)%$/){
    die "ERROR: missing screen dimension\n" if not defined $screenDimSize;
    return int($1/100.0*$screenDimSize + 0.5);
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
