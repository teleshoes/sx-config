#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $IPMAGIC_NAME = "sx";
my $USER = "nemo";

my $DATA_DIR = "/home/$USER/.local/share/waydroid/data";

my $SETTINGS = {
  secure => {
    "tts_default_synth"           => "com.google.android.tts",
    "tts_default_rate"            => "122",
    "tts_default_pitch"           => "92",
    "show_ime_with_hard_keyboard" => "1",
  },
  system => {
    "accelerometer_rotation" => "1",
  },
  global => {
    "time_zone"      => "America/New_York",
    "auto_time_zone" => "0",
  },
};

my $PROPS = {
  "persist.sys.timezone" => "America/New_York",
};

my $INPUT_METHOD_SHARED_PREFS_DIR =
  "$DATA_DIR/user_de/0/com.android.inputmethod.latin/shared_prefs";

my $INPUT_METHOD_XML_FILE =
  "$INPUT_METHOD_SHARED_PREFS_DIR/com.android.inputmethod.latin_preferences.xml";

my $INPUT_SETTINGS = {
  "auto_cap"                               => ["boolean", "false"],
  "pref_key_auto_correction"               => ["boolean", "false"],

  "next_word_prediction"                   => ["boolean", "true"],
  "popup_on"                               => ["boolean", "true"],
  "pref_key_block_potentially_offensive"   => ["boolean", "true"],
  "pref_key_use_contacts_dict"             => ["boolean", "false"],
  "pref_key_use_double_space_period"       => ["boolean", "true"],
  "pref_key_use_personalized_dicts"        => ["boolean", "true"],
  "pref_split_keyboard"                    => ["boolean", "false"],
  "pref_voice_input_key"                   => ["boolean", "true"],
  "show_suggestions"                       => ["boolean", "true"],
  "sound_on"                               => ["boolean", "false"],
  "vibrate_on"                             => ["boolean", "true"],
  "last_shown_emoji_category_id"           => ["int",     "8"],
};

my $JITSI_DB = "$DATA_DIR/data/org.jitsi.meet/databases/RKStorage";
my $JITSI_DB_CONF = {
  '@jitsi-meet/features/recent-list' => ''
    . '['
    . '{' . '"conference":"https://meet.jit.si/%%%JITSI_ROOM%%%"'
    . ',' . '"date":%%%NOW_MILLIS%%%'
    . ',' . '"duration":0'
    . '}'
    . ']'
  ,
  '@jitsi-meet/features/base/settings' => ''
    . '{' . '"avatarID":"ffffffffffffffffffffffffffffffff"'
    . ',' . '"displayName":"%%%JITSI_NAME%%%"'
    . ',' . '"email":""'
    . ',' . '"localFlipX":true'
    . ',' . '"startAudioOnly":true'
    . ',' . '"startWithAudioMuted":false'
    . ',' . '"startWithVideoMuted":true'
    . '}'
  ,
};

sub applySettings();
sub applyProps();
sub setupJitsi();
sub nowMillis();
sub run(@);
sub runQuiet(@);

sub main(@){
  run "ipmagic", $IPMAGIC_NAME, "wd", "--restart";
  run "ipmagic", $IPMAGIC_NAME, "wd", "--wait-ui";
  applySettings();
  applyProps();
  applyInputSettings();
  setupJitsi();
}

sub applySettings(){
  print "applying settings\n";

  my $getCmds = "";
  my $setCmds = "";
  for my $namespace(sort keys %$SETTINGS){
    for my $key(sort keys %{$$SETTINGS{$namespace}}){
      my $val = $$SETTINGS{$namespace}{$key};
      $getCmds .= "echo -ne $namespace.$key=; settings get '$namespace' '$key';\n";
      $setCmds .= "settings put '$namespace' '$key' '$val';\n";
    }
  }

  print "settings (before):\n";
  my $before = `ipmagic $IPMAGIC_NAME "wd shell \\"$getCmds\\""`;
  print "$before\n\n";

  run "ipmagic", $IPMAGIC_NAME, "wd shell \"$setCmds\"";
  print "\n\n";

  print "settings (after):\n";
  my $after = `ipmagic $IPMAGIC_NAME "wd shell \\"$getCmds\\""`;
  print "$after\n\n";

  if($before eq $after){
    print "NO CHANGE\n";
  }else{
    print "SETTINGS UPDATED\n";
  }
}

sub applyProps(){
  print "applying props\n";

  my $getCmds = "";
  my $setCmds = "";
  for my $key(sort keys %$PROPS){
    my $val = $$PROPS{$key};
    $getCmds .= "echo -ne $key=; getprop '$key';\n";
    $setCmds .= "setprop '$key' '$val';\n";
  }

  print "props (before):\n";
  my $before = `ipmagic $IPMAGIC_NAME "wd shell \\"$getCmds\\""`;
  print "$before\n\n";

  run "ipmagic", $IPMAGIC_NAME, "wd shell \"$setCmds\"";
  print "\n\n";

  print "props (after):\n";
  my $after = `ipmagic $IPMAGIC_NAME "wd shell \\"$getCmds\\""`;
  print "$after\n\n";

  if($before eq $after){
    print "NO CHANGE\n";
  }else{
    print "PROPS UPDATED\n";
  }
}

sub applyInputSettings(){
  my $host = `ipmagic $IPMAGIC_NAME`;
  chomp $host;

  my $nowMillis = nowMillis();
  my $tmpFile = "/tmp/waydroid-input-file-$nowMillis";
  run "rm", "-f", $tmpFile;

  run "rsync -avP root\@$host:$INPUT_METHOD_XML_FILE $tmpFile";
  die "ERROR: could not fetch $INPUT_METHOD_XML_FILE\n" if not -f $tmpFile;

  my $contents = `cat $tmpFile`;
  for my $name(sort keys %$INPUT_SETTINGS){
    my ($datatype, $value) = @{$$INPUT_SETTINGS{$name}};
    if($contents !~ s/(<$datatype \s+ name="$name" \s+ value=)"[^"]*"/$1"$value"/x){
      die "ERROR: $datatype $name missing from $INPUT_METHOD_XML_FILE\n";
    }
  }

  open FH, "> $tmpFile" or die "ERROR: could not write $tmpFile\n$!\n";
  print FH $contents;
  close FH;

  run "rsync -avP --no-owner --no-group $tmpFile root\@$host:$INPUT_METHOD_XML_FILE";

  run "ipmagic", $IPMAGIC_NAME, "-u", "root", ""
    . "chown"
    . " --reference=$INPUT_METHOD_SHARED_PREFS_DIR"
    . " $INPUT_METHOD_XML_FILE"
    ;
}

sub setupJitsi(){
  print "\nsetting up jitsi:\n";

  print "starting jitsi..\n";
  run "ipmagic", $IPMAGIC_NAME,
    "wd", "--launch-intent=org.jitsi.meet/org.jitsi.meet.MainActivity";
  print "waiting 2s\n";
  sleep 2;
  print "stopping jitsi..\n";
  run "ipmagic", $IPMAGIC_NAME,
    "wd", "shell", "am force-stop org.jitsi.meet";

  my $nowMillis = nowMillis();
  my $jitsiName = `jitsi-meet --name`;
  chomp $jitsiName;
  my $jitsiRoom = `jitsi-meet --room`;
  chomp $jitsiRoom;

  for my $rowKey(sort keys %$JITSI_DB_CONF){
    my $rowValue = $$JITSI_DB_CONF{$rowKey};
    $rowValue =~ s/%%%NOW_MILLIS%%%/$nowMillis/g;
    $rowValue =~ s/%%%JITSI_ROOM%%%/$jitsiRoom/g;
    $rowValue =~ s/%%%JITSI_NAME%%%/$jitsiName/g;
    $rowValue =~ s/"/"\\""/g;
    print "catalystLocalStorage.$rowKey:\n";
    run "ipmagic", $IPMAGIC_NAME, "-u", "root", "
      sqlite3 $JITSI_DB \"
        select value FROM catalystLocalStorage WHERE key = '$rowKey';
        select ' => ';
        update catalystLocalStorage
          set value = '$rowValue'
          where key = '$rowKey';
        select value FROM catalystLocalStorage WHERE key = '$rowKey';
      \"
    ";
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}
sub runQuiet(@){
  system @_;
}

&main(@ARGV);
