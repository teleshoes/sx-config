#!/usr/bin/perl
use strict;
use warnings;
use File::Spec;

my $IPMAGIC_NAME = "sx";
my $USER = "nemo";

my $PIXMIRROR_TARGET_SIZE = "1920x1080";

my $LOCAL_DCIM_DIR = "$ENV{HOME}/Code/sx/backup/DCIM";
my $LOCAL_PIXMIRROR_DIR = "$ENV{HOME}/Code/sx/backup/DCIM-pixmirror";
my $LOCAL_PIXMIRROR_BY_DATE_DIR = "/tmp/sync-pixmirror-bydate";

my $REMOTE_PIXMIRROR_DIR = "/media/sdcard/phone/DCIM-pixmirror";
my $REMOTE_PIXMIRROR_BY_DATE_DIR = "/media/sdcard/phone/DCIM-pixmirror-bydate";
my $REMOTE_SYMLINK = "/home/$USER/pixmirror";

sub run(@);
sub runRetry(@);
sub runQuiet(@);
sub runCmd($@);

sub main(@){
  print "\n\n=====making pixmirror remote dirs\n";
  runRetry "ipmagic", $IPMAGIC_NAME, "
    mkdir -p $REMOTE_PIXMIRROR_DIR
    rm -f $REMOTE_SYMLINK
    ln -s $REMOTE_PIXMIRROR_DIR $REMOTE_SYMLINK
  ";

  print "\n\n=====running pixmirror locally\n";
  run "pixmirror", "--size=$PIXMIRROR_TARGET_SIZE", "--orient", $LOCAL_DCIM_DIR, $LOCAL_PIXMIRROR_DIR;
  run "touch", "$LOCAL_PIXMIRROR_DIR/.nomedia" if not -f "$LOCAL_PIXMIRROR_DIR/.nomedia";

  print "\n\n=====syncing pixmirror local=>remote\n";
  runRetry "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$LOCAL_PIXMIRROR_DIR/",
    ":$REMOTE_PIXMIRROR_DIR";

  print "\n\n=====making bydate-subdirs locally\n";
  run "rm", "-r", $LOCAL_PIXMIRROR_BY_DATE_DIR if -d $LOCAL_PIXMIRROR_BY_DATE_DIR;
  run "mkdir", "-p", "$LOCAL_PIXMIRROR_BY_DATE_DIR/";

  for my $dir(glob "$LOCAL_PIXMIRROR_DIR/????-??-??_*"){
    if($dir !~ /^(?:.*\/)?(\d\d\d\d)-(\d\d)-(\d\d)_(.+)$/){
      die "malformed dir: $dir\n";
    }
    my ($y, $m, $d, $title) = ($1, $2, $3, $4);
    my $subDir = "${y}/${m}";
    my $dirName = "${y}-${m}-${d}_${title}";

    my $remoteSrcAbsDir = "$REMOTE_PIXMIRROR_DIR/$dirName";
    my $remoteRelBaseDir = "$REMOTE_PIXMIRROR_BY_DATE_DIR/$subDir";

    my $remoteSrcRelDir = File::Spec->abs2rel($remoteSrcAbsDir, $remoteRelBaseDir);

    my $localDestDir = "$LOCAL_PIXMIRROR_BY_DATE_DIR/$subDir/$dirName";

    runQuiet "mkdir", "-p", "$LOCAL_PIXMIRROR_BY_DATE_DIR/$subDir/";
    runQuiet "ln", "-s", $remoteSrcRelDir, $localDestDir;

    runQuiet "touch", "$LOCAL_PIXMIRROR_BY_DATE_DIR/.nomedia", "-r", $dir;

    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR/${y}/${m}/${dirName}", "-r", $dir;
    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR/${y}/${m}", "-r", $dir;
    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR/${y}", "-r", $dir;
    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR", "-r", $dir;
  }
  for my $dir(glob "$LOCAL_PIXMIRROR_DIR/*/"){
    if($dir !~ /^$LOCAL_PIXMIRROR_DIR\/([a-zA-Z0-9_\-]+)\/?$/){
      die "malformed dir: $dir\n";
    }
    my $dirName = $1;
    next if $dirName =~ /^\d\d\d\d-\d\d-\d\d_/;

    my $remoteSrcAbsDir = "$REMOTE_PIXMIRROR_DIR/$dirName";
    my $remoteRelBaseDir = "$REMOTE_PIXMIRROR_BY_DATE_DIR";

    my $remoteSrcRelDir = File::Spec->abs2rel($remoteSrcAbsDir, $remoteRelBaseDir);

    my $localDestDir = "$LOCAL_PIXMIRROR_BY_DATE_DIR/$dirName";

    runQuiet "mkdir", "-p", "$LOCAL_PIXMIRROR_BY_DATE_DIR";
    runQuiet "ln", "-s", $remoteSrcRelDir, $localDestDir;

    runQuiet "touch", "$LOCAL_PIXMIRROR_BY_DATE_DIR/.nomedia", "-r", $dir;

    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR/${dirName}", "-r", $dir;
    runQuiet "touch", "-h", "$LOCAL_PIXMIRROR_BY_DATE_DIR", "-r", $dir;
  }

  print "\n\n=====syncing bydate-subdirs local=>remote\n";
  runRetry "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$LOCAL_PIXMIRROR_BY_DATE_DIR/",
    ":$REMOTE_PIXMIRROR_BY_DATE_DIR";
}

sub run(@){
  runCmd({printCmd => 1, failOnError => 1}, @_);
}
sub runRetry(@){
  runCmd({printCmd => 1, failOnError => 1, retryAttempts => 3, timeoutSeconds => 300}, @_);
}
sub runQuiet(@){
  runCmd({printCmd => 0, failOnError => 1}, @_);
}


sub runCmd($@){
  my ($config, @cmd) = @_;

  my $conf = {
    wrapShell      => 0,
    printCmd       => 0,
    readProc       => 0,
    failOnError    => 1,
    retryAttempts  => 0,
    timeoutSeconds => 0,
    %$config,
  };

  for my $key(sort keys %$conf){
    if($key !~ /^(wrapShell|printCmd|readProc|failOnError|retryAttempts|timeoutSeconds)$/){
      die "ERROR: unknown run conf opt $key\n";
    }
  }

  if($$conf{wrapShell}){
    @cmd = ("sh", "-c", "@cmd");
  }
  if($$conf{timeoutSeconds} > 0){
    @cmd = ("timeout", $$conf{timeoutSeconds}, @cmd);
  }

  print "@cmd\n" if $$conf{printCmd};

  my $exitCode;
  my $error;
  my $stdout;
  my $retryAttempts = $$conf{retryAttempts};
  while(1){
    if($$conf{readProc}){
      my $cmdFH;
      if(open $cmdFH, "-|", @cmd){
        $stdout = join '', <$cmdFH>;
        close $cmdFH;
        $exitCode = $? >> 8;
        $error = $!;
      }else{
        $stdout = "";
        $exitCode = -1;
        $error = $1;
      }
    }else{
      system @cmd;
      $exitCode = $? >> 8;
      $error = $!;
    }

    if($exitCode != 0){
      my $timedOutMsg = "timedout=no";
      if($$conf{timeoutSeconds} > 0 and $exitCode == 124){
        $timedOutMsg = "timedout=yes";
      }

      if($retryAttempts > 0){
        $retryAttempts--;
        print "COMMAND FAILED ($timedOutMsg): @cmd\nRETRYING IN 3s...\n";
        sleep 3;
      }else{
        last;
      }
    }else{
      last;
    }
  }

  if($exitCode != 0 and $$conf{failOnError}){
    die "\n\nERROR: '@cmd' failed\n$error\n";
  }

  if($$conf{readProc}){
    return $stdout;
  }else{
    return $exitCode;
  }
}

&main(@ARGV);
