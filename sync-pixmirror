#!/usr/bin/perl
use strict;
use warnings;
use File::Spec;

my $ipmagicName = "sx";

my $targetSize = "1920x1080";

my $localDCIM = "$ENV{HOME}/Code/sx/backup/DCIM";
my $localPixmirror = "$ENV{HOME}/Code/sx/backup/DCIM-pixmirror";
my $localByDateDir = "/tmp/sync-pixmirror-bydate";

my $remotePixmirror = "/media/sdcard/phone/DCIM-pixmirror";
my $remotePixmirrorByDate = "/media/sdcard/phone/DCIM-pixmirror-bydate";
my $remoteSym = "/home/nemo/pixmirror";

sub run(@);
sub runQuiet(@);
sub runCmd($@);

sub main(@){
  my $host = `ipmagic $ipmagicName`;
  chomp $host;

  print "\n\n=====making pixmirror remote dirs\n";
  run "ipmagic", $ipmagicName, "
    mkdir -p $remotePixmirror
    rm -f $remoteSym
    ln -s $remotePixmirror $remoteSym
  ";

  print "\n\n=====running pixmirror locally\n";
  run "pixmirror", "--size=$targetSize", "--orient", $localDCIM, $localPixmirror;
  run "touch", "$localPixmirror/.nomedia" if not -f "$localPixmirror/.nomedia";

  print "\n\n=====syncing pixmirror local=>remote\n";
  run "rsync", "-avP", "--del",
    "$localPixmirror/",
    "nemo\@$host:$remotePixmirror";

  print "\n\n=====making bydate-subdirs locally\n";
  run "rm", "-r", $localByDateDir if -d $localByDateDir;
  run "mkdir", "-p", "$localByDateDir/";

  for my $dir(glob "$localPixmirror/????-??-??_*"){
    if($dir !~ /^(?:.*\/)?(\d\d\d\d)-(\d\d)-(\d\d)_(.+)$/){
      die "malformed dir: $dir\n";
    }
    my ($y, $m, $d, $title) = ($1, $2, $3, $4);
    my $subDir = "${y}/${m}";
    my $dirName = "${y}-${m}-${d}_${title}";

    my $remoteSrcAbsDir = "$remotePixmirror/$dirName";
    my $remoteRelBaseDir = "$remotePixmirrorByDate/$subDir";

    my $remoteSrcRelDir = File::Spec->abs2rel($remoteSrcAbsDir, $remoteRelBaseDir);

    my $localDestDir = "$localByDateDir/$subDir/$dirName";

    runQuiet "mkdir", "-p", "$localByDateDir/$subDir/";
    runQuiet "ln", "-s", $remoteSrcRelDir, $localDestDir;

    runQuiet "touch", "$localByDateDir/.nomedia", "-r", $dir;

    runQuiet "touch", "-h", "$localByDateDir/${y}/${m}/${dirName}", "-r", $dir;
    runQuiet "touch", "-h", "$localByDateDir/${y}/${m}", "-r", $dir;
    runQuiet "touch", "-h", "$localByDateDir/${y}", "-r", $dir;
    runQuiet "touch", "-h", "$localByDateDir", "-r", $dir;
  }
  for my $dir(glob "$localPixmirror/*/"){
    if($dir !~ /^$localPixmirror\/([a-zA-Z0-9_\-]+)\/?$/){
      die "malformed dir: $dir\n";
    }
    my $dirName = $1;
    next if $dirName =~ /^\d\d\d\d-\d\d-\d\d_/;

    my $remoteSrcAbsDir = "$remotePixmirror/$dirName";
    my $remoteRelBaseDir = "$remotePixmirrorByDate";

    my $remoteSrcRelDir = File::Spec->abs2rel($remoteSrcAbsDir, $remoteRelBaseDir);

    my $localDestDir = "$localByDateDir/$dirName";

    runQuiet "mkdir", "-p", "$localByDateDir";
    runQuiet "ln", "-s", $remoteSrcRelDir, $localDestDir;

    runQuiet "touch", "$localByDateDir/.nomedia", "-r", $dir;

    runQuiet "touch", "-h", "$localByDateDir/${dirName}", "-r", $dir;
    runQuiet "touch", "-h", "$localByDateDir", "-r", $dir;
  }

  print "\n\n=====syncing bydate-subdirs local=>remote\n";
  run "rsync", "-avP", "--del",
    "$localByDateDir/",
    "nemo\@$host:$remotePixmirrorByDate";
}

sub run(@){
  runCmd({printCmd => 1, failOnError => 1}, @_);
}
sub runQuiet(@){
  runCmd({printCmd => 0, failOnError => 1}, @_);
}


sub runCmd($@){
  my ($config, @cmd) = @_;

  my $conf = {
    wrapShell      => 0,
    printCmd       => 0,
    readProc       => 0,
    failOnError    => 1,
    retryAttempts  => 0,
    timeoutSeconds => 0,
    %$config,
  };

  for my $key(sort keys %$conf){
    if($key !~ /^(wrapShell|printCmd|readProc|failOnError|retryAttempts|timeoutSeconds)$/){
      die "ERROR: unknown run conf opt $key\n";
    }
  }

  if($$conf{wrapShell}){
    @cmd = ("sh", "-c", "@cmd");
  }
  if($$conf{timeoutSeconds} > 0){
    @cmd = ("timeout", $$conf{timeoutSeconds}, @cmd);
  }

  print "@cmd\n" if $$conf{printCmd};

  my $exitCode;
  my $error;
  my $stdout;
  my $retryAttempts = $$conf{retryAttempts};
  while(1){
    if($$conf{readProc}){
      my $cmdFH;
      if(open $cmdFH, "-|", @cmd){
        $stdout = join '', <$cmdFH>;
        close $cmdFH;
        $exitCode = $? >> 8;
        $error = $!;
      }else{
        $stdout = "";
        $exitCode = -1;
        $error = $1;
      }
    }else{
      system @cmd;
      $exitCode = $? >> 8;
      $error = $!;
    }

    if($exitCode != 0){
      my $timedOutMsg = "timedout=no";
      if($$conf{timeoutSeconds} > 0 and $exitCode == 124){
        $timedOutMsg = "timedout=yes";
      }

      if($retryAttempts > 0){
        $retryAttempts--;
        print "COMMAND FAILED ($timedOutMsg): @cmd\nRETRYING IN 3s...\n";
        sleep 3;
      }else{
        last;
      }
    }else{
      last;
    }
  }

  if($exitCode != 0 and $$conf{failOnError}){
    die "\n\nERROR: '@cmd' failed\n$error\n";
  }

  if($$conf{readProc}){
    return $stdout;
  }else{
    return $exitCode;
  }
}

&main(@ARGV);
