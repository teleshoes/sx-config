#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use PhoneBackupUtils;

my $USER = "nemo";
my $ROOT_USER = "root";
my $IPMAGIC_NAME = "sx";

my $BASE_DIR = "$ENV{HOME}/Code/sx";

my $LAP_REMOTE_DIR = "/home/$USER/.cache/lap";
my $LAP_BACKUP_DIR = "$BASE_DIR/backup/backup-lap";

my $PUSHUPS_REMOTE_DIR = "/home/$USER/.cache/pushups";
my $PUSHUPS_BACKUP_DIR = "$BASE_DIR/backup/backup-pushups";
my $PUSHUPS_LOCAL_CACHE_DIR = "$ENV{HOME}/.cache/pushups";

sub backupDir($$);
sub run(@);

sub main(@){
  backupDir($LAP_REMOTE_DIR, $LAP_BACKUP_DIR);
  backupDir($PUSHUPS_REMOTE_DIR, $PUSHUPS_BACKUP_DIR);

  run "rsync",
    "-avP",
    "--ignore-existing",
    "$PUSHUPS_BACKUP_DIR/",
    "$PUSHUPS_LOCAL_CACHE_DIR/",
  ;

  my @pushupFiles = glob "$PUSHUPS_BACKUP_DIR/*";
  for my $backupFile(@pushupFiles){
    my $name = $1 if $backupFile =~ /\/([^\/]+)$/;
    my $cachedFile = "$PUSHUPS_LOCAL_CACHE_DIR/$name";
    if(not -f $cachedFile){
      die "\n\n\n#####\nERROR: missing $cachedFile\n\n\n";
    }
    system "diff", $backupFile, $cachedFile;
    if($? != 0){
      die "\n\n\n#####\nERROR: $cachedFile does not match $backupFile\n\n\n";
    }
  }
}

sub backupDir($$){
  my ($remoteDir, $backupDir) = @_;
  run "mkdir -p $backupDir" if not -d $backupDir;
  die "ERROR: $backupDir is not a dir\n" if not -d $backupDir;

  runRetry 5, "ipmagic", $IPMAGIC_NAME, "mkdir -p $remoteDir";

  my @cmd = ("ipmagic", $IPMAGIC_NAME, "-u", $ROOT_USER, "--rsync",
    "-avP",
    "--one-file-system",
    ":$remoteDir/",
    "$backupDir/",
  );

  runRetry 5, @cmd;
}

&main(@ARGV);
