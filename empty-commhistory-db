PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE Groups (   id INTEGER PRIMARY KEY AUTOINCREMENT,   localUid TEXT,   remoteUids TEXT,   type INTEGER,   chatName TEXT,   lastModified INTEGER UNSIGNED );
CREATE TABLE Events (   id INTEGER PRIMARY KEY AUTOINCREMENT,   type INTEGER,   startTime INTEGER,   endTime INTEGER,   direction INTEGER,   isDraft INTEGER,   isRead INTEGER,   isMissedCall INTEGER,   isEmergencyCall INTEGER,   status INTEGER,   bytesReceived INTEGER,   localUid TEXT,   remoteUid TEXT,   parentId INTEGER,   subject TEXT,   freeText TEXT,   groupId INTEGER,   messageToken TEXT,   lastModified INTEGER,   vCardFileName TEXT,   vCardLabel TEXT,   isDeleted INTEGER,   reportDelivery INTEGER,   validityPeriod INTEGER,   contentLocation TEXT,   messageParts TEXT,   headers TEXT,   readStatus INTEGER,   reportRead INTEGER,   reportedReadRequested INTEGER,   mmsId INTEGER,   isAction INTEGER,   hasExtraProperties BOOL DEFAULT 0,   hasMessageParts BOOL DEFAULT 0,   FOREIGN KEY(groupId) REFERENCES Groups(id) ON DELETE CASCADE );
CREATE TABLE EventProperties (   eventId INTEGER,   key TEXT,   value BLOB,   FOREIGN KEY (eventId) REFERENCES Events(id) ON DELETE CASCADE,   PRIMARY KEY (eventId, key) ON CONFLICT REPLACE );
CREATE TABLE MessageParts (   id INTEGER PRIMARY KEY AUTOINCREMENT,   eventId INTEGER,   contentId TEXT,   contentType TEXT,   path TEXT,   FOREIGN KEY (eventId) REFERENCES Events(id) ON DELETE SET NULL );
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('Events',1);
INSERT INTO sqlite_sequence VALUES('Groups',1);
INSERT INTO sqlite_sequence VALUES('MessageParts',1);
CREATE INDEX events_remoteUid ON Events (remoteUid);
CREATE INDEX events_type ON Events (type);
CREATE INDEX events_messageToken ON Events (messageToken);
CREATE INDEX events_sorting ON Events (groupId, endTime DESC, id DESC);
CREATE INDEX events_unread ON Events (isRead);
CREATE TRIGGER eventproperties_flag_insert AFTER INSERT ON EventProperties   BEGIN     UPDATE Events SET hasExtraProperties=1 WHERE id=NEW.eventId;   END;
CREATE TRIGGER eventproperties_flag_delete AFTER DELETE ON EventProperties   WHEN (SELECT COUNT(*) FROM EventProperties WHERE eventId=OLD.eventId) = 0   BEGIN     UPDATE Events SET hasExtraProperties=0 WHERE id=OLD.eventId;   END;
CREATE INDEX messageparts_eventId ON MessageParts (eventId);
CREATE TRIGGER messageparts_flag_insert AFTER INSERT ON MessageParts   BEGIN     UPDATE Events SET hasMessageParts=1 WHERE id=NEW.eventId;   END;
CREATE TRIGGER messageparts_flag_delete AFTER DELETE ON MessageParts   WHEN (SELECT COUNT(*) FROM MessageParts WHERE eventId=OLD.eventId) = 0   BEGIN     UPDATE Events SET hasMessageParts=0 WHERE id=OLD.eventId;   END;
COMMIT;
