#!/usr/bin/perl
use strict;
use warnings;
use Cwd 'abs_path';

my $ipmagicName = "sx";
my $user = "nemo";

sub gitHead($);
sub gitCommit($$$$);
sub gitGetCommitsSince($$);
sub gitStatCommit($$);
sub gitAssertRepoDir($);
sub run(@);
sub runQuiet(@);
sub tryrun(@);
sub tryrunQuiet(@);
sub wrapRun($$@);

my $BASE_DIR = "$ENV{HOME}/Code/sx";
my $BACKUP_DIR = "$BASE_DIR/backup";

my $MY_NUMBER_FILE = "$BACKUP_DIR/my_number";

my $DB_DIR = "$BACKUP_DIR/backup-dbs";
my $DB_RAW_DIR = "$DB_DIR/raw";
my $DB_REPO = "$DB_DIR/repo";

my $SMS_DIR = "$BACKUP_DIR/backup-sms";
my $SMS_RAW_DIR = "$SMS_DIR/raw";
my $SMS_REPO = "$SMS_DIR/repo";
my $SMS_BY_CONTACT_DIR = "$SMS_DIR/by-contact";

my $CALL_DIR = "$BACKUP_DIR/backup-call";
my $CALL_RAW_DIR = "$CALL_DIR/raw";
my $CALL_REPO = "$CALL_DIR/repo";
my $CALL_BY_CONTACT_DIR = "$CALL_DIR/by-contact";

my $CONTACTS_DIR = "$BACKUP_DIR/backup-contacts";
my $CONTACTS_RAW_DIR = "$CONTACTS_DIR/raw";
my $CONTACTS_REPO = "$CONTACTS_DIR/repo";

my $COMM_TOOLS_DIR = "$BASE_DIR/comm-tools";
my $CMD_SQLITE_DUMP = "$COMM_TOOLS_DIR/sqlite-dump.pl";
my $CMD_ADD_COMM_TO_REPO = "$COMM_TOOLS_DIR/add-comm-to-repo.pl";
my $CMD_SMS_DB_IMPORTER = "$COMM_TOOLS_DIR/sms_db_importer.py";
my $CMD_CONTACTS_SORT = "$COMM_TOOLS_DIR/contacts-sort.pl";
my $CMD_CONTACTS_SYMLINKS = "$COMM_TOOLS_DIR/contacts-symlinks.pl";

my $COMMHISTORY_DB_REMOTE_DIR = "/home/nemo/.local/share/commhistory";
my $CONTACTS_DB_REMOTE_DIR = "/home/nemo/.local/share/system/privileged/Contacts/qtcontacts-sqlite";
my $CONTACTS_PRIV_DB_REMOTE_DIR = "/home/nemo/.local/share/system/privileged/Contacts/qtcontacts-sqlite";
my $MMS_PARTS_REMOTE_DIR = "/home/nemo/.local/share/commhistory/data";

my $MMS_MSG_REPO = "$BACKUP_DIR/backup-mms/repo";
my $MMS_PARTS_REPO = "$BACKUP_DIR/backup-mms/parts-repo";
my $MMS_BY_CONTACT_DIR = "$BACKUP_DIR/backup-mms/msg-by-contact";
my $MMSPIX_BY_CONTACT_DIR = "$BACKUP_DIR/backup-mms/pix-by-contact";

my $REMOTE_REPO_DIR_SMS = "/media/sdcard/phone/comm-repos/sms/repo";
my $REMOTE_REPO_DIR_CALL = "/media/sdcard/phone/comm-repos/call/repo";
my $REMOTE_REPO_DIR_MMS = "/media/sdcard/phone/comm-repos/mms/repo";

my $REMOTE_BYCONTACT_DIR_SMS = "/media/sdcard/phone/comm-repos/sms/by-contact";
my $REMOTE_BYCONTACT_DIR_CALL = "/media/sdcard/phone/comm-repos/call/by-contact";
my $REMOTE_BYCONTACT_DIR_MMS = "/media/sdcard/phone/comm-repos/mms/msg-by-contact";
my $REMOTE_BYCONTACT_DIR_MMSPIX = "/media/sdcard/phone/comm-repos/mms/pix-by-contact";

my $USAGE = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS]
    backup commhistory DB, contacts/contacts-priv DB, and MMS parts repo
    process sms/calls/mms into repos
    create sms/call/mms/mms-pix by-contact symlinks locally
    copy by-contact symlinks to device

  OPTS
    --quick|--no-rebuild
      skip clearing symlink dirs (pass --no-rebuild to $CMD_CONTACTS_SYMLINKS)
      (this is the default)

    --rebuild|--slow
      clear+rebuild symlink dirs (pas --rebuild to $CMD_CONTACTS_SYMLINKS)
";

sub main(@){
  my $rebuildSymlinks = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--quick|--no-rebuild)$/){
      $rebuildSymlinks = 0;
    }elsif($arg =~ /^(--rebuild|--slow)$/){
      $rebuildSymlinks = 1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  my $host = `ipmagic $ipmagicName`;
  die "failed to get host" if $? != 0;
  chomp $host;

  my $now = `date +'%Y-%m-%d_%s'`;
  chomp $now;

  my $tmpDir = "/tmp/comm-dbs-$now";
  my $commhistoryDb = "$DB_RAW_DIR/commhistory/commhistory-$now.db";
  my $contactsDb = "$DB_RAW_DIR/contacts/contacts-$now.db";
  my $contactsPrivDb= "$DB_RAW_DIR/contacts-priv/contacts-priv-$now.db";
  my $contactsTmpVcf = "/tmp/contacts-$now.vcf";
  my $localContactsVcf = "$CONTACTS_RAW_DIR/contacts-$now.vcf";

  #########################################################
  # copy raw data (dbs, mms files) phone => computer
  #########################################################
  print "\n\n=====COPY RAW DATA\n";
  run "ssh", "root\@$host", "
    echo preparing sqlite DBs && \
    \
    cd $COMMHISTORY_DB_REMOTE_DIR && \
    mkdir -p $tmpDir/commhistory/ && \
    cp -ar commhistory.db* $tmpDir/commhistory/ && \
    test -f $tmpDir/commhistory/commhistory.db && \
    sqlite3 $tmpDir/commhistory/commhistory.db 'PRAGMA wal_checkpoint' && \
    test ! -f $tmpDir/commhistory/commhistory.db-wal && \
    \
    cd $CONTACTS_DB_REMOTE_DIR && \
    mkdir -p $tmpDir/contacts/ && \
    cp -ar contacts.db* $tmpDir/contacts/ && \
    test -f $tmpDir/contacts/contacts.db && \
    sqlite3 $tmpDir/contacts/contacts.db 'PRAGMA wal_checkpoint' && \
    test ! -f $tmpDir/contacts/contacts.db-wal && \
    \
    cd $CONTACTS_PRIV_DB_REMOTE_DIR && \
    mkdir -p $tmpDir/contacts-priv/ && \
    cp -a contacts.db* $tmpDir/contacts-priv/ && \
    test -f $tmpDir/contacts-priv/contacts.db && \
    sqlite3 $tmpDir/contacts-priv/contacts.db 'PRAGMA wal_checkpoint' && \
    test ! -f $tmpDir/contacts-priv/contacts.db-wal && \
    \
    echo success || ( echo FAILED TO PROCESS SQLITE DBS && exit 1 )
  ";

  run "scp", "$user\@$host:$tmpDir/commhistory/commhistory.db", $commhistoryDb;
  run "scp", "$user\@$host:$tmpDir/contacts/contacts.db", $contactsDb;
  run "scp", "$user\@$host:$tmpDir/contacts-priv/contacts.db", $contactsPrivDb;
  run "rsync", "-avP", "$user\@$host:$MMS_PARTS_REMOTE_DIR/", "$MMS_PARTS_REPO/";

  run "ssh", "nemo\@$host", "vcardconverter-sudo -e $contactsTmpVcf";
  run "scp", "root\@$host:$contactsTmpVcf", $localContactsVcf;

  #########################################################
  # prepare git repo summary
  #########################################################
  my @allRepos = ($DB_REPO, $MMS_PARTS_REPO, $CONTACTS_REPO,
    $SMS_REPO, $MMS_MSG_REPO, $CALL_REPO);
  my %oldRepoHeads = map {$_ => gitHead $_} @allRepos;

  #########################################################
  # add raw data to repos
  #########################################################
  print "\n\n=====ADD RAW DATA TO REPOS\n";
  run "rm", "-f", "$DB_REPO/commhistory-db";
  run "$CMD_SQLITE_DUMP", $commhistoryDb, "$DB_REPO/commhistory-db";
  gitCommit $DB_REPO, "commhistory-db", "nodiff", "commhistory db automatic commit";

  run "rm", "-f", "$DB_REPO/contacts-db";
  run "$CMD_SQLITE_DUMP", $contactsDb, "$DB_REPO/contacts-db";
  gitCommit $DB_REPO, "contacts-db", "nodiff", "contacts db automatic commit";

  run "rm", "-f", "$DB_REPO/contacts-priv-db";
  run "$CMD_SQLITE_DUMP", $contactsPrivDb, "$DB_REPO/contacts-priv-db";
  gitCommit $DB_REPO, "contacts-priv-db", "nodiff", "contacts priv db automatic commit";

  gitCommit $MMS_PARTS_REPO, "-A", "nodiff", "automatic commit";

  #########################################################
  # parse contacts into repo
  #########################################################
  print "\n\n=====PARSE CONTACTS\n";
  run "rm", "-f", "$CONTACTS_REPO/contacts.vcf";
  run "$CMD_CONTACTS_SORT", $localContactsVcf, "$CONTACTS_REPO/contacts.vcf";
  gitCommit $CONTACTS_REPO, "contacts.vcf", "diff", "automatic commit";

  #########################################################
  # parse SMS+CALLS+MMS into repo
  #########################################################
  print "\n\n=====PARSE SMS+CALLS+MMS\n";
  my $myNumber = `cat $MY_NUMBER_FILE`;
  chomp $myNumber;
  die "missing/malformed $MY_NUMBER_FILE\n" if $myNumber !~ /^\+?\d+$/;

  my $smsFile = "$SMS_RAW_DIR/sms-$now.sms";
  my $callFile = "$CALL_RAW_DIR/call-$now.call";

  run $CMD_SMS_DB_IMPORTER, "export-from-db-sms",
    $commhistoryDb, $smsFile;
  run $CMD_SMS_DB_IMPORTER, "export-from-db-calls",
    $commhistoryDb, $callFile;
  run $CMD_SMS_DB_IMPORTER, "export-from-db-mms",
    $commhistoryDb, $MMS_MSG_REPO, $MMS_PARTS_REPO, "--my-number", $myNumber;

  run "$CMD_ADD_COMM_TO_REPO", "--sms", $smsFile;
  run "$CMD_ADD_COMM_TO_REPO", "--call", $callFile;

  print "SMS REPO\n";
  gitCommit $SMS_REPO, "*.sms", "diff", "automatic commit";
  print "===\n";
  print "CALL REPO\n";
  gitCommit $CALL_REPO, "*.call", "diff", "automatic commit";
  print "===\n";
  print "MMS REPO\n";
  gitCommit $MMS_MSG_REPO, "-A", "diff", "automatic commit";

  my @msgDirs = grep {-d $_} glob "$MMS_MSG_REPO/*";
  my $msgDirCount = @msgDirs;
  print "touching $msgDirCount MMS message dirs\n";
  for my $msgDir(@msgDirs){
    my $dirName = $msgDir;
    $dirName =~ s/^$MMS_MSG_REPO\/?//;
    if($dirName =~ /\// or not -d "$MMS_MSG_REPO/$dirName"){
      die "error parsing mms dir: $msgDir\n";
    }elsif($dirName =~ /^(\d{13})_/){
      my $dateMillis = $1;
      my $dateSex = int($dateMillis/1000);
      tryrunQuiet "touch", $msgDir, "-d", "\@$dateSex";
    }else{
      die "invalid MMS dir name: $dirName\n";
    }
  }

  #########################################################
  # by-contact symlinks
  #########################################################
  print "\n\n=====SMS/CALL BY-CONTACT SYMLINKS\n";
  my $rebuildArg = $rebuildSymlinks ? "--rebuild" : "--no-rebuild";

  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--sms",
    "$CONTACTS_REPO/contacts.vcf", $SMS_REPO, $SMS_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--call",
    "$CONTACTS_REPO/contacts.vcf", $CALL_REPO, $CALL_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--mms",
    "$CONTACTS_REPO/contacts.vcf", $MMS_MSG_REPO, $MMS_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--mmspix",
    "$CONTACTS_REPO/contacts.vcf", $MMS_MSG_REPO, $MMSPIX_BY_CONTACT_DIR;

  run "ssh", "$user\@$host", "
    mkdir -p $REMOTE_REPO_DIR_SMS;
    mkdir -p $REMOTE_REPO_DIR_CALL;
    mkdir -p $REMOTE_REPO_DIR_MMS;

    mkdir -p $REMOTE_BYCONTACT_DIR_SMS;
    mkdir -p $REMOTE_BYCONTACT_DIR_CALL;
    mkdir -p $REMOTE_BYCONTACT_DIR_MMS;
    mkdir -p $REMOTE_BYCONTACT_DIR_MMSPIX;
  ";

  run "rsync", "-avP", "--del", "--exclude=.git/",
    "$SMS_REPO/", "$user\@$host:$REMOTE_REPO_DIR_SMS/";
  run "rsync", "-avP", "--del", "--exclude=.git/",
    "$CALL_REPO/", "$user\@$host:$REMOTE_REPO_DIR_CALL/";
  run "rsync", "-avP", "--del", "--exclude=.git/",
    "$MMS_MSG_REPO/", "$user\@$host:$REMOTE_REPO_DIR_MMS/";

  run "rsync", "-avP", "--del", "$SMS_BY_CONTACT_DIR/", "$user\@$host:$REMOTE_BYCONTACT_DIR_SMS/";
  run "rsync", "-avP", "--del", "$CALL_BY_CONTACT_DIR/", "$user\@$host:$REMOTE_BYCONTACT_DIR_CALL/";
  run "rsync", "-avP", "--del", "$MMS_BY_CONTACT_DIR/", "$user\@$host:$REMOTE_BYCONTACT_DIR_MMS/";
  run "rsync", "-avP", "--del", "$MMSPIX_BY_CONTACT_DIR/", "$user\@$host:$REMOTE_BYCONTACT_DIR_MMSPIX/";

  #########################################################
  # show git repo summary
  #########################################################
  print "\n\n=====GIT REPO SUMMARY\n";
  my %newRepoHeads = map {$_ => gitHead $_} @allRepos;
  for my $repo(@allRepos){
    my $oldHead = $oldRepoHeads{$repo};
    my $newHead = $newRepoHeads{$repo};
    if($oldHead ne $newHead){
      my @commits = gitGetCommitsSince $repo, $oldHead;
      die "error listing commits since $oldHead\n" if @commits == 0;
      for my $commit(reverse @commits){
        print gitStatCommit($repo, $commit);
      }
    }
  }
}

sub gitCommit($$$$){
  my ($repoDir, $addArg, $diff, $commitMessage) = @_;
  chdir $repoDir;
  gitAssertRepoDir $repoDir;

  runQuiet "git", "add", $addArg;
  if(defined $diff and $diff eq "diff"){
    runQuiet "git", "--no-pager", "diff";
    runQuiet "git", "--no-pager", "diff", "--cached";
  }

  my @status = `git status --short 2>&1`;
  for my $line(@status){
    die "unexpected git status: @status" if $line !~ /^(M|A)\s/;
  }

  if(@status > 0){
    runQuiet "git", "commit", "-m", $commitMessage;
  }

  @status = `git status --short 2>&1`;
  if(@status > 0){
    die "git repo $repoDir has changes or errors: @status";
  }
}

sub gitHead($){
  my ($repoDir) = @_;
  chdir $repoDir;
  gitAssertRepoDir $repoDir;

  my $head = `git rev-parse HEAD`;
  chomp $head;
  die "invalid commit: $head\n" if $head !~ /^[0-9a-f]{40}$/;
  return $head;

  my @status = `git status --short 2>&1`;
  if(@status > 0){
    die "git repo $repoDir has changes or errors: @status";
  }
}

sub gitGetCommitsSince($$){
  my ($repoDir, $commit) = @_;
  chdir $repoDir;
  gitAssertRepoDir $repoDir;

  my @commits = `git rev-list $commit..HEAD`;
  chomp foreach @commits;
  for my $commit(@commits){
    die "invalid output of rev-list: $commit\n" if $commit !~ /^[0-9a-f]{40}$/;
  }
  return @commits;
}

sub gitStatCommit($$){
  my ($repoDir, $commit) = @_;
  chdir $repoDir;
  gitAssertRepoDir $repoDir;

  my $stat = `git show $commit --format='' --stat`;
  return $stat;
}

sub gitAssertRepoDir($){
  my ($repoDir) = @_;
  my $gitDir = `git rev-parse --show-toplevel`;
  chomp $gitDir;
  my $absGitDir = abs_path $gitDir;
  my $absRepoDir = abs_path $repoDir;
  if($absGitDir ne $absRepoDir){
    die "git toplevel (\"$gitDir\") does not match expected (\"$repoDir\")";
  }
}

sub run(@){
  wrapRun 1, 1, @_;
}
sub runQuiet(@){
  wrapRun 0, 1, @_;
}
sub tryrun(@){
  wrapRun 1, 0, @_;
}
sub tryrunQuiet(@){
  wrapRun 0, 0, @_;
}
sub wrapRun($$@){
  my ($printCmd, $failOnError, @cmd) = @_;
  print "@cmd\n" if $printCmd;
  system @cmd;
  if($failOnError and $? != 0){
    die "\n\nERROR: $_[0]\n";
  }
}

&main(@ARGV);
