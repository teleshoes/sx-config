#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use PhoneBackupUtils;
use Cwd 'abs_path';

my $IPMAGIC_NAME = "sx";
my $USER = "nemo";

sub fetchRawData($);
sub copyFetchedDataToRawBackupFiles($);
sub prepareGitRepoSummary();
sub addRawDataToRepos($);
sub parseContactsIntoRepo($);
sub parseSMSCallsMMSIntoRepo($);
sub buildByContactSymlinks($);
sub syncByContactSymlinksToRemote();
sub showGitRepoSummary($);
sub getRawBackupFilePaths($);
sub cleanupFetchedBackups();
sub gitHead($);
sub gitCommit($$$$);
sub gitGetCommitsSince($$);
sub gitStatCommit($$);

my $BASE_DIR = "$ENV{HOME}/Code/sx";
my $BACKUP_DIR = "$BASE_DIR/backup";

my $RAW_FETCHED_DATA_DIR = "$BACKUP_DIR/backup-comm";
my $LATEST_BACKUP_NAME_FILE = "$BACKUP_DIR/backup-comm/latest-backup-name";

my $MY_NUMBER_FILE = "$BACKUP_DIR/my_number";

my $DB_DIR = "$BACKUP_DIR/backup-dbs";
my $DB_RAW_DIR = "$DB_DIR/raw";
my $DB_REPO = "$DB_DIR/repo";

my $SMS_DIR = "$BACKUP_DIR/backup-sms";
my $SMS_RAW_DIR = "$SMS_DIR/raw";
my $SMS_REPO = "$SMS_DIR/repo";
my $SMS_BY_CONTACT_DIR = "$SMS_DIR/by-contact";

my $CALL_DIR = "$BACKUP_DIR/backup-call";
my $CALL_RAW_DIR = "$CALL_DIR/raw";
my $CALL_REPO = "$CALL_DIR/repo";
my $CALL_BY_CONTACT_DIR = "$CALL_DIR/by-contact";

my $CONTACTS_DIR = "$BACKUP_DIR/backup-contacts";
my $CONTACTS_RAW_DIR = "$CONTACTS_DIR/raw";
my $CONTACTS_REPO = "$CONTACTS_DIR/repo";

my $COMM_TOOLS_DIR = "$BASE_DIR/comm-tools";
my $CMD_SQLITE_DUMP = "$COMM_TOOLS_DIR/sqlite-dump.pl";
my $CMD_ADD_COMM_TO_REPO = "$COMM_TOOLS_DIR/add-comm-to-repo.pl";
my $CMD_SMS_DB_IMPORTER = "$COMM_TOOLS_DIR/sms_db_importer.py";
my $CMD_CONTACTS_SORT = "$COMM_TOOLS_DIR/contacts-sort.pl";
my $CMD_CONTACTS_SYMLINKS = "$COMM_TOOLS_DIR/contacts-symlinks.pl";

my $REMOTE_COMMHISTORY_DB = "/home/$USER/.local/share/commhistory/commhistory.db";
my $REMOTE_CONTACTS_DB = "/home/$USER/.local/share/system/privileged/Contacts/qtcontacts-sqlite/contacts.db";
my $REMOTE_CONTACTS_PRIV_DB = "/home/$USER/.local/share/system/privileged/Contacts/qtcontacts-sqlite/contacts.db";
my $REMOTE_MMS_PARTS_DIR = "/home/$USER/.local/share/commhistory/data";

my $MMS_MSG_REPO = "$BACKUP_DIR/backup-mms/repo";
my $MMS_PARTS_REPO = "$BACKUP_DIR/backup-mms/parts-repo";
my $MMS_BY_CONTACT_DIR = "$BACKUP_DIR/backup-mms/msg-by-contact";
my $MMSPIX_BY_CONTACT_DIR = "$BACKUP_DIR/backup-mms/pix-by-contact";

my $REMOTE_REPO_DIR_SMS = "/media/sdcard/phone/comm-repos/sms/repo";
my $REMOTE_REPO_DIR_CALL = "/media/sdcard/phone/comm-repos/call/repo";
my $REMOTE_REPO_DIR_MMS = "/media/sdcard/phone/comm-repos/mms/repo";

my $REMOTE_BYCONTACT_DIR_SMS = "/media/sdcard/phone/comm-repos/sms/by-contact";
my $REMOTE_BYCONTACT_DIR_CALL = "/media/sdcard/phone/comm-repos/call/by-contact";
my $REMOTE_BYCONTACT_DIR_MMS = "/media/sdcard/phone/comm-repos/mms/msg-by-contact";
my $REMOTE_BYCONTACT_DIR_MMSPIX = "/media/sdcard/phone/comm-repos/mms/pix-by-contact";

my @ALL_REPOS = ($DB_REPO, $MMS_PARTS_REPO, $CONTACTS_REPO, $SMS_REPO, $MMS_MSG_REPO, $CALL_REPO);

my $USAGE = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS]
    backup commhistory DB, contacts/contacts-priv DB, and MMS parts repo
    process sms/calls/mms into repos
    create sms/call/mms/mms-pix by-contact symlinks locally
    copy by-contact symlinks to device

  OPTS
    -q | -f | --quick | --fetch-only
      same as: --perform-fetch --no-perform-apply
        -fetch remote backups, but do NOT apply

    -a | --apply-only
      same as: --no-perform-fetch --perform-apply
        -do NOT fetch remote backups, apply the latest fetch

    -c | --cleanup-only
      same as: --no-perform-fetch --no-perform-apply --perform-cleanup

    --perform-fetch
      fetch commhistory-db + contacts-db + contacts-priv-db + contacts-vcf + MMS parts repo
      (this is the defaut)
    --no-perform-fetch
      do not fetch remote backups

    --perform-apply
      process+apply the latest fetched backup
        -use the backup just fetched with --perform-fetch, or the latest otherwise
        -fail if --no-perform-fetch and there are no stored backups
      (this is the default)
    --no-perform-apply
      do not apply any backups

    --perform-cleanup
      remove fetched backups that appear to have been applied
        -find backups in \"$RAW_FETCHED_DATA_DIR/*\"
          where all the files have been copied to the raw backup files
        -remove $LATEST_BACKUP_NAME_FILE if that backup dir was removed
    --no-perform-cleanup
      do not cleanup fetched backups
      (this is the default)

    --rebuild|--slow
      clear+rebuild symlink dirs (pas --rebuild to $CMD_CONTACTS_SYMLINKS)
    --no-rebuild
      skip clearing symlink dirs (pass --no-rebuild to $CMD_CONTACTS_SYMLINKS)
      (this is the default)
";

sub main(@){
  my $opts = {
    performFetch    => 1,
    performApply    => 1,
    performCleanup  => 0,
    rebuildSymlinks => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-q|-f|--quick|--fetch-only)$/){
      $$opts{performFetch} = 1;
      $$opts{performApply} = 0;
    }elsif($arg =~ /^(-a|--apply-only)$/){
      $$opts{performFetch} = 0;
      $$opts{performApply} = 1;
    }elsif($arg =~ /^(-c|--cleanup-only)$/){
      $$opts{performFetch} = 0;
      $$opts{performApply} = 0;
      $$opts{performCleanup} = 1;
    }elsif($arg =~ /^(--perform-fetch)$/){
      $$opts{performFetch} = 1;
    }elsif($arg =~ /^(--no-perform-fetch)$/){
      $$opts{performFetch} = 0;
    }elsif($arg =~ /^(--perform-apply)$/){
      $$opts{performApply} = 1;
    }elsif($arg =~ /^(--no-perform-apply)$/){
      $$opts{performApply} = 0;
    }elsif($arg =~ /^(--perform-cleanup)$/){
      $$opts{performCleanup} = 1;
    }elsif($arg =~ /^(--no-perform-cleanup)$/){
      $$opts{performCleanup} = 0;
    }elsif($arg =~ /^(--rebuild|--slow)$/){
      $$opts{rebuildSymlinks} = 1;
    }elsif($arg =~ /^(--no-rebuild)$/){
      $$opts{rebuildSymlinks} = 0;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  my $backupName;
  if($$opts{performFetch}){
    my $nowDateFmt = `date +'%Y-%m-%d_%s'`;
    chomp $nowDateFmt;

    $backupName = $nowDateFmt;

    fetchRawData($backupName);
    writeFile($LATEST_BACKUP_NAME_FILE, "$backupName\n");
  }

  if($$opts{performApply}){
    if(not defined $backupName){
      $backupName = readFile($LATEST_BACKUP_NAME_FILE);
      chomp $backupName;
      print "\n\n=====APPLYING BACKUP_NAME $backupName\n";
    }
    if($backupName !~ /^\d\d\d\d-\d\d-\d\d_\d+$/){
      die "ERROR: malformed BACKUP_NAME \"$backupName\"\n";
    }

    copyFetchedDataToRawBackupFiles($backupName);

    my $oldRepoHeads = prepareGitRepoSummary();

    addRawDataToRepos($backupName);
    parseContactsIntoRepo($backupName);
    parseSMSCallsMMSIntoRepo($backupName);

    buildByContactSymlinks($$opts{rebuildSymlinks});
    syncByContactSymlinksToRemote();

    showGitRepoSummary($oldRepoHeads);
  }

  if($$opts{performCleanup}){
    cleanupFetchedBackups();
  }
}

# copy raw data (dbs, mms files) phone => computer
sub fetchRawData($){
  my ($backupName) = @_;
  my $tmpDir = "/tmp/backup-comm-$backupName";
  my $fetchedBackupDir = "$RAW_FETCHED_DATA_DIR/$backupName";

  print "\n\n=====COPY RAW DATA\n";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", "root", "
    echo preparing sqlite DBs \\
    && rm -rf $tmpDir \\
    && mkdir -p $tmpDir \\
    && chown $USER:$USER $tmpDir \\
    && sqlite3 $REMOTE_COMMHISTORY_DB \"vacuum into '$tmpDir/commhistory.db'\" \\
    && sqlite3 $REMOTE_CONTACTS_DB \"vacuum into '$tmpDir/contacts.db'\" \\
    && sqlite3 $REMOTE_CONTACTS_PRIV_DB \"vacuum into '$tmpDir/contacts-priv.db'\" \\
    && echo preparing contacts.vcf \\
    && vcardconverter-sudo -e \"$tmpDir/contacts.vcf\" \\
    && echo verifying remote files \\
    && ls $tmpDir \\
    && test -f $tmpDir/commhistory.db \\
    && test -f $tmpDir/contacts.db \\
    && test -f $tmpDir/contacts-priv.db \\
    && test -f $tmpDir/contacts.vcf \\
    && echo success || ( echo FAILED TO PROCESS SQLITE DBS && exit 1 )
  ";

  run "mkdir", "-p", $fetchedBackupDir;

  print "\nfetching sqlite DBs + contacts vcf\n";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP",
    ":$tmpDir/", "$fetchedBackupDir/";

  print "\nfetching MMS parts dir\n";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP",
    ":$REMOTE_MMS_PARTS_DIR/", "$MMS_PARTS_REPO/";
}

sub copyFetchedDataToRawBackupFiles($){
  my ($backupName) = @_;
  my $fetchedBackupDir = "$RAW_FETCHED_DATA_DIR/$backupName";
  my $rawBackupFiles = getRawBackupFilePaths($backupName);

  if(not -f "$fetchedBackupDir/commhistory.db"){
    die "ERROR: missing commhistoryDb from fetch $backupName\n";
  }elsif(not -f "$fetchedBackupDir/contacts.db"){
    die "ERROR: missing contactsDb from fetch $backupName\n";
  }elsif(not -f "$fetchedBackupDir/contacts-priv.db"){
    die "ERROR: missing contactsPrivDb from fetch $backupName\n";
  }elsif(not -f "$fetchedBackupDir/contacts.vcf"){
    die "ERROR: missing contactsVcf from fetch $backupName\n";
  }

  run "cp", "-ar", "$fetchedBackupDir/commhistory.db", $$rawBackupFiles{commhistoryDb};
  run "cp", "-ar", "$fetchedBackupDir/contacts.db", $$rawBackupFiles{contactsDb};
  run "cp", "-ar", "$fetchedBackupDir/contacts-priv.db", $$rawBackupFiles{contactsPrivDb};
  run "cp", "-ar", "$fetchedBackupDir/contacts.vcf", $$rawBackupFiles{contactsVcf};
}

sub prepareGitRepoSummary(){
  for my $repo(@ALL_REPOS){
    #mms-parts repo is rsync'd directly from phone
    if($repo ne $MMS_PARTS_REPO){
      gitAssertClean($repo);
    }
  }

  my $oldRepoHeads = { map {$_ => gitHead $_} @ALL_REPOS };

  return $oldRepoHeads;
}

sub addRawDataToRepos($){
  my ($backupName) = @_;
  my $rawBackupFiles = getRawBackupFilePaths($backupName);

  print "\n\n=====ADD RAW DATA TO REPOS\n";
  run "rm", "-f", "$DB_REPO/commhistory-db";
  run "$CMD_SQLITE_DUMP", $$rawBackupFiles{commhistoryDb}, "$DB_REPO/commhistory-db";
  gitCommit $DB_REPO, "commhistory-db", "nodiff", "commhistory db automatic commit";

  run "rm", "-f", "$DB_REPO/contacts-db";
  run "$CMD_SQLITE_DUMP", $$rawBackupFiles{contactsDb}, "$DB_REPO/contacts-db";
  gitCommit $DB_REPO, "contacts-db", "nodiff", "contacts db automatic commit";

  run "rm", "-f", "$DB_REPO/contacts-priv-db";
  run "$CMD_SQLITE_DUMP", $$rawBackupFiles{contactsPrivDb}, "$DB_REPO/contacts-priv-db";
  gitCommit $DB_REPO, "contacts-priv-db", "nodiff", "contacts priv db automatic commit";

  gitCommit $MMS_PARTS_REPO, "-A", "nodiff", "automatic commit";
}

sub parseContactsIntoRepo($){
  my ($backupName) = @_;
  my $rawBackupFiles = getRawBackupFilePaths($backupName);

  print "\n\n=====PARSE CONTACTS\n";
  run "rm", "-f", "$CONTACTS_REPO/contacts.vcf";
  run "$CMD_CONTACTS_SORT", $$rawBackupFiles{contactsVcf}, "$CONTACTS_REPO/contacts.vcf";
  gitCommit $CONTACTS_REPO, "contacts.vcf", "diff", "automatic commit";
}

sub parseSMSCallsMMSIntoRepo($){
  my ($backupName) = @_;
  my $rawBackupFiles = getRawBackupFilePaths($backupName);

  print "\n\n=====PARSE SMS+CALLS+MMS\n";
  my $myNumber = readFile $MY_NUMBER_FILE;
  chomp $myNumber;
  die "\nERROR: missing/malformed $MY_NUMBER_FILE\n" if $myNumber !~ /^\+?\d+$/;

  my $smsFile = "$SMS_RAW_DIR/sms-$backupName.sms";
  my $callFile = "$CALL_RAW_DIR/call-$backupName.call";

  run $CMD_SMS_DB_IMPORTER, "export-from-db-sms",
    $$rawBackupFiles{commhistoryDb}, $smsFile;
  run $CMD_SMS_DB_IMPORTER, "export-from-db-calls",
    $$rawBackupFiles{commhistoryDb}, $callFile;
  run $CMD_SMS_DB_IMPORTER, "export-from-db-mms",
    $$rawBackupFiles{commhistoryDb}, $MMS_MSG_REPO, $MMS_PARTS_REPO, "--my-number", $myNumber;

  print "removing dupe sms/calls\n";
  run "$CMD_ADD_COMM_TO_REPO", "--remove-exact-dupes";
  gitCommit $SMS_REPO, "*.sms", "diff", "automatic commit - remove duplicate sms";
  gitCommit $CALL_REPO, "*.call", "diff", "automatic commit - remove duplicate calls";

  print "adding sms/calls to repo\n";
  run "$CMD_ADD_COMM_TO_REPO", "--sms", $smsFile;
  run "$CMD_ADD_COMM_TO_REPO", "--call", $callFile;

  print "SMS REPO\n";
  gitCommit $SMS_REPO, "*.sms", "diff", "automatic commit";
  print "===\n";
  print "CALL REPO\n";
  gitCommit $CALL_REPO, "*.call", "diff", "automatic commit";
  print "===\n";
  print "MMS REPO\n";
  gitCommit $MMS_MSG_REPO, "-A", "diff", "automatic commit";

  print "touching sms/calls\n";
  run "$CMD_ADD_COMM_TO_REPO", "--touch";

  my @msgDirs = grep {-d $_} glob "$MMS_MSG_REPO/*";
  my $msgDirCount = @msgDirs;
  print "touching $msgDirCount MMS message dirs\n";
  for my $msgDir(@msgDirs){
    my $dirName = $msgDir;
    $dirName =~ s/^$MMS_MSG_REPO\/?//;
    if($dirName =~ /\// or not -d "$MMS_MSG_REPO/$dirName"){
      die "\nERROR: failed parsing mms dir '$msgDir'\n";
    }elsif($dirName =~ /^(\d{13})_/){
      my $dateMillis = $1;
      my $dateFracS = sprintf "%.3f", $dateMillis/1000.0;
      tryrunQuiet "touch", $msgDir, "-d", "\@$dateFracS";
    }else{
      die "\nERROR: invalid MMS dir name '$dirName'\n";
    }
  }
}

sub buildByContactSymlinks($){
  my ($rebuildSymlinks) = @_;

  print "\n\n=====SMS/CALL BY-CONTACT SYMLINKS\n";
  my $rebuildArg = $rebuildSymlinks ? "--rebuild" : "--no-rebuild";

  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--sms",
    "$CONTACTS_REPO/contacts.vcf", $SMS_REPO, $SMS_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--call",
    "$CONTACTS_REPO/contacts.vcf", $CALL_REPO, $CALL_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--mms",
    "$CONTACTS_REPO/contacts.vcf", $MMS_MSG_REPO, $MMS_BY_CONTACT_DIR;
  run "$CMD_CONTACTS_SYMLINKS", $rebuildArg, "--mmspix",
    "$CONTACTS_REPO/contacts.vcf", $MMS_MSG_REPO, $MMSPIX_BY_CONTACT_DIR;
}

sub syncByContactSymlinksToRemote(){
  runRetry 5, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "
    mkdir -p $REMOTE_REPO_DIR_SMS;
    mkdir -p $REMOTE_REPO_DIR_CALL;
    mkdir -p $REMOTE_REPO_DIR_MMS;

    mkdir -p $REMOTE_BYCONTACT_DIR_SMS;
    mkdir -p $REMOTE_BYCONTACT_DIR_CALL;
    mkdir -p $REMOTE_BYCONTACT_DIR_MMS;
    mkdir -p $REMOTE_BYCONTACT_DIR_MMSPIX;
  ";

  runRetry 300, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del", "--exclude=.git/",
    "$SMS_REPO/", ":$REMOTE_REPO_DIR_SMS/";
  runRetry 300, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del", "--exclude=.git/",
    "$CALL_REPO/", ":$REMOTE_REPO_DIR_CALL/";
  runRetry 300, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del", "--exclude=.git/",
    "$MMS_MSG_REPO/", ":$REMOTE_REPO_DIR_MMS/";

  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$SMS_BY_CONTACT_DIR/", ":$REMOTE_BYCONTACT_DIR_SMS/";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$CALL_BY_CONTACT_DIR/", ":$REMOTE_BYCONTACT_DIR_CALL/";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$MMS_BY_CONTACT_DIR/", ":$REMOTE_BYCONTACT_DIR_MMS/";
  runRetry 30, "ipmagic", $IPMAGIC_NAME, "-u", $USER, "--rsync", "-avP", "--del",
    "$MMSPIX_BY_CONTACT_DIR/", ":$REMOTE_BYCONTACT_DIR_MMSPIX/";
}

sub showGitRepoSummary($){
  my ($oldRepoHeads) = @_;

  print "\n\n=====GIT REPO SUMMARY\n";
  gitAssertClean($_) foreach @ALL_REPOS;
  my $newRepoHeads = { map {$_ => gitHead $_} @ALL_REPOS };
  for my $repo(@ALL_REPOS){
    my $oldHead = $$oldRepoHeads{$repo};
    my $newHead = $$newRepoHeads{$repo};
    if($oldHead ne $newHead){
      my @commits = gitGetCommitsSince $repo, $oldHead;
      die "\nERROR: failed listing commits since $oldHead\n" if @commits == 0;
      for my $commit(reverse @commits){
        print gitStatCommit($repo, $commit);
      }
    }
  }
}

sub cleanupFetchedBackups(){
  print "\n\n=====CLEANUP BACKUPS\n";

  my $latestBackupName;
  if(-f $LATEST_BACKUP_NAME_FILE){
   $latestBackupName = readFile($LATEST_BACKUP_NAME_FILE);
   chomp $latestBackupName;
 }

  my @backupDirs = grep {-d $_} glob "$RAW_FETCHED_DATA_DIR/*/";
  for my $backupDir(@backupDirs){
    my $backupName;
    if($backupDir =~ /^(?:.*\/)?([^\/]+)\/*$/){
      $backupName = $1;
    }else{
      die "ERROR: malformed backup dir $backupDir\n";
    }
    my $rawBackupFiles = getRawBackupFilePaths($backupName);
    if(
             (-f $$rawBackupFiles{commhistoryDb})
         and (-f $$rawBackupFiles{contactsDb})
         and (-f $$rawBackupFiles{contactsPrivDb})
         and (-f $$rawBackupFiles{contactsVcf})
    ){
      print "\ndeleting $backupDir\n";
      run "rm", "-r", $backupDir;
    }

    if(defined $latestBackupName and $backupName eq $latestBackupName){
      print "\ndeleting $LATEST_BACKUP_NAME_FILE\n";
      run "rm", $LATEST_BACKUP_NAME_FILE;
    }
  }
}

sub getRawBackupFilePaths($){
  my ($backupName) = @_;
  return {
    commhistoryDb  => "$DB_RAW_DIR/commhistory/commhistory-$backupName.db",
    contactsDb     => "$DB_RAW_DIR/contacts/contacts-$backupName.db",
    contactsPrivDb => "$DB_RAW_DIR/contacts-priv/contacts-priv-$backupName.db",
    contactsVcf    => "$CONTACTS_RAW_DIR/contacts-$backupName.vcf",
  };
}

sub gitCommit($$$$){
  my ($repoDir, $addArg, $diff, $commitMessage) = @_;

  runQuiet "git", "-C", $repoDir, "add", $addArg;
  if(defined $diff and $diff eq "diff"){
    runQuiet "git", "-C", $repoDir, "--no-pager", "diff";
    runQuiet "git", "-C", $repoDir, "--no-pager", "diff", "--cached";
  }

  my @status = `git -C '$repoDir' status --porcelain 2>&1`;
  for my $line(@status){
    die "\nERROR: unexpected git status:\n@status" if $line !~ /^(M|A)\s/;
  }

  if(@status > 0){
    runQuiet "git", "-C", $repoDir, "commit", "-m", $commitMessage;
  }

  gitAssertClean($repoDir);
}

sub gitHead($){
  my ($repoDir) = @_;

  my $head = readProc "git", "-C", $repoDir, "rev-parse", "HEAD";
  chomp $head;
  die "\nERROR: invalid commit: $head\n" if $head !~ /^[0-9a-f]{40}$/;
  return $head;
}

sub gitGetCommitsSince($$){
  my ($repoDir, $commit) = @_;

  my @commits = readProcLines "git", "-C", $repoDir, "rev-list", "$commit..HEAD";
  chomp foreach @commits;
  for my $commit(@commits){
    die "\nERROR: invalid output of rev-list: $commit\n" if $commit !~ /^[0-9a-f]{40}$/;
  }
  return @commits;
}

sub gitStatCommit($$){
  my ($repoDir, $commit) = @_;

  my $stat = readProc "git", "-C", $repoDir, "show", $commit, "--format=", "--stat";
  return $stat;
}

sub gitAssertClean($){
  my ($repoDir) = @_;

  my @status = `git -C '$repoDir' status --porcelain 2>&1`;
  if(@status > 0){
    die "\nERROR: git repo $repoDir has changes or errors:\n@status";
  }
}

&main(@ARGV);
