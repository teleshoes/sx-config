#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $IPMAGIC_NAME = "sx";
my $PACKAGE_RESTRICTIONS_XML_FILE = "/home/.android/data/system/users/0/package-restrictions.xml";

my $ALIENDALVIK_START_SCRIPT = "/usr/sbin/start-aliendalvik.sh";
my $POST_ALIENDALVIK_START_SCRIPT = "/usr/local/bin/aliendalvik-post-start";

my $REMOTE_DATA_DIR = "/home/.android/data/data";

my $SETTINGS = {
  secure => {
    "tts_default_synth"           => "com.google.android.tts",
    "tts_default_rate"            => "122",
    "tts_default_pitch"           => "92",
    "show_ime_with_hard_keyboard" => "1",
  },
  system => {
    "accelerometer_rotation" => "1",
  },
  global => {
    "time_zone"      => "America/New_York",
    "auto_time_zone" => "0",
  },
};

my $JITSI_DB = "$REMOTE_DATA_DIR/org.jitsi.meet/databases/RKStorage";
my $JITSI_DB_CONF = {
  '@jitsi-meet/features/recent-list' => ''
    . '['
    . '{' . '"conference":"https://meet.jit.si/%%%JITSI_ROOM%%%"'
    . ',' . '"date":%%%NOW_MILLIS%%%'
    . ',' . '"duration":0'
    . '}'
    . ']'
  ,
  '@jitsi-meet/features/base/settings' => ''
    . '{' . '"avatarID":"ffffffffffffffffffffffffffffffff"'
    . ',' . '"displayName":"%%%JITSI_NAME%%%"'
    . ',' . '"email":""'
    . ',' . '"localFlipX":true'
    . ',' . '"startAudioOnly":true'
    . ',' . '"startWithAudioMuted":false'
    . ',' . '"startWithVideoMuted":true'
    . '}'
  ,
};

my $PACKAGE_RESTRICTIONS = {
  "us.zoom.videomeetings" => ''
    . "    <pkg name=\"us.zoom.videomeetings\">\n"
    . "        <disabled-components>\n"
    . "            <item name=\"us.zoom.videomeetings.SendFileActivity\" />\n"
    . "        </disabled-components>\n"
    . "    </pkg>\n"
};

my $GRANT_PERMS = {
  #microg services
  "com.google.android.gms" => [qw(
    android.permission.FAKE_PACKAGE_SIGNATURE
    android.permission.ACCESS_BACKGROUND_LOCATION
    android.permission.ACCESS_COARSE_LOCATION
    android.permission.ACCESS_FINE_LOCATION
    android.permission.READ_PHONE_STATE
    android.permission.GET_ACCOUNTS
    android.permission.WRITE_EXTERNAL_STORAGE
    android.permission.READ_EXTERNAL_STORAGE
    android.permission.RECEIVE_SMS
    android.permission.SYSTEM_ALERT_WINDOW
  )],

  #fakestore
  "com.android.vending" => [qw(
    android.permission.FAKE_PACKAGE_SIGNATURE
  )],

  #signature spoof checker
  "lanchon.sigspoof.checker" => [qw(
    android.permission.FAKE_PACKAGE_SIGNATURE
  )],

  #Mozilla UnifiedNlp Backend
  "org.microg.nlp.backend.ichnaea" => [qw(
    android.permission.ACCESS_COARSE_LOCATION
    android.permission.ACCESS_FINE_LOCATION
    android.permission.ACCESS_BACKGROUND_LOCATION
    android.permission.READ_PHONE_STATE
  )],
};

sub applySettings();
sub editRemoteFile($$$);
sub editPackageRestrictions($);
sub editStartScript($);
sub setupJitsi();
sub isJitsiInitialized();
sub initJitsi();
sub updateJitsiDB();
sub nowMillis();
sub run(@);
sub runQuiet(@);

sub main(@){
  print "\n\n\napplying perms\n";
  for my $pkg(sort keys %$GRANT_PERMS){
    my $permCmd = "echo start $pkg";
    for my $perm(@{$$GRANT_PERMS{$pkg}}){
      $permCmd .= " && pm grant $pkg $perm";
    }
    $permCmd .= " && echo %SUCCESS% || echo %FAILURE%";
    my $result = `ipmagic $IPMAGIC_NAME "ad --quiet x sh -c '$permCmd' 2>&1"`;
    print $result;
    if($result !~ /^start $pkg.*%SUCCESS%$/s){
      die "ERROR: could not set perms for $pkg\n";
    }
  }

  print "\n\n\napplying settings\n";
  applySettings();

  print "\n\n\nediting package restrictions\n";
  editRemoteFile(
    "package-restrictions",
    $PACKAGE_RESTRICTIONS_XML_FILE,
    \&editPackageRestrictions,
  );

  print "\n\n\nediting start script\n";
  run "ipmagic", $IPMAGIC_NAME, "test -f $ALIENDALVIK_START_SCRIPT";
  if($? == 0){
    editRemoteFile(
      "start-script",
      $ALIENDALVIK_START_SCRIPT,
      \&editStartScript,
    );
  }else{
    print "skipping edit of non-existent $ALIENDALVIK_START_SCRIPT\n";
  }

  print "\n\n\nsetting up jitsi:\n";
  setupJitsi();
}

sub applySettings(){
  my $getCmds = "";
  my $setCmds = "";
  for my $namespace(sort keys %$SETTINGS){
    for my $key(sort keys %{$$SETTINGS{$namespace}}){
      my $val = $$SETTINGS{$namespace}{$key};
      $getCmds .= "echo -ne $namespace.$key=; ad shell settings get '$namespace' '$key';\n";
      $setCmds .= "ad shell settings put '$namespace' '$key' '$val';\n";
    }
  }

  print "settings (before):\n";
  my $before = `ipmagic $IPMAGIC_NAME "$getCmds"`;
  print "$before\n\n";

  run "ipmagic", $IPMAGIC_NAME, "$setCmds";
  print "\n\n";

  print "settings (after):\n";
  my $after = `ipmagic $IPMAGIC_NAME "$getCmds"`;
  print "$after\n\n";

  if($before eq $after){
    print "NO CHANGE\n";
  }else{
    print "SETTINGS UPDATED\n";
  }
}

sub editRemoteFile($$$){
  my ($editName, $remoteFile, $editSub) = @_;
  print "checking $editName\n";
  my $host = `ipmagic $IPMAGIC_NAME`;
  chomp $host;

  my $nowMillis = nowMillis();
  my $tmpFileOld = "/tmp/setup-aliendalvik-$editName-$nowMillis-old";
  my $tmpFileNew = "/tmp/setup-aliendalvik-$editName-$nowMillis-new";

  run "scp", "root\@$host:$remoteFile", $tmpFileOld;
  run "cp", "-ar", $tmpFileOld, $tmpFileNew;

  if(not -e $tmpFileOld or not -e $tmpFileNew){
    die "error fetching $remoteFile\n";
  }

  my $isChanged = &$editSub($tmpFileNew);

  print "\n";
  if($isChanged){
    print "$editName changed, updating..\n";
    run "ipmagic", $IPMAGIC_NAME, "-u", "root",
      "systemctl stop aliendalvik.service";

    run "diff", $tmpFileOld, $tmpFileNew;
    run "scp", $tmpFileNew, "root\@$host:$tmpFileNew";
    run "ipmagic", $IPMAGIC_NAME, "-u", "root", "
      cat $tmpFileNew > $remoteFile
      rm $tmpFileNew
    ";
    run "ipmagic", $IPMAGIC_NAME, "-u", "root",
      "systemctl start aliendalvik.service";
  }else{
    print "NO CHANGE to $editName\n";
  }

  run "rm", $tmpFileOld;
  run "rm", $tmpFileNew;
}

sub editPackageRestrictions($){
  my ($file) = @_;
  open FH, "< $file" or die "could not read $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;

  my $ws = '(?:\s|\n)*';

  if($contents !~ /
    ^
    ($ws <\?xml\s[^>]*\?> $ws <package-restrictions> $ws)
    (
      (?:
        (?:$ws<pkg[^>]*\/>)
        |
        (?:$ws<pkg[^>]*[^\/]>.*?<\/pkg>)
      )*
    )
    (
      (?: (?:$ws<preferred-activities$ws\/>$ws)
        |
        (?:$ws <preferred-activities$ws>.*?<\/preferred-activities> $ws)
      )?
      (?: (?:$ws<persistent-preferred-activities$ws\/>$ws)
        |
        (?:$ws <persistent-preferred-activities$ws>.*?<\/persistent-preferred-activities> $ws)
      )?
      (?: (?:$ws<crossProfile-intent-filters$ws\/>$ws)
        |
        (?:$ws <crossProfile-intent-filters$ws>.*?<\/crossProfile-intent-filters> $ws)
      )?
      (?: (?:$ws<default-apps$ws\/>$ws)
        |
        (?:$ws <default-apps$ws>.*?<\/default-apps> $ws)
      )?

      $ws <\/package-restrictions> $ws
    )
    $/sxi){
    die "ERROR: malformed $PACKAGE_RESTRICTIONS_XML_FILE\n";
  }
  my ($prefix, $pkgXml, $suffix) = ($1, $2, $3, $4);

  my @pkgs = $pkgXml =~ /
    (
      (?:$ws<pkg[^>]*\/>)
      |
      (?:$ws<pkg[^>]*[^\/]>.*?<\/pkg>)
    )
  /gsxi;
  if($pkgXml ne join("", @pkgs)){
    die "ERROR: malformed <pkg> tags in $PACKAGE_RESTRICTIONS_XML_FILE\n";
  }

  my $isChanged = 0;

  for my $pkg(@pkgs){
    my $pkgName = $1 if $pkg =~ /<pkg name="([^"]+)"/;
    die "malformed package: $pkg\n" if not defined $pkgName;

    if(defined $$PACKAGE_RESTRICTIONS{$pkgName}){
      my $oldPkg = $pkg;
      my $newPkg = $$PACKAGE_RESTRICTIONS{$pkgName};

      my $oldPkgTrim = $oldPkg;
      $oldPkgTrim =~ s/^$ws//sxi;
      $oldPkgTrim =~ s/$ws$//sxi;

      my $newPkgTrim = $newPkg;
      $newPkgTrim =~ s/^$ws//sxi;
      $newPkgTrim =~ s/$ws$//sxi;

      my ($wsPrefix, $wsSuffix) = ($1, $2) if $pkg =~ /^($ws).*?($ws)$/sxi;
      $newPkg = "$wsPrefix$newPkgTrim$wsSuffix";

      if($oldPkgTrim ne $newPkgTrim){
        print "PACKAGE RESTRICTION UPDATED:\n=====\n$oldPkgTrim\n=>\n=====\n$newPkgTrim\n";
        $pkg = $newPkg;
        $isChanged = 1;
      }
    }
  }

  $pkgXml = join("", @pkgs);

  $contents = $prefix . $pkgXml . $suffix;

  if($isChanged){
    open FH, "> $file" or die "could not write $file\n$!\n";
    print FH $contents;
    close FH;
  }

  return $isChanged;
}

sub editStartScript($){
  my ($file) = @_;
  open FH, "< $file" or die "could not read $file\n$!\n";
  my $contents = join '', <FH>;
  close FH;

  my $oldContents = $contents;

  $contents =~ s/###EDIT_START###(.|\n)*###EDIT_END###\n//g;

  my $editSection = ""
    . "###EDIT_START###\n"
    . "$POST_ALIENDALVIK_START_SCRIPT\n"
    . "###EDIT_END###\n"
    ;

  if($contents !~ s/(^if.*lxc_status.*active.*\n)/$1$editSection/m){
    die "could not find place where lxc_status is checked in $file\n";
  }

  my $isChanged = $contents eq $oldContents ? 0 : 1;

  if($isChanged){
    open FH, "> $file" or die "could not write $file\n$!\n";
    print FH $contents;
    close FH;
  }

  return $isChanged;
}

sub setupJitsi(){
  if(not isJitsiInitialized()){
    print "jitsi DB file not found, initializing jitsi\n";
    initJitsi();
  }

  if(not isJitsiInitialized()){
    print "WARNING: $JITSI_DB file does not exist\n";
  }else{
    updateJitsiDB();
  }
}

sub isJitsiInitialized(){
  my $file = `ipmagic $IPMAGIC_NAME -u root ls $JITSI_DB 2>/dev/null`;
  if($file =~ /$JITSI_DB/){
    return 1;
  }else{
    return 0;
  }
}

sub initJitsi(){
  print "starting jitsi..\n";
  run "ipmagic", $IPMAGIC_NAME, "ad", "--launch-intent=org.jitsi.meet/.MainActivity";

  print "waiting 2s\n";
  sleep 2;

  print "stopping jitsi..\n";
  run "ipmagic", $IPMAGIC_NAME,
    "ad", "shell", "am force-stop org.jitsi.meet";
}

sub updateJitsiDB(){
  my $nowMillis = nowMillis();
  my $jitsiName = `jitsi-meet --name`;
  chomp $jitsiName;
  my $jitsiRoom = `jitsi-meet --room`;
  chomp $jitsiRoom;

  for my $rowKey(sort keys %$JITSI_DB_CONF){
    my $rowValue = $$JITSI_DB_CONF{$rowKey};
    $rowValue =~ s/%%%NOW_MILLIS%%%/$nowMillis/g;
    $rowValue =~ s/%%%JITSI_ROOM%%%/$jitsiRoom/g;
    $rowValue =~ s/%%%JITSI_NAME%%%/$jitsiName/g;
    $rowValue =~ s/"/"\\""/g;
    print "====================\n";
    print "$JITSI_DB:\n";
    print "sqlite - update catalystLocalStorage.$rowKey\n";
    runQuiet "ipmagic", $IPMAGIC_NAME, "-u", "root", "
      sqlite3 $JITSI_DB \"
        select '   ' || value FROM catalystLocalStorage WHERE key = '$rowKey';
        select '    => ';
        update catalystLocalStorage
          set value = '$rowValue'
          where key = '$rowKey';
        select '   ' || value FROM catalystLocalStorage WHERE key = '$rowKey';
      \"
    ";
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}
sub runQuiet(@){
  system @_;
}

&main(@ARGV);
