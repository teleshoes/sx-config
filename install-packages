#!/usr/bin/perl
use strict;
use warnings;

my $ipmagicName = "sx";

my $reposDir = "$ENV{HOME}/Code/sx/repos";

sub installPackages($@);
sub installRepos(@);
sub zypperForceInstall($);
sub getZypperForceInstallExpect($);
sub run(@);
sub tryrun(@);
sub runIpmagicRoot(@);
sub tryrunIpmagicRoot(@);

my @removals = qw(
  busybox-symlinks-bash
  busybox-symlinks-coreutils
  busybox-symlinks-findutils
  busybox-symlinks-grep
  busybox-symlinks-procps
  busybox-symlinks-tar
  busybox-symlinks-gzip
);

my %packages = (
  "1-essential" => [qw(
    rsync screen
    bluez5-tools
    diffutils
    perl perl-CPAN
    htop git gnupg2 sudo gnu-tar vim-enhanced zypper
    expect
    connman-tools
    gnu-coreutils
    gnu-findutils
    gnu-grep
    bind-utils
    lipstick-qt5-tools
    mce-tools
    libkeepalive-glib-tools
    procps-ng
    qt5-qttools-qdbus
    xz
  )],

  "2-build" => [qw(
    cmake gcc gcc-c++
    pcre-devel sqlite sqlite-devel
    python3-pip
  )],

  "3-patches" => [qw(
    okboard-full
    patchutils
  )],

  "4-apps" => [qw(
    cutes-js
    gpscon
    gstreamer1.0-tools
    harbour-filetug
    harbour-gpsinfo
    harbour-jollacompass
    harbour-mimer
    harbour-mlsmanager
    harbour-modrana
    harbour-sfos-forum-viewer
    harbour-storeman
    harbour-unplayer
    harbour-whisperfish
    jolla-calculator
    jolla-mediaplayer
    jolla-notes
    jolla-calendar
    libvncserver
    python2-dbus
    sailfish-office
    youtube-dl
  )],

  "5-qtemail" => [qw(
    openssl openssl-devel
    qt5-qmake qt5-qtcore qt5-qtgui qt5-qtdeclarative-tool-qml
    qt5-qtdeclarative-qtquick qt5-qtopengl qt5-qtnetwork qt5-qtwidgets

    perl-libwww-perl

    python3-lxml
  )],

  "6-klomp" => [qw(
    qt5-qtmultimedia-plugin-mediaservice-gstaudiodecoder
  )],

  "7-weather" => [qw(
    harbour-meecast
    harbour-meecast-daemon
    harbour-meecast-event
    lipstick-jolla-home-qt5-weather-widget-settings
  )],

  "8-chum-use-zypper" => [qw(
    sailfishos-chum-gui
    wget
    rpmrebuild

    harbour-advanced-camera
    harbour-pure-maps

  )],
    #waydroid
    #waydroid-runner
);

my @zypperForceInstallPackages = qw(
  perl-CPANPLUS
  python2-pyqt5
  lipstick2vnc
  harbour-amazfish
);

my @groups = sort keys %packages;
my %groupAliases = map {$_ => substr($_, 0, 1)} @groups;
my %groupsByAlias = map {$groupAliases{$_} => $_} @groups;
die "first character of group must be unique\n" if %groupAliases != %groupsByAlias;

my @openrepos = qw(
  alina
  ade
  Ancelad
  alfmar
  anig
  aviarus
  balta
  basil
  BillyHalley
  black_sheep_dev
  CepiPerez
  coderus
  direc85
  djselbeck
  eber42
  ellefj
  equeim
  Feathers_McGraw
  fooxl
  fravaccaro
  gexc
  halftux
  hbp
  HuyliGun
  krnlyng
  llelectronics
  lourens
  MartinK
  M1KE___
  mike7b4
  minitreintje
  Matsav
  MSameer
  nephros
  NielDK
  nodevel
  osetr
  piggz
  r0kk3rz
  rgrnetalk
  Rikudou_Sennin
  ROZZ
  rubdos
  saberaltria
  Sailbook
  sailfish_browser_nightly
  sailfish_lib
  Schturman
  Sfiet_Konstantin
  szopin
  taixzo
  teleshoes
  tmi
  vasvlad
  virgi
  wdehoog
  xerxes2
);

my $OPENREPOS_HOST = "sailfish.openrepos.net";
my $JOLLA_RELEASES_HOST = "releases.jolla.com";
my $SFOS_REPO_HOST = "repo.sailfishos.org";

my @keyUrls = (
  "https://$OPENREPOS_HOST/openrepos.key",
);

my $groupCmdFmt = join "      ", map {
  "$_ | $groupAliases{$_}\n        use pkcon to install package group $_\n"
} @groups;

my $usage = "Usage:
  $0
    print the commands in the order they should be run:
        hosts keys repos storeman-obs refresh
        removals
        @groups
        force-install

  $0 [OPTS] COMMAND [COMMAND ..]
    run COMMANDs as below

    COMMAND:
      hosts
        run: cache-host --ipmagic=$ipmagicName --comment=repos \\
                $OPENREPOS_HOST \\
                $JOLLA_RELEASES_HOST \\
                $SFOS_REPO_HOST \\
             ;
          (lookup hosts locally on laptop and insert into /etc/host on phone)
        running `cache-host --refresh --comment=repos` on phone will refresh
      keys
        use rpm to import keys
      repos
        use ssu to install openrepos repositories
      repo-<OPENREPOS_USERNAME>
        use ssu to install a single openrepos repository
      refresh
        use pkcon to update package lists from repos
      refresh-<OPENREPOS_USERNAME>
        use zypper to update package lists for a single repo
      storeman-obs
        run:
          ssu rr mentaljam-obs
          rm -f /var/cache/ssu/features.ini
          ssu ar harbour-storeman-obs 'https://repo.sailfishos.org/obs/home:/olf:/harbour-storeman/%(release)_%(arch)/'
          ssu ur
          pkcon repo-set-data harbour-storeman-obs refresh-now true
      removals
        remove packages: @removals
      killpkg
        forcibly kill process packagekitd
      $groupCmdFmt
      force-install
        use zypper and expect to forcibly install: @zypperForceInstallPackages

  OPTS
    -z | --zypper
      use 'zypper install' instead of 'pkcon install'
";

sub main(@){
  my @commands;
  my $useZypper = 0;
  for my $arg(@_){
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-z|--zypper)$/){
      $useZypper = 1;
    }elsif($arg =~ /^(removals|hosts|keys|repos|refresh|killpkg|storeman-obs|force-install)$/){
      push @commands, $arg;
    }elsif($arg =~ /^(repo-\w+|refresh-\w+)$/){
      push @commands, $arg;
    }elsif(defined $packages{$arg}){
      push @commands, $arg;
    }elsif(defined $groupsByAlias{$arg}){
      push @commands, $groupsByAlias{$arg};
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if(@commands == 0){
    print "#run these commands in order to initialize:\n";
    print join(" ", "hosts", "keys", "repos", "storeman-obs", "refresh") . "\n";
    print join(" ", "removals") . "\n";
    print join(" ", @groups) . "\n";
    print join(" ", "force-install") . "\n";
    exit 0;
  }

  for my $command(@commands){
    print "\n\n\n";
    print "=====$command\n";
    if($command =~ /^removals$/){
      for my $pkg(@removals){
        tryrunIpmagicRoot "pkcon", "-y", "remove", $pkg;
      }
    }elsif($command =~ /^hosts$/){
      run("cache-host", "--ipmagic=$ipmagicName", "--comment=repos",
        $OPENREPOS_HOST,
        $JOLLA_RELEASES_HOST,
        $SFOS_REPO_HOST,
      );
    }elsif($command =~ /^keys$/){
      for my $url(@keyUrls){
        runIpmagicRoot "rpm", "--import", $url;
      }
    }elsif($command =~ /^repos$/){
      installRepos(@openrepos);
    }elsif($command =~ /^repo-(\w+)$/){
      installRepos($1);
    }elsif($command =~ /^refresh$/){
      if($useZypper){
        runIpmagicRoot "zypper", "ref", "-f";
      }else{
        runIpmagicRoot "pkcon", "refresh";
      }
    }elsif($command =~ /^refresh-(\w+)$/){
      my $repoName = "openrepos-$1";
      if($useZypper){
        runIpmagicRoot "zypper", "refresh", $repoName;
      }else{
        runIpmagicRoot "pkcon", "repo-set-data", $repoName, "refresh-now", "true";
      }
    }elsif($command =~ /^killpkg$/){
      tryrunIpmagicRoot "pkill", "-f", "packagekitd";
    }elsif($command =~ /^storeman-obs$/){
      runIpmagicRoot "ssu", "rr", "mentaljam-obs";
      runIpmagicRoot "rm", "-f", "/var/cache/ssu/features.ini";
      runIpmagicRoot "ssu", "ar", "harbour-storeman-obs",
        "'https://repo.sailfishos.org/obs/home:/olf:/harbour-storeman/%(release)_%(arch)/'";
      runIpmagicRoot "ssu", "ur";
      runIpmagicRoot "pkcon", "repo-set-data", "harbour-storeman-obs", "refresh-now", "true";
    }elsif(defined $packages{$command}){
      my @packages = @{$packages{$command}};
      if(@packages > 0){
        if($useZypper){
          runIpmagicRoot "zypper", "--non-interactive", "install", @packages;
        }else{
          runIpmagicRoot "pkcon", "-y", "install", "--allow-reinstall", @packages;
        }
      }
    }elsif($command =~ /^force-install$/){
      for my $package(@zypperForceInstallPackages){
        zypperForceInstall $package;
      }
    }else{
      die "$usage\nunknown command: $command\n";
    }
    print "=====\n";
  }
}

sub installRepos(@){
  for my $repo(@_){
    my $repoName = "openrepos-$repo";
    my $url = "https://$OPENREPOS_HOST/$repo/personal/main";
    runIpmagicRoot "ssu", "addrepo", $repoName, $url;
  }
}

sub zypperForceInstall($){
  my ($packageName) = @_;

  my $expectLibSrc = "/usr/lib/tcl/expect5.45+mer1/libexpect5.45.so";
  my $expectLibDest = "/usr/lib/libexpect5.45.so";

  tryrunIpmagicRoot "ln -s $expectLibSrc $expectLibDest";

  my $expect = getZypperForceInstallExpect($packageName);
  tryrunIpmagicRoot "expect <<HEREDOC\n$expect\nHEREDOC";
}

sub getZypperForceInstallExpect($){
  my ($packageName) = @_;
  return ""
    . "set timeout -1\n"
    . "spawn pkill packagekitd\n"
    . "spawn zypper install $packageName\n"
    . "\n"
    . "expect {\n"
    . "  \"Solution 2: break $packageName\" {\n"
    . "    expect \"Choose from above solutions by number\"\n"
    . "    send -- \"2\\n\"\n"
    . "    exp_continue\n"
    . "  }\n"
    . "  \"Continue?\" {\n"
    . "    send -- \"y\\n\"\n"
    . "    exp_continue\n"
    . "  }\n"
    . "  eof\n"
    . "}\n"
    ;
}

sub run(@){
  tryrun @_;
  die "ERROR: \"@_\" failed\n" if $? != 0;
}
sub tryrun(@){
  print "@_\n";
  system @_;
}
sub runIpmagicRoot(@){
  run "ipmagic", $ipmagicName, "-u", "root", @_;
}
sub tryrunIpmagicRoot(@){
  tryrun "ipmagic", $ipmagicName, "-u", "root", @_;
}

&main(@ARGV);
