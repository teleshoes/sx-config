#!/usr/bin/perl
use strict;
use warnings;

my $ipmagicName = "sx";

my $reposDir = "$ENV{HOME}/Code/sx/repos";

sub installPackages($@);
sub installRepos(@);
sub zypperForceInstall($);
sub getZypperForceInstallExpect($);
sub run(@);
sub tryrun(@);
sub runIpmagicRoot(@);
sub tryrunIpmagicRoot(@);

my @removals = qw(busybox-symlinks-tar busybox-symlinks-coreutils);

my %packages = (
  "1-essential" => [qw(
    rsync screen
    diffutils
    perl perl-CPAN
    htop git gnupg2 sudo tar vim-enhanced wget zypper
    expect
    gnu-coreutils
    lipstick-qt5-tools
    mce-tools
    libkeepalive-glib-tools
    pbcopy
    qt5-qttools-qdbus
    harbour-storeman
    whois
  )],

  "2-build" => [qw(
    cmake gcc gcc-c++
    pcre-devel sqlite sqlite-devel
  )],

  "3-patches" => [qw(
    okboard-full
    patchmanager
    patchutils
    sailfishos-patch-autocaps
    sailfishos-uirotate-free
  )],

  "4-apps" => [qw(
    gpscon
    gstreamer1.0-tools
    harbour-advanced-camera
    harbour-filetug
    harbour-gpsinfo
    harbour-jollacompass
    harbour-mimer
    harbour-modrana
    harbour-orienteeringcompass
    harbour-sailbook
    harbour-screentapshot2
    harbour-unplayer
    myipaddress
    stellarium
    thumbterm
    toeterm
  )],

  "5-qtemail" => [qw(
    openssl openssl-devel
    qt5-qmake qt5-qtcore qt5-qtgui qt5-qtdeclarative-tool-qml
    qt5-qtdeclarative-qtquick qt5-qtopengl qt5-qtnetwork qt5-qtwidgets
  )],

  "6-klomp" => [qw(
    qt5-qtmultimedia-plugin-mediaservice-gstaudiodecoder
  )],

  "7-weather" => [qw(
    harbour-meecast
    harbour-meecast-daemon
    harbour-meecast-event
    harbour-meecast-lockscreen
  )],
);

my @zypperForceInstallPackages = qw(
  pyqt
  perl-CPANPLUS
);

my @groups = sort keys %packages;
my %groupAliases = map {$_ => substr($_, 0, 1)} @groups;
my %groupsByAlias = map {$groupAliases{$_} => $_} @groups;
die "first character of group must be unique\n" if %groupAliases != %groupsByAlias;

my @openrepos = qw(
  alina
  ade
  Ancelad
  alfmar
  anig
  balta
  basil
  BillyHalley
  CepiPerez
  coderus
  djselbeck
  eber42
  ellefj
  equeim
  Feathers_McGraw
  fravaccaro
  gexc
  halftux
  hbp
  HuyliGun
  krnlyng
  llelectronics
  MartinK
  M1KE___
  mike7b4
  minitreintje
  Matsav
  MSameer
  NielDK
  nodevel
  osetr
  piggz
  r0kk3rz
  rgrnetalk
  Rikudou_Sennin
  ROZZ
  saberaltria
  Sailbook
  sailfish_browser_nightly
  sailfish_lib
  Schturman
  Sfiet_Konstantin
  taixzo
  teleshoes
  tmi
  vasvlad
  virgi
  wdehoog
  xerxes2
);

my @keyUrls = qw(
  http://sailfish.openrepos.net/openrepos.key
);

my $groupCmdFmt = join "      ", map {
  "$_ | $groupAliases{$_}\n        use pkcon to install package group $_\n"
} @groups;

my $usage = "Usage:
  $0 [COMMAND COMMAND ..]
    run COMMANDs as below
    if none are given, do all of these, in order:
        keys repos refresh removals
        @groups
        force-install

    COMMAND:
      keys
        use rpm to import keys
      repos
        use ssu to install openrepos repositories
      repo-<OPENREPOS_USERNAME>
        use ssu to install a single openrepos repository
      refresh
        use pkcon to update package lists from repos
      refresh-<OPENREPOS_USERNAME>
        use zypper to update package lists for a single repo
        CAUTION: before running zypper, kills packagekitd
      $groupCmdFmt
      force-install
        use zypper and expect to forcibly install: @zypperForceInstallPackages
";

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;

  my @commands = @_;
  if(@commands == 0){
    @commands = ("keys", "repos", "refresh", "removals", @groups, "force-install");
  }

  for my $command(@commands){
    print "\n\n\n";
    print "=====$command\n";
    if($command =~ /^keys$/){
      for my $url(@keyUrls){
        runIpmagicRoot "rpm", "--import", $url;
      }
    }elsif($command =~ /^repos$/){
      installRepos(@openrepos);
    }elsif($command =~ /^repo-(\w+)$/){
      installRepos($1);
    }elsif($command =~ /^refresh$/){
      #runIpmagicRoot "pkcon", "refresh";
      tryrunIpmagicRoot "pkill", "packagekitd";
      runIpmagicRoot "zypper", "ref", "-f";
    }elsif($command =~ /^refresh-(\w+)$/){
      tryrunIpmagicRoot "pkill", "packagekitd";
      runIpmagicRoot "zypper", "refresh", "openrepos-$1";
    }elsif($command =~ /^removals$/){
      for my $pkg(@removals){
        tryrunIpmagicRoot "pkcon", "-y", "remove", $pkg;
      }
    }elsif(defined $groupAliases{$command} or defined $groupsByAlias{$command}){
      my $group;
      if(defined $groupAliases{$command}){
        $group = $command;
      }elsif(defined $groupsByAlias{$command}){
        $group = $groupsByAlias{$command};
      }
      my @packages = @{$packages{$group}};
      if(@packages > 0){
        runIpmagicRoot "pkcon", "-y", "install", @packages;
      }
    }elsif($command =~ /^force-install$/){
      for my $package(@zypperForceInstallPackages){
        zypperForceInstall $package;
      }
    }else{
      die "$usage\nunknown command: $command\n";
    }
    print "=====\n";
  }
}

sub installRepos(@){
  for my $repo(@_){
    my $repoName = "openrepos-$repo";
    my $url = "http://sailfish.openrepos.net/$repo/personal/main";
    runIpmagicRoot "ssu", "addrepo", $repoName, $url;
  }
}

sub zypperForceInstall($){
  my ($packageName) = @_;

  my $expectLibSrc = "/usr/lib/tcl/expect5.45+mer1/libexpect5.45.so";
  my $expectLibDest = "/usr/lib/libexpect5.45.so";

  tryrunIpmagicRoot "ln -s $expectLibSrc $expectLibDest";

  my $expect = getZypperForceInstallExpect($packageName);
  tryrunIpmagicRoot "expect <<HEREDOC\n$expect\nHEREDOC";
}

sub getZypperForceInstallExpect($){
  my ($packageName) = @_;
  return ""
    . "set timeout -1\n"
    . "spawn pkill packagekitd\n"
    . "spawn zypper install $packageName\n"
    . "\n"
    . "expect {\n"
    . "  \"Solution 2: break $packageName\" {\n"
    . "    expect \"Choose from above solutions by number\"\n"
    . "    send -- \"2\\n\"\n"
    . "    exp_continue\n"
    . "  }\n"
    . "  \"Continue?\" {\n"
    . "    send -- \"y\\n\"\n"
    . "    exp_continue\n"
    . "  }\n"
    . "  eof\n"
    . "}\n"
    ;
}

sub run(@){
  tryrun @_;
  die "ERROR: \"@_\" failed\n" if $? != 0;
}
sub tryrun(@){
  print "@_\n";
  system @_;
}
sub runIpmagicRoot(@){
  run "ipmagic", $ipmagicName, "-u", "root", @_;
}
sub tryrunIpmagicRoot(@){
  tryrun "ipmagic", $ipmagicName, "-u", "root", @_;
}

&main(@ARGV);
