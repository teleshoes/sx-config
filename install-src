#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(time);

my $IPMAGIC_NAME = "sx";
my $USER = "nemo";

my $REMOTE_SRC_DIR = "/home/$USER/Code";
my $BIN_CACHE_BASE_DIR = "$ENV{HOME}/Code/backup/cached-bins",

my %INSTALLS = (
  sfbm           => ["GIT", "https://github.com/teleshoes/sf-button-monitor", "./install.sh"],
  klomp          => ["GIT", "https://github.com/teleshoes/klomp",             "./install.pl"],
  lirrtraintime  => ["GIT", "https://github.com/teleshoes/lirrtraintime",     "./install.sh"],
  net            => ["GIT", "https://github.com/teleshoes/net",               "./install.pl"],
  qtbigtext      => ["GIT", "https://github.com/teleshoes/qtbigtext",         "./install.pl"],
  qtbtn          => ["GIT", "https://github.com/teleshoes/qtbtn",             "./install.pl"],
  qtemail        => ["GIT", "https://github.com/teleshoes/qtemail",           "./install.sh"],
  udotool        => ["GIT", "https://github.com/teleshoes/udotool",           "make && sudo make install"],
  sqlite3_pcre   => ["GIT", "https://github.com/ralight/sqlite3-pcre",        "make && sudo make install"],
  mhonarc        => ["GIT", "https://github.com/sympa-community/MHonArc",     "perl Makefile.PL && sudo make install"],
  wget           => ["TAR", "https://ftp.gnu.org/gnu/wget/wget-1.21.2.tar.gz",""
                       . "sudo pkcon install -y gnutls-devel; "
                       . "sudo pkcon install -y libpsl-devel; "
                       . "cd wget-1.21.2 && "
                       . "./configure && "
                       . "make -j6 && "
                       . "sudo cp src/wget /usr/local/bin/wget"
                       ,
                    ],
);

my %CACHED_BINS = (
);

my @INSTALL_NAMES = sort keys %INSTALLS;
my %TYPES = map {$_ => ${$INSTALLS{$_}}[0]} @INSTALL_NAMES;
my %URLS = map {$_ => ${$INSTALLS{$_}}[1]} @INSTALL_NAMES;
my %CMDS = map {$_ => ${$INSTALLS{$_}}[2]} @INSTALL_NAMES;

my $PROJECT_FMT = join '', map {sprintf "      %-20s => %s\n", $_, $URLS{$_}} @INSTALL_NAMES;

my $CACHED_NAMES_FMT = join '', map {
  sprintf "      %s => %s\n", $_, "$BIN_CACHE_BASE_DIR/$_"
} sort keys %CACHED_BINS;

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC [NAME NAME ..]
    install named projects from URLs
    if no projects are named, default is to install all

    NAME => URL:\n$PROJECT_FMT

    the following projects will be installed from cache, if available:\n$CACHED_NAMES_FMT
";

sub install($$$$);
sub nowMillis();

sub main(@){
  die $USAGE if @_ == 1 and $_[0] =~ /^(-h|--help)$/;

  my @names = @_;
  @names = @INSTALL_NAMES if @_ == 0;
  for my $name(@names){
    die "$USAGE\n\nunknown project name: $name\n" if not defined $URLS{$name};
    if(isBinCached($name)){
      restoreBinCache($name);
    }else{
      install $name, $TYPES{$name}, $URLS{$name}, $CMDS{$name};
      backupBinCache($name);
    }
  }
}

sub isBinCached($){
  my ($projectName) = @_;
  my $cacheDir = "$BIN_CACHE_BASE_DIR/$projectName";

  my $isCached = 0;
  if(defined $CACHED_BINS{$projectName}){
    my @fileNames = sort keys %{$CACHED_BINS{$projectName}};
    my @missingCacheFiles = grep {not -f "$cacheDir/$_"} @fileNames;
    if(@missingCacheFiles == 0){
      $isCached = 1;
    }
  }
  return $isCached;
}
sub backupBinCache($){
  my ($projectName) = @_;
  my $cacheDir = "$BIN_CACHE_BASE_DIR/$projectName";
  return if not defined $CACHED_BINS{$projectName};

  system "mkdir", "-p", $cacheDir;
  my @fileNames = sort keys %{$CACHED_BINS{$projectName}};
  for my $file(@fileNames){
    my $localFile = "$cacheDir/$file";
    my $remoteFile = ${$CACHED_BINS{$projectName}}{$file};
    system "rm", "-f", $localFile;
    my $host = `ipmagic $IPMAGIC_NAME`;
    chomp $host;
    system "rsync", "-avP", "$host:$remoteFile", "$localFile";
  }
}
sub restoreBinCache($){
  my ($projectName) = @_;
  my $cacheDir = "$BIN_CACHE_BASE_DIR/$projectName";
  return if not defined $CACHED_BINS{$projectName};

  print "\n\n\ninstalling $projectName - FROM CACHE $cacheDir\n";
  my @fileNames = sort keys %{$CACHED_BINS{$projectName}};
  for my $file(@fileNames){
    my $localFile = "$cacheDir/$file";
    my $remoteFile = ${$CACHED_BINS{$projectName}}{$file};
    my $host = `ipmagic $IPMAGIC_NAME`;
    chomp $host;
    system "rsync", "-avP", "$localFile", "$host:$remoteFile";
  }
}

sub install($$$$){
  my ($projectName, $type, $url, $cmd) = @_;
  print "\n\n\ninstalling $projectName\n";
  if($type eq "GIT"){
    system "ipmagic", $IPMAGIC_NAME, "-u", $USER, "-s", ""
      . " set -x"
      . " && rm -rf $REMOTE_SRC_DIR/$projectName"
      . " && mkdir -p $REMOTE_SRC_DIR"
      . " && git clone $url $REMOTE_SRC_DIR/$projectName"
      . " && cd $REMOTE_SRC_DIR/$projectName"
      . " && echo -ne \"=====\\n=====\\n=====\\n\""
      . " && $cmd"
      ;
  }elsif($type eq "TAR"){
    my $nowMillis = nowMillis();
    my $tmpTar = "/tmp/install-src-$IPMAGIC_NAME-$projectName-$nowMillis-tarfile";
    system "ipmagic", $IPMAGIC_NAME, "-u", $USER, "-s", ""
      . " set -x"
      . " && rm -rf $REMOTE_SRC_DIR/$projectName"
      . " && mkdir -p $REMOTE_SRC_DIR/$projectName"
      . " && curl '$url' -o $tmpTar"
      . " && tar -xf $tmpTar --directory $REMOTE_SRC_DIR/$projectName"
      . " && rm $tmpTar"
      . " && cd $REMOTE_SRC_DIR/$projectName"
      . " && echo -ne \"=====\\n=====\\n=====\\n\""
      . " && $cmd"
      ;
  }else{
    die "ERROR: unknown project type $type\n";
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
