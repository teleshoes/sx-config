#!/usr/bin/perl
use strict;
use warnings;

my $BASE_DIR = "$ENV{HOME}/Code/sx";
my $BACKUP_DIR = "$BASE_DIR/backup";
my @DB_RAW_DIRS = glob "$BACKUP_DIR/backup-dbs/raw/*";

my $OLD_CUTOFF_SECONDS = 7 * 24 * 60 * 60; #7 days
my $CUTOFF_DAYS = int($OLD_CUTOFF_SECONDS/24/60/60);

my $usage = "Usage;
  $0 -h|--help
    show this message

  $0
    cleanup backups
    -bzip and deduplicate raw dbs older than $CUTOFF_DAYS days
";

sub cleanupDir($$);
sub isOld($);
sub mtime($);
sub run(@);

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
    exit 0;
  }elsif(@_ > 0){
    die $usage;
  }

  for my $dbDir(@DB_RAW_DIRS){
    cleanupDir $dbDir, ".db";
  }
}

sub cleanupDir($$){
  my ($dir, $fileSuffix) = @_;
  run "mkdir", "-p", "$dir/backup" if not -d "$dir/backup";
  die "not a directory: $dir\n" if not -d $dir;
  die "not a directory: $dir/backup\n" if not -d "$dir/backup";

  my @oldFiles = grep {isOld $_} glob "$dir/*$fileSuffix";
  for my $file(@oldFiles){
    run "bzip2", $file;
  }

  my @bz2Files = glob "$dir/*$fileSuffix.bz2";
  for my $file(@bz2Files){
    run "mv", "--no-clobber", $file, "$dir/backup/";
  }

  system "dedupe-dir-files", "--remove-dupes", "$dir/backup";
}

sub isOld($){
  my $mtime = mtime $_[0];
  return (time - $mtime) > $OLD_CUTOFF_SECONDS ? 1 : 0;
}

sub mtime($){
  my @stat = stat $_[0];
  return $stat[9];
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
