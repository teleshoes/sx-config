#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $user = "nemo";
my $ipmagicName = "sx";

my $localDir = "$ENV{HOME}/Code/sx/backup/DCIM";
my @backups = (
  [ $localDir, "/media/sdcard/phone/Pictures/Camera",   "backup_sd-phone_sf"],
  [ $localDir, "/media/sdcard/phone/Videos/Camera",     "backup_sd-phone_sf_vid"],
  [ $localDir, "/home/nemo/Pictures/Camera",            "backup_int_sf"],
  [ $localDir, "/home/nemo/Videos/Camera",              "backup_int_sf_vid"],
  [ $localDir, "/home/nemo/Videos/Camera/.recording",   "backup_int_sf_vid_RECORDING"],
);
my $remoteTmpDir = "/media/sdcard/phone/dcim-tmp";
my $localTmpDir = "$ENV{HOME}/dcim-tmp";

my @filetypes = qw(jpg jpeg png mp4);

sub dcimBackup($$$);
sub reorganizeBackedUpRemotes($$$$$);
sub md5sumMaps(\@);
sub runMd5sum($);
sub wrapQuotes($);
sub findDCIMFiles($);
sub updateMd5sums($);
sub updateLocalDCIMInfo($);
sub readLocalDCIMInfoCache($);
sub writeLocalDCIMInfoCache($$);
sub getRemoteDCIMInfo($);
sub getFileKey($);
sub remoteDirExists($);

sub main(@){
  for my $backup(@backups){
    my ($localDCIM, $remoteDCIM, $backupPrefix) = @$backup;
    dcimBackup($localDCIM, $remoteDCIM, $backupPrefix);
  }
  for my $backup(@backups){
    my ($localDCIM, $remoteDCIM, $backupPrefix) = @$backup;
    checkMissing($localDCIM, $remoteDCIM);
  }
}

sub dcimBackup($$$){
  my ($localDCIM, $remoteDCIM, $backupPrefix) = @_;

  die "local $localDCIM does not exist\n" if not -d $localDCIM;
  die "remote $remoteDCIM does not exist\n" if not remoteDirExists $remoteDCIM;
  chdir $localDCIM;
  print "Getting md5sums of files in root of remote DCIM\n";
  my @remoteMd5sums = `ipmagic $ipmagicName -u $user md5sum $remoteDCIM/*.* 2>/dev/null`;

  print "===all:\n" . join "", @remoteMd5sums;
  print "===\n\n";

  my $localByMd5sum = updateMd5sums($localDCIM);

  my ($remoteByMd5sum, $remoteByFile) = md5sumMaps @remoteMd5sums;

  my (@backedUp, @needsBackUp);
  for my $md5sum(keys %$remoteByMd5sum){
    my $file = $$remoteByMd5sum{$md5sum};
    if(defined $$localByMd5sum{$md5sum}){
      push @backedUp, $file;
    }else{
      push @needsBackUp, $file;
    }
  }

  reorganizeBackedUpRemotes($remoteDCIM, \@backedUp,
    $localByMd5sum, $remoteByMd5sum, $remoteByFile);

  print "\n\n===NEEDS BACKUP:\n" . join "\n", sort @needsBackUp;
  print "===\n\n";

  if(@needsBackUp > 0){
    my $now = `date +%Y-%m-%d_%s`;
    chomp $now;
    my $dir = "$localDCIM/${backupPrefix}_$now";
    system "mkdir -p $dir";
    my $host = `ipmagic $ipmagicName`;
    die "could not read ipmagic $ipmagicName hostname\n" if $? != 0;
    chomp $host;
    system "rsync -avP $user\@$host:$remoteDCIM/*.* $dir/";
    die "failed rsync backup\n" if $? != 0;

    print "updating local md5sums again and re-reorganizing remote\n";
    $localByMd5sum = updateMd5sums($localDCIM);

    reorganizeBackedUpRemotes($remoteDCIM, \@needsBackUp,
      $localByMd5sum, $remoteByMd5sum, $remoteByFile);
  }
}

sub reorganizeBackedUpRemotes($$$$$){
  my $remoteDCIM = shift;
  my @backedUpFiles = @{shift()};
  my $localByMd5sum = shift;
  my $remoteByMd5sum = shift;
  my $remoteByFile = shift;

  my @reorganizeCmds;
  for my $file(sort @backedUpFiles){
    my $md5sum = $$remoteByFile{$file};
    my $localFile = $$localByMd5sum{$md5sum};
    if(not defined $localFile){
      print "\n\n\n\nSERIOUS ERROR: local backup doesnt exist: $file!\n";
      next;
    }
    my $newRemoteFile = "$remoteDCIM/$localFile";
    my $dir = $newRemoteFile;
    $dir =~ s/\/[^\/]*$//;
    $dir = wrapQuotes $dir;
    $file = wrapQuotes $file;
    $newRemoteFile = wrapQuotes $newRemoteFile;
    push @reorganizeCmds, "mkdir -p $dir; mv $file $newRemoteFile;\n";
  }
  my $total = @reorganizeCmds;
  print "\n\nReorganizing $total remote files to match local\n";
  if(@reorganizeCmds > 0){

    my @cmdChunks;
    push @cmdChunks, [ splice @reorganizeCmds, 0, 100 ] while @reorganizeCmds;
    for my $cmdChunk(@cmdChunks){
      my $cmd = join '', @$cmdChunk;
      my $count = @$cmdChunk;
      print "\n\n#running $count mv commands\n$cmd";
      system "ipmagic", $ipmagicName, "-u", $user, $cmd;
      die "failed reorganizing remotes\n" if $? != 0;
    }
  }
}

sub md5sumMaps(\@){
  my %byMd5sum;
  my %byFile;
  my @md5sumLines = @{shift()};
  for my $line(@md5sumLines){
    if($line =~ /^([0-9a-f]{32})  (.+)\n$/){
      $byFile{$2} = $1;
      $byMd5sum{$1} = $2;
    }
  }
  return (\%byMd5sum, \%byFile);
}

sub runMd5sum($){
  my $file = shift;
  $file = wrapQuotes $file;
  my $md5sum = `md5sum $file`;
  die "failed generating md5sum for $file\n" if $? != 0;
  return $md5sum;
}

sub wrapQuotes($){
  my $s = shift;
  $s =~ s/'/'\\''/g;
  $s = "'$s'";
  return $s;
}

sub findDCIMFiles($){
  my ($localDCIM) = @_;
  my @files = `cd $localDCIM && find -not -type d`;
  my @okFiles;
  my $okFiletypes = join "|", @filetypes;
  for my $file(sort @files){
    chomp $file;
    if($file =~ /\.($okFiletypes)$/i){
      push @okFiles, $file;
    }
  }
  return @okFiles;
}

sub updateMd5sums($){
  my $localDCIM = shift;
  my @lines = `cat $localDCIM/md5sums`;
  my ($byMd5sum, $byFile) = md5sumMaps @lines;

  my @files = findDCIMFiles $localDCIM;
  @files = grep {not defined $$byFile{$_}} @files;

  print "md5summing local files\n";
  @lines = map {runMd5sum $_} @files;
  print @lines;

  my ($extraByMd5sum, $extraByFile) = md5sumMaps @lines;
  my %newByMd5sum = (%$byMd5sum, %$extraByMd5sum);
  my %newByFile = (%$byFile, %$extraByFile);

  my $out;
  for my $file(sort keys %newByFile){
    if(-e "$localDCIM/$file"){
      $out .= "$newByFile{$file}  $file\n";
    }else{
      print "removing md5sum for $file\n";
      my $md5 = $newByFile{$file};
      delete $newByFile{$file};
      delete $newByMd5sum{$md5};
    }
  }

  open FH, "> $localDCIM/md5sums";
  print FH $out;
  close FH;

  return \%newByMd5sum;
}

sub checkMissing($$){
  my ($localDCIM, $remoteDCIM) = @_;
  print "checking $remoteDCIM for missing files"
    . " (by rough filename and exact mtime+size)\n";
  my $localDCIMInfo = updateLocalDCIMInfo $localDir;

  my $localInfosByKey = {};
  for my $file(sort keys %$localDCIMInfo){
    my $key = getFileKey($file);

    $$localInfosByKey{$key} = [] if not defined $$localInfosByKey{$key};
    push @{$$localInfosByKey{$key}}, $$localDCIMInfo{$file};
  }

  my $remoteDCIMInfo = getRemoteDCIMInfo $remoteDCIM;
  my $fileErrors = {};
  for my $file(sort keys %$remoteDCIMInfo){
    my $key = getFileKey($file);

    my @infos;
    if(defined $$localInfosByKey{$key}){
      @infos = @{$$localInfosByKey{$key}};
    }

    my $mtime = $$remoteDCIMInfo{$file}{mtime};
    my $size = $$remoteDCIMInfo{$file}{size};
    my $infoFound = 0;
    for my $info(@infos){
      if($$info{mtime} == $mtime and $$info{size} == $size){
        $infoFound = 1;
        last;
      }
    }

    if(@infos == 0){
      $$fileErrors{$file} = "no local file matching key $key found";
    }elsif(not $infoFound){
      $$fileErrors{$file} = "mismatched mtime/size for key $key";
    }
  }

  if(%$fileErrors == 0){
    print "no missing files for $remoteDCIM\n";
  }else{
    my @files = sort keys %$fileErrors;
    my $missingCount = @files;
    print "$missingCount REMOTE FILES MISSING FROM LOCAL\n";
    for my $file(sort keys %$fileErrors){
      my $err = $$fileErrors{$file};
      print "  $file - $err\n";
    }

    my $nowMillis = int(time * 1000.0);
    my $subdir = "dcim-missing-$nowMillis";

    my $host = `ipmagic $ipmagicName`;
    die "could not read ipmagic $ipmagicName hostname\n" if $? != 0;
    chomp $host;

    print ""
      . "\n\n"
      . "copy command:\n"
      . "ipmagic $ipmagicName '"
      . "  mkdir -p $remoteTmpDir/$subdir &&"
      . "  cd $remoteDCIM &&"
      . "  cp -ar @files $remoteTmpDir/$subdir"
      . "'\n"
      . "rsync -avP $user\@$host:$remoteTmpDir/ $localTmpDir/\n";
  }
  print "\n";
}

sub updateLocalDCIMInfo($){
  my ($localDCIM) = @_;
  my $infoByFile = readLocalDCIMInfoCache $localDCIM;

  my @files = findDCIMFiles $localDCIM;

  my @newFiles = grep {not defined $$infoByFile{$_}} @files;

  my $newCount = @newFiles;
  my $oldCount = %$infoByFile;
  print "getting mtime+size of $newCount local files (skipping $oldCount)\n";
  for my $file(@newFiles){
    my @stat = stat "$localDCIM/$file";
    my $mtime = $stat[9];
    my $size = $stat[7];

    if(not defined $mtime or not defined $size){
      die "stat failed for file: $file\n";
    }
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }

  writeLocalDCIMInfoCache $localDCIM, $infoByFile;

  return $infoByFile;
}

sub readLocalDCIMInfoCache($){
  my ($localDCIM) = @_;
  my @lines = `cat $localDCIM/info 2>/dev/null`;
  my $infoByFile = {};
  for my $line(@lines){
    if($line !~ /^(\d+)\s+(\d+)\s+(\.\/.+)$/){
      die "malformed info line: $line";
    }
    my ($mtime, $size, $file) = ($1, $2, $3);
    die "duplicate file: $file\n" if defined $$infoByFile{$file};
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }
  return $infoByFile;
}

sub writeLocalDCIMInfoCache($$){
  my ($localDCIM, $infoByFile) = @_;
  open FH, "> $localDCIM/info";
  for my $file(sort keys %$infoByFile){
    printf FH "%10d  %12d  %s\n",
      $$infoByFile{$file}{mtime}, $$infoByFile{$file}{size}, $file;
  }
  close FH;
}

sub getRemoteDCIMInfo($){
  my ($remoteDCIM) = @_;
  my $findStatCmd = "cd $remoteDCIM && find -not -type d -exec stat -c %Y-%s-%n {} \\;";

  my $infoByFile = {};
  print "fetching remote file info for $remoteDCIM\n";
  my @stats = `ipmagic $ipmagicName '$findStatCmd'`;

  my $statCount = @stats;
  print "fetched info for $statCount files\n";
  for my $stat(@stats){
    chomp $stat;
    if($stat !~ /^(\d+)-(\d+)-(.+)$/){
      die "malformed remote stat output: $stat\n";
    }
    my ($mtime, $size, $file) = ($1, $2, $3);
    if(defined $$infoByFile{$file}){
      die "duplicate file: $file\n";
    }
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }

  return $infoByFile;
}

sub getFileKey($){
  my ($file) = @_;

  my $key = lc $file;
  $key =~ s/^.*\///;
  $key =~ s/^VID_//i;
  $key =~ s/_[a-z][a-z0-9_\-]*\./\./i;
  $key =~ s/jpeg$/jpg/i;

  return $key;
}

sub remoteDirExists($){
  my ($dir) = @_;
  my $out = `ipmagic $ipmagicName -u $user 'if [ -d "$dir" ]; then echo exists; fi' 2>/dev/null`;
  if($out =~ /^exists$/){
    return 1;
  }else{
    return 0;
  }
}

&main(@ARGV);
