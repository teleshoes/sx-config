#!/usr/bin/perl
use strict;
use warnings;
use lib `dirname $0 | tr -d '\n'`;
use PhoneBackupUtils;
use Time::HiRes qw(time);

my $USER = "nemo";
my $IPMAGIC_NAME = "sx";

my $SDCARD = "/media/sdcard/phone";
my $HOME = "/home/$USER";
my $ANDROID = "$HOME/android_storage";

my $LOCAL_DIR = "$ENV{HOME}/Code/sx/backup/DCIM";
my @BACKUPS = (
  [ 'REQ', 'CHK', "$SDCARD/Pictures/Camera",        "sd-phone_sf"],
  [ 'REQ', 'CHK', "$SDCARD/Videos/Camera",          "sd-phone_sf_vid"],
  [ 'REQ', 'CHK', "$SDCARD/Pictures/AdvancedCam",   "sd-phone-adv_sf"],
  [ 'REQ', 'CHK', "$SDCARD/Videos/AdvancedCam",     "sd-phone-adv_sf_vid"],
  [ 'REQ', 'CHK', "$SDCARD/DCIM/OpenCamera",        "sd-phone-oc"],

  [ 'REQ', 'CHK', "$ANDROID/DCIM/OpenCamera",       "int_oc"],

  [ 'REQ', 'CHK', "$HOME/Pictures/Camera",          "int_sf"],
  [ 'REQ', 'CHK', "$HOME/Videos/Camera",            "int_sf_vid"],
  [ 'OPT', 'CHK', "$HOME/Videos/Camera/.recording", "int_sf_vid_RECORDING"],
  [ 'REQ', 'CHK', "$HOME/Pictures/AdvancedCam",     "int-adv_sf"],
  [ 'REQ', 'CHK', "$HOME/Videos/AdvancedCam",       "int-adv_sf_vid"],
  [ 'REQ', 'SKP', "$HOME/Pictures/",                "int-pix_sf"],
  [ 'OPT', 'CHK', "$HOME/Pictures/Screenshots",     "int_scrn"],
);
my $REMOTE_TMP_DIR = "/media/sdcard/phone/dcim-tmp";
my $LOCAL_TMP_DIR = "$ENV{HOME}/dcim-tmp";

my @FILETYPE_EXTS = qw(jpg jpeg png gif mp4);

my $USAGE = "Usage:
  $0 -h | --help
    show this message

  $0 [OPTS]
    -backup DCIM/image/video dirs from $IPMAGIC_NAME home and sdcard with rsync to:
      $LOCAL_DIR
    -move the files to subdirs of the original dir named backup_YYYY-MM-DD_EPOCH_NAME
    -check for missing files

  OPTS
    --quick | --fast
      skip checking for missing files
";

sub dcimBackup($$$$);
sub reorganizeBackedUpRemotes($$$$$);
sub md5sumMaps(\@);
sub runMd5sum($);
sub wrapQuotes($);
sub findDCIMFiles($);
sub updateMd5sums($);
sub updateLocalDCIMInfo($);
sub readLocalDCIMInfoCache($);
sub writeLocalDCIMInfoCache($$);
sub getRemoteDCIMInfo($);
sub getFileKey($);
sub remoteDirExists($);

sub main(@){
  my $opts = {
    quick => 0,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--quick|--fast)$/){
      $$opts{quick} = 1;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  for my $backup(@BACKUPS){
    my ($reqType, $checkType, $remoteDCIM, $backupSuffix) = @$backup;
    dcimBackup($reqType, $LOCAL_DIR, $remoteDCIM, $backupSuffix);
  }

  for my $backup(@BACKUPS){
    my ($reqType, $checkType, $remoteDCIM, $backupSuffix) = @$backup;
    if($checkType =~ /CHK/){
      if($$opts{quick}){
        print "SKIP check-missing for $remoteDCIM [QUICK]\n";
      }else{
        checkMissing($LOCAL_DIR, $remoteDCIM);
      }
    }elsif($checkType =~ /SKP/){
      print "SKIP check-missing for $remoteDCIM\n";
    }else{
      die "ERROR: invalid check-type $checkType\n";
    }
  }
}

sub dcimBackup($$$$){
  my ($reqType, $localDCIM, $remoteDCIM, $backupSuffix) = @_;

  my $isFailure = 0;
  my $failureMsg = undef;
  if(not -d $localDCIM){
    $isFailure = 1;
    $failureMsg = "local $localDCIM does not exist\n";
  }elsif(not remoteDirExists $remoteDCIM){
    $isFailure = 1;
    $failureMsg ="remote $remoteDCIM does not exist\n";
  }

  if($isFailure){
    if($reqType eq 'OPT'){
      print "\nWARNING: $failureMsg\n";
      return;
    }else{
      die "\n\nERROR: $failureMsg\n";
    }
  }

  chdir $localDCIM;
  print "\n\n===============\n";
  print "Fetching remote md5sums: $remoteDCIM\n";
  my @remoteMd5sums = readProcLinesRetry(3600,
    "ipmagic", $IPMAGIC_NAME, "-u", $USER, "-s",
      "find $remoteDCIM/ -maxdepth 1 -type f -exec md5sum {} \\;",
  );

  print "===all:\n" . join "", @remoteMd5sums;
  print "===\n\n";

  my $localByMd5sum = updateMd5sums($localDCIM);

  my ($remoteByMd5sum, $remoteByFile) = md5sumMaps @remoteMd5sums;

  my (@backedUp, @needsBackUp);
  for my $md5sum(keys %$remoteByMd5sum){
    my $file = $$remoteByMd5sum{$md5sum};
    if(defined $$localByMd5sum{$md5sum}){
      push @backedUp, $file;
    }else{
      push @needsBackUp, $file;
    }
  }

  reorganizeBackedUpRemotes($remoteDCIM, \@backedUp,
    $localByMd5sum, $remoteByMd5sum, $remoteByFile);

  print "\n\n===NEEDS BACKUP:\n" . join "\n", sort @needsBackUp;
  print "===\n\n";

  if(@needsBackUp > 0){
    my $now = `date +%Y-%m-%d_%s`;
    chomp $now;
    my $dir = "$localDCIM/backup_${now}_${backupSuffix}";
    system "mkdir -p $dir";

    runRetryQuiet(3600,
      "ipmagic", $IPMAGIC_NAME, "-u", $USER,
        "--rsync",
        "-avP",
        "--exclude=backup_*/",
        ":$remoteDCIM/",
        "$dir/"
    );

    if(-e "$dir/.recording"){
      system "rmdir $dir/.recording";
    }

    print "updating local md5sums again and re-reorganizing remote\n";
    $localByMd5sum = updateMd5sums($localDCIM);

    reorganizeBackedUpRemotes($remoteDCIM, \@needsBackUp,
      $localByMd5sum, $remoteByMd5sum, $remoteByFile);
  }
}

sub reorganizeBackedUpRemotes($$$$$){
  my $remoteDCIM = shift;
  my @backedUpFiles = @{shift()};
  my $localByMd5sum = shift;
  my $remoteByMd5sum = shift;
  my $remoteByFile = shift;

  my @reorganizeCmds;
  for my $file(sort @backedUpFiles){
    my $md5sum = $$remoteByFile{$file};
    my $localFile = $$localByMd5sum{$md5sum};
    if(not defined $localFile){
      die "\n\nSERIOUS ERROR: local backup doesnt exist: $file!\n";
    }
    my $newRemoteFile = "$remoteDCIM/$localFile";
    my $dir = $newRemoteFile;
    $dir =~ s/\/[^\/]*$//;
    $dir = wrapQuotes $dir;
    $file = wrapQuotes $file;
    $newRemoteFile = wrapQuotes $newRemoteFile;
    push @reorganizeCmds, "mkdir -p $dir; mv $file $newRemoteFile;\n";
  }
  my $total = @reorganizeCmds;
  print "\n\nReorganizing $total remote files to match local\n";
  if(@reorganizeCmds > 0){

    my @cmdChunks;
    push @cmdChunks, [ splice @reorganizeCmds, 0, 100 ] while @reorganizeCmds;
    for my $cmdChunk(@cmdChunks){
      my $cmd = join '', @$cmdChunk;
      my $count = @$cmdChunk;
      print "\n\n#running $count mv commands\n$cmd";
      runRetryQuiet(30,
        "ipmagic", $IPMAGIC_NAME, "-u", $USER, "-s", $cmd,
      );
    }
  }
}

sub md5sumMaps(\@){
  my %byMd5sum;
  my %byFile;
  my @md5sumLines = @{shift()};
  for my $line(@md5sumLines){
    if($line =~ /^([0-9a-f]{32})  (.+)\n?$/){
      $byFile{$2} = $1;
      $byMd5sum{$1} = $2;
    }else{
      die "ERROR: malformed md5sum line $line\n";
    }
  }
  return (\%byMd5sum, \%byFile);
}

sub runMd5sum($){
  my $file = shift;
  $file = wrapQuotes $file;
  my $md5sum = `md5sum $file`;
  die "failed generating md5sum for $file\n" if $? != 0;
  return $md5sum;
}

sub wrapQuotes($){
  my $s = shift;
  $s =~ s/'/'\\''/g;
  $s = "'$s'";
  return $s;
}

sub findDCIMFiles($){
  my ($localDCIM) = @_;
  my @files = `cd $localDCIM && find -not -type d`;
  my @okFiles;
  my $okFiletypeExts = join "|", @FILETYPE_EXTS;
  for my $file(sort @files){
    chomp $file;
    if($file =~ /\.($okFiletypeExts)$/i){
      push @okFiles, $file;
    }
  }
  return @okFiles;
}

sub updateMd5sums($){
  my $localDCIM = shift;
  my @lines = `cat $localDCIM/md5sums`;
  my ($byMd5sum, $byFile) = md5sumMaps @lines;

  my @files = findDCIMFiles $localDCIM;
  @files = grep {not defined $$byFile{$_}} @files;

  print "md5summing local files\n";
  @lines = map {runMd5sum $_} @files;
  print @lines;

  my ($extraByMd5sum, $extraByFile) = md5sumMaps @lines;
  my %newByMd5sum = (%$byMd5sum, %$extraByMd5sum);
  my %newByFile = (%$byFile, %$extraByFile);

  my $out;
  for my $file(sort keys %newByFile){
    if(-e "$localDCIM/$file"){
      $out .= "$newByFile{$file}  $file\n";
    }else{
      print "removing md5sum for $file\n";
      my $md5 = $newByFile{$file};
      delete $newByFile{$file};
      delete $newByMd5sum{$md5};
    }
  }

  open FH, "> $localDCIM/md5sums";
  print FH $out;
  close FH;

  return \%newByMd5sum;
}

sub checkMissing($$){
  my ($localDCIM, $remoteDCIM) = @_;
  print "checking $remoteDCIM for missing files"
    . " (by rough filename and exact mtime+size)\n";
  my $localDCIMInfo = updateLocalDCIMInfo $LOCAL_DIR;

  my $localInfosByKey = {};
  for my $file(sort keys %$localDCIMInfo){
    my $key = getFileKey($file);

    $$localInfosByKey{$key} = [] if not defined $$localInfosByKey{$key};
    push @{$$localInfosByKey{$key}}, $$localDCIMInfo{$file};
  }

  my $remoteDCIMInfo = getRemoteDCIMInfo $remoteDCIM;
  my $fileErrors = {};
  for my $file(sort keys %$remoteDCIMInfo){
    my $key = getFileKey($file);

    my @infos;
    if(defined $$localInfosByKey{$key}){
      @infos = @{$$localInfosByKey{$key}};
    }

    my $mtime = $$remoteDCIMInfo{$file}{mtime};
    my $size = $$remoteDCIMInfo{$file}{size};
    my $infoFound = 0;
    for my $info(@infos){
      if($$info{mtime} == $mtime and $$info{size} == $size){
        $infoFound = 1;
        last;
      }
    }

    if(@infos == 0){
      $$fileErrors{$file} = "no local file matching key $key found";
    }elsif(not $infoFound){
      $$fileErrors{$file} = "mismatched mtime/size for key $key";
    }
  }

  if(%$fileErrors == 0){
    print "no missing files for $remoteDCIM\n";
  }else{
    my @files = sort keys %$fileErrors;
    my $missingCount = @files;
    print "$missingCount REMOTE FILES MISSING FROM LOCAL\n";
    for my $file(sort keys %$fileErrors){
      my $err = $$fileErrors{$file};
      print "  $file - $err\n";
    }

    my $nowMillis = int(time * 1000.0);
    my $subdir = "dcim-missing-$nowMillis";

    print ""
      . "\n\n"
      . "copy command:\n"
      . "ipmagic $IPMAGIC_NAME -s '"
      . "  mkdir -p $REMOTE_TMP_DIR/$subdir &&"
      . "  cd $remoteDCIM &&"
      . "  cp -ar @files $REMOTE_TMP_DIR/$subdir"
      . "'\n"
      . "ipmagic $IPMAGIC_NAME -u $USER --rsync -avP :$REMOTE_TMP_DIR/ $LOCAL_TMP_DIR/\n";
  }
  print "\n";
}

sub updateLocalDCIMInfo($){
  my ($localDCIM) = @_;
  my $infoByFile = readLocalDCIMInfoCache $localDCIM;

  my @files = findDCIMFiles $localDCIM;

  my @newFiles = grep {not defined $$infoByFile{$_}} @files;

  my $newCount = @newFiles;
  my $oldCount = %$infoByFile;
  print "getting mtime+size of $newCount local files (skipping $oldCount)\n";
  for my $file(@newFiles){
    my @stat = stat "$localDCIM/$file";
    my $mtime = $stat[9];
    my $size = $stat[7];

    if(not defined $mtime or not defined $size){
      die "stat failed for file: $file\n";
    }
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }

  writeLocalDCIMInfoCache $localDCIM, $infoByFile;

  return $infoByFile;
}

sub readLocalDCIMInfoCache($){
  my ($localDCIM) = @_;
  my @lines = `cat $localDCIM/info 2>/dev/null`;
  my $infoByFile = {};
  for my $line(@lines){
    if($line !~ /^\s*(\d+)\s+(\d+)\s+(\.\/.+)$/){
      die "malformed info line: $line";
    }
    my ($mtime, $size, $file) = ($1, $2, $3);
    die "duplicate file: $file\n" if defined $$infoByFile{$file};
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }
  return $infoByFile;
}

sub writeLocalDCIMInfoCache($$){
  my ($localDCIM, $infoByFile) = @_;
  open FH, "> $localDCIM/info";
  for my $file(sort keys %$infoByFile){
    printf FH "%10d  %12d  %s\n",
      $$infoByFile{$file}{mtime}, $$infoByFile{$file}{size}, $file;
  }
  close FH;
}

sub getRemoteDCIMInfo($){
  my ($remoteDCIM) = @_;
  my $findStatCmd = "find $remoteDCIM -type f -exec stat -c %Y-%s-%n {} \\;";

  my $infoByFile = {};
  print "fetching remote file info for $remoteDCIM\n";
  my @stats = readProcLinesRetry(30,
    "ipmagic", $IPMAGIC_NAME, "-s", $findStatCmd,
  );

  my $statCount = @stats;
  print "fetched info for $statCount files\n";
  for my $stat(@stats){
    chomp $stat;
    if($stat !~ /^(\d+)-(\d+)-(.+)$/){
      die "malformed remote stat output: $stat\n";
    }
    my ($mtime, $size, $filePath) = ($1, $2, $3);
    my $file;
    if($filePath =~ /^$remoteDCIM\/(.+)$/){
      $file = $1;
    }else{
      die "ERROR: malformed output of $findStatCmd\n$stat\n";
    }
    if(defined $$infoByFile{$file}){
      die "duplicate file: $file\n";
    }
    $$infoByFile{$file} = {mtime=>$mtime, size=>$size};
  }

  return $infoByFile;
}

sub getFileKey($){
  my ($file) = @_;

  my $key = lc $file;
  $key =~ s/^.*\///;
  $key =~ s/^VID_//i;
  $key =~ s/_[a-z][a-z0-9_\-]*\./\./i;
  $key =~ s/jpeg$/jpg/i;

  return $key;
}

sub remoteDirExists($){
  my ($dir) = @_;

  $dir =~ s/'/'\\''/g;

  my $out = readProcRetry(3,
    "ipmagic", $IPMAGIC_NAME, "-u", $USER, "-s",
    "if [ -d '$dir' ]; then echo EXISTS; else echo MISSING; fi",
  );

  if($out =~ /^EXISTS$/){
    return 1;
  }elsif($out =~ /^MISSING$/){
    return 0;
  }else{
    die "ERROR: failed to check status of remote dir $dir\n";
  }
}

&main(@ARGV);
